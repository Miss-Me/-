<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miss Me</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T08:22:47.014Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Miss Me</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css长度单位总结</title>
    <link href="http://yoursite.com/2019/08/22/css%E9%95%BF%E5%BA%A6%E5%8D%95%E4%BD%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/22/css长度单位总结/</id>
    <published>2019-08-22T06:38:15.000Z</published>
    <updated>2019-08-22T08:22:47.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>CSS中有很多长度单位，本文主要对CSS常见的长度单位进行总结。主要分为两类，一类是相对长度单位：px/em/rem/vm/vh/%/百分号/ex/ch；另一类是pt/in/cm/mm/q</p><a id="more"></a><h2 id="00x1-相对长度单位"><a href="#00x1-相对长度单位" class="headerlink" title="00x1 相对长度单位"></a>00x1 相对长度单位</h2><h3 id="1-1-px"><a href="#1-1-px" class="headerlink" title="1.1 px"></a>1.1 px</h3><p>px（pixel）指像素。像素px是相对于显示器屏幕分辨率而言的，是屏幕上显示数据的最基本的点。点可大可小，点小画面更清晰，“分辨率高”；反之，就是分辨率高，所以是相对长度单位。</p><p>px =  1/dpi(英寸)</p><h3 id="1-2-em"><a href="#1-2-em" class="headerlink" title="1.2 em"></a>1.2 em</h3><p>em，最初指字母M的宽度，是一个相对长度单位。相对于其父元素的font-size。假设其父元素设置font-size为16px，那1em = 16px；0.5em = 8px。</p><h3 id="1-3-rem"><a href="#1-3-rem" class="headerlink" title="1.3 rem"></a>1.3 rem</h3><p>rem，CSS3引入了rem，是一个相对长度单位，指相对于根元素的font-size。</p><p>默认情况下，html元素的font-size为12px。主要用于移动端适配。</p><p>优点：</p><ul><li>rem单位是根据根元素font-size决定大小，只要改变font-size的值，以rem为固定单位的元素大小也会发生响应式的改变</li></ul><p>缺点：</p><ul><li>必须通过一段js代码控制font-size的大小</li><li>控制font-size的js代码必须放在在页面第一次加载完成之前，并且放在引入的css样式代码之前。</li></ul><h3 id="1-4-视区相对单位"><a href="#1-4-视区相对单位" class="headerlink" title="1.4  视区相对单位"></a>1.4  视区相对单位</h3><p>CSS3中还引入了vm，vh视区相对单位，vw表示相对于视口的宽度，vh表示相对于视口高度。“视区”指浏览器上的可视区域大小，即用户能看到的页面区域。视口宽度为100vm占满整个视口区域，那么1vw就相当于占整个视口宽度的1%。也能够用于移动端适配。</p><p>优点：</p><ul><li>指定vw\vh相对与视口的宽高，由px换算单位成vw单位比较简单</li><li>通过postcss-px-to-viewport插件进行单位转换比较方便</li></ul><p>缺点：</p><ul><li><p>直接进行单位换算时百分比可能出现小数,计算不方便</p></li><li><p>兼容性- 大多数浏览器都支持、ie11不支持 少数低版本手机系统 ios8、android4.4以下不支持</p></li></ul><h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5 %"></a>1.5 %</h3><p>%也是一个相对单位，但是各元素的属性的百分比都是根据不同的属性的来设置的。也可以用来进行移动端适配</p><ul><li><p>子元素width、height的百分比是相对于子元素的直接父元素设定的</p></li><li><p>margin和padding的百分比，无论是垂直方向上的还是水平方向上的，都是相对于直接父元素的width。</p></li><li><p>border-radius的百分比是相对于自身宽度，与父元素无关。</p></li></ul><p>优点：</p><ul><li>宽度自适应，在不同的分辨率下都能达到适配</li></ul><p>缺点：</p><ul><li>百分比的值不好计算</li><li>需要确定父级的大小，因为要根据父级的大小进行计算</li><li>各个属性中如果使用百分比，相对父元素的属性并不是唯一的</li><li>高度不好设置，一般需要固定高度</li></ul><h3 id="1-6-ex"><a href="#1-6-ex" class="headerlink" title="1.6 ex"></a>1.6 ex</h3><p>ex也是相对长度单位。相对于字符“x”的高度，通常为给定字体的“x”的高度（也被称为基线高度）。当无法确定”x”的高度时，取一个em的一半。ex在实际中常用于微调</p><h3 id="1-7-ch"><a href="#1-7-ch" class="headerlink" title="1.7 ch"></a>1.7 ch</h3><p>ch与ex类似，被定义为数字0的宽度。当无法确定数字0宽度时，取em值的一半作为ch值。ch在实际中主要用于盲文排版。</p><h2 id="00x2-绝对长度高度"><a href="#00x2-绝对长度高度" class="headerlink" title="00x2 绝对长度高度"></a>00x2 绝对长度高度</h2><h3 id="2-1-pt"><a href="#2-1-pt" class="headerlink" title="2.1 pt"></a>2.1 pt</h3><p>p（point）等于1/71英寸，是一个物理长度单位。</p><p>pt = 1/72(英寸)，pt = px * dpi / 72。</p><p>dpi指分辨率，指每英寸包含点的数量。</p><h3 id="2-2-in"><a href="#2-2-in" class="headerlink" title="2.2 in"></a>2.2 in</h3><p>in（英寸），绝对单位。</p><h3 id="2-3-cm-mm-q"><a href="#2-3-cm-mm-q" class="headerlink" title="2.3 cm/mm/q"></a>2.3 cm/mm/q</h3><p>这三者都是绝对单位，cm指厘米，mm指毫米，q指1/4毫米。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;CSS中有很多长度单位，本文主要对CSS常见的长度单位进行总结。主要分为两类，一类是相对长度单位：px/em/rem/vm/vh/%/百分号/ex/ch；另一类是pt/in/cm/mm/q&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>关于npm install --save和npm install --save-dev的总结</title>
    <link href="http://yoursite.com/2019/04/01/%E5%85%B3%E4%BA%8Enpm-install-save%E5%92%8Cnpm-install-save-dev%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/01/关于npm-install-save和npm-install-save-dev的总结/</id>
    <published>2019-04-01T12:44:25.000Z</published>
    <updated>2019-08-09T04:22:20.335Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/01/关于npm-install-save和npm-install-save-dev的总结/npm.PNG" alt="npm"><br><a id="more"></a></p><h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp; npm是JavaScript中的包管理工具，能解决NodeJS代码部署上的很多问题。通过npm安装的包在package.json文件下找到。经常进行前端开发的同学们应该可以发现，经过npm安装的包有的在devDependencies中，有的在dependencies中，这两者有什么区别呢？本文结合npm的安装命令来说明devDependencies和dependencies的区别。</p><h2 id="00x1-npm-install-–save和npm-install-–save-dev"><a href="#00x1-npm-install-–save和npm-install-–save-dev" class="headerlink" title="00x1 npm install –save和npm install –save-dev"></a>00x1 npm install –save和npm install –save-dev</h2><h3 id="1-1-npm-install-–save命令"><a href="#1-1-npm-install-–save命令" class="headerlink" title="1.1 npm install –save命令"></a>1.1 npm install –save命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install --save </div><div class="line"></div><div class="line">npm install -S</div></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp; 上面两条命令是等价的，都是在本地进行安装。执行以上命令后：</p><ol><li><p>模块被安装到本地项目的中node_modules目录下。如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</p></li><li><p>模块依赖被写进dependencies 节点。</p></li><li><p>如果删除node_modules目录，使用npm install 初始化项目时，会将模块下载到项目目录（node_modules）下。</p></li><li><p>运行npm install –production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</p></li><li><p>可以通过 require() 来引入本地安装的包。</p></li></ol><h3 id="1-2-dependencies"><a href="#1-2-dependencies" class="headerlink" title="1.2 dependencies"></a>1.2 dependencies</h3><p>&emsp;&emsp;&emsp;&emsp; dependencies是线上环境需要使用的依赖，只要线上环境要用用到这个依赖 ，这个依赖就必须使用上面两条命令安装到dependencies中。像 express 这些模块是项目运行必备的，应该安装在 dependencies 节点下。</p><h2 id="00x2-dependencies和devDependencies"><a href="#00x2-dependencies和devDependencies" class="headerlink" title="00x2 dependencies和devDependencies"></a>00x2 dependencies和devDependencies</h2><h3 id="2-1-npm-install-–save-dev"><a href="#2-1-npm-install-–save-dev" class="headerlink" title="2.1 npm install –save-dev"></a>2.1 npm install –save-dev</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev</div><div class="line">npm install -D</div></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp; 上面两条命令是等价的，也是在本地进行安装。执行以上命令之后：</p><ol><li><p>模块安装到项目node_modules目录下。</p></li><li><p>模块依赖被写入devDependencies 节点。</p></li><li><p>如果删除node_modules目录，使用npm install 初始化项目时，会将模块下载到项目目录（node_modules）下。</p></li><li><p>运行npm install –production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</p></li><li><p>可以通过 require() 来引入本地安装的包。</p></li></ol><h3 id="2-2-devDependencies"><a href="#2-2-devDependencies" class="headerlink" title="2.2 devDependencies"></a>2.2 devDependencies</h3><p>&emsp;&emsp;&emsp;devDependencies是开发中使用的依赖，区别于实际 的依赖。也就是说，<strong>在线上状态不需要使用的状态，就是开发状态</strong>。npm将其单独拆分出来，是为了减少 node_modules目录的大小以及npm install花费的时间。这是因为npm的 依赖是嵌套的，虽然在package.json中只有几个依赖，但实际上它又扩散到N个，而N个又被扩散到N平方个。如果能尽量减少不使用的依赖，那么就能节省线上机器 的硬盘资源，也可以节省部署上线的时间。</p><p>&emsp;&emsp;在实际开发中，大概有下面几类可以归为开发依赖。</p><ol><li>构建工具</li></ol><p>&emsp;&emsp;&emsp; 目前前端比较热门的构建工具是webpack，gulp，grunt等。这些构建工具会生成生产环境的代码，项目打包上线之后就直接使用压缩过的代码。这类构建工具是属于开发依赖的。</p><p>&emsp; &emsp;像 webpack 还分为代码方式使用（ <code>webpack</code>）和命令行方式使用 ( <code>webpack-cli</code>)，这些都是开发依赖。另外它们可能还会提供一些内置的常用插件，如 <code>xxx-webpack-plugin</code>，这些也都算开发依赖。</p><ol><li>预处理器</li></ol><p>&emsp;&emsp;这里的预处理器指的是对源代码进行一定的处理，生成最终代码的工具。比较典型的有 CSS 中的 less, stylus, sass, scss 等等，以及 JS 中的 coffee-script, babel 等等。</p><p>&emsp;&emsp;它们的原理都是一致的。以 babel 为例，常用的有两种使用方式。其一是内嵌在 webpack 或者 rollup 等构件工具中，一般以 loader 或者 plugin 的形式出现，例如 <code>babel-loader</code>。其二是单独使用（小项目较多），例如 <code>babel-cli</code>。babel 还额外有自己的插件体系，例如 <code>xxx-babel-plugin</code>。类似地，less 也有与之对应的 <code>less-loader</code> 和 <code>lessc</code>。这些都算作开发依赖。</p><ol><li>测试工具</li></ol><p>&emsp;&emsp;测试工具也属于“线上状态不需要使用的依赖”，因此也归入开发依赖。常用的如 <code>chai</code>, <code>e2e</code>, <code>karma</code>, <code>coveralls</code> 等等都在此列。</p><ol><li>开发才用的依赖包</li></ol><p>&emsp;&emsp;开发时需要使用的，而实际上线时要么是已经打包成最终代码，要么就是不需要使用了。比如 <code>webpack-dev-server</code> 支持开发热加载，线上是不用的； <code>babel-register</code> 因为性能原因也不能用在线上。压缩css、js的模块，在项目部署之后也不再使用。其他还可能和具体业务相关，需要开发者自己识别。</p><p>&emsp;&emsp;如果想达成刚才说的缩减安装包的目的，可以使用命令 <code>npm i--production</code> 忽略开发依赖，只安装依赖，这通常在线上机器（或者 QA 环境）上使用。</p><h2 id="00x3-npm-install和npm-install-g"><a href="#00x3-npm-install和npm-install-g" class="headerlink" title="00x3 npm install和npm install -g"></a>00x3 npm install和npm install -g</h2><h3 id="3-1-npm-install"><a href="#3-1-npm-install" class="headerlink" title="3.1 npm install"></a>3.1 npm install</h3><p>&emsp;&emsp;npm也可以用于在本地安装模块，执行这条命令：</p><ol><li><p>模块安装到项目node_modules目录下。</p></li><li><p>模块依赖不会写入devDependencies或dependencies 节点。</p></li><li><p>如果删除node_modules目录，使用npm install 初始化项目时，运行 npm install 初始化项目时不会下载模块。</p></li></ol><h3 id="3-2-npm-install-g"><a href="#3-2-npm-install-g" class="headerlink" title="3.2 npm install -g"></a>3.2 npm install -g</h3><p>&emsp;&emsp;npm install -g命令用于在全局安装模块，执行命令之后：</p><ol><li><p>模块安装到全局，不会在项目node_modules目录中保存模块包。</p></li><li><p>模块依赖不会写入devDependencies或dependencies 节点。</p></li><li><p>如果删除node_modules目录，使用npm install 初始化项目时，运行 npm install 初始化项目时不会下载模块。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/04/01/关于npm-install-save和npm-install-save-dev的总结/npm.PNG&quot; alt=&quot;npm&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="Nodejs" scheme="http://yoursite.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>React和Vue中父子组件间的通信总结</title>
    <link href="http://yoursite.com/2019/04/01/React%E5%92%8CVue%E4%B8%AD%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/01/React和Vue中父子组件间的通信总结/</id>
    <published>2019-04-01T08:06:46.000Z</published>
    <updated>2019-08-09T04:20:25.135Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/04/01/React和Vue中父子组件间的通信总结/REACT_VUE.PNG" alt="REACT_VUE"><br><a id="more"></a></p><h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;React的一个特性是组件化，组件化的目的是为了能够进行复用，减少代码的冗余。在项目中使用复杂组件不可避免得要涉及到父子组件间的通信。<br>&emsp;&emsp;本文对目前前端比较流行的框架Vue和React中父子组件间通信的方法做一个总结。关于组件的声明与使用本文中不做详细说明。</p><h2 id="0x01-Vue"><a href="#0x01-Vue" class="headerlink" title="0x01 Vue"></a>0x01 Vue</h2><p>&emsp;&emsp;这里父组件是Father，子组件是Child。</p><h3 id="1-1父组件向子组件通信"><a href="#1-1父组件向子组件通信" class="headerlink" title="1.1父组件向子组件通信"></a>1.1父组件向子组件通信</h3><p>&emsp;&emsp;将父组件的值作为一个属性，绑定给子组件，在子组件中通过props进行接收。</p><h4 id="1-1-1-Father-vue"><a href="#1-1-1-Father-vue" class="headerlink" title="1.1.1 Father.vue"></a>1.1.1 Father.vue</h4><p>&emsp;&emsp;在父组件中的子组件标签中使用v-bind指令绑定属性C，传入的”c”是父组件中的一个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;child v-bind:C=&quot;c&quot;&gt;&lt;/child&gt;//这里的&quot;c&quot;是父组件中的一个值。</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script&gt;</div><div class="line">import HomeChild from &apos;@/components/Child&apos;</div><div class="line">export default &#123;</div><div class="line">  name: &apos;father&apos;,</div><div class="line">  components: &#123;</div><div class="line">    child</div><div class="line">  &#125;,</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      c:[1,2,3]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><h4 id="1-1-2-Child-vue"><a href="#1-1-2-Child-vue" class="headerlink" title="1.1.2 Child.vue"></a>1.1.2 Child.vue</h4><p>&emsp;&emsp;在Child.vue中创建props，用于接收父组件传递的值。C被限定为Array格式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">    name: &apos;child&apos;,</div><div class="line">    props: &#123;</div><div class="line">        C: Array//这里</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>&emsp;&emsp;props接收的方式有3种：</p><ol><li>props:[‘name’]</li><li>props:{name:{type:String}}</li><li>props:{name:String}</li></ol><h3 id="1-2父组件向子组件通信"><a href="#1-2父组件向子组件通信" class="headerlink" title="1.2父组件向子组件通信"></a>1.2父组件向子组件通信</h3><p>&emsp;&emsp;在事件的函数中使用$emit来触发一个自定义事件，并传递一个参数，这个参数就是子组件要传递给父组件的值。</p><h4 id="1-2-1-Child-vue"><a href="#1-2-1-Child-vue" class="headerlink" title="1.2.1 Child.vue"></a>1.2.1 Child.vue</h4><p>&emsp;&emsp;使用$emit来触发一个名为“ListenChild”的自定义事件，并为这个自定义事件传递一个字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;button v-on:click=&quot;ChildClick&quot;&gt;点击向父组件传值&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">    name: &apos;child&apos;,</div><div class="line">    methods: &#123;</div><div class="line">        ChildClick: function () &#123;</div><div class="line">            this.$emit(&quot;ListenChild&quot;,&quot;I am child.vue&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p><h4 id="1-2-2-Father-vue"><a href="#1-2-2-Father-vue" class="headerlink" title="1.2.2 Father.vue"></a>1.2.2 Father.vue</h4><p>&emsp;&emsp;在父组件中的child标签中监听自定义事件（ListenChild事件），监听子组件是否通过该事件传递了值，并添加一个响应该事件的方法ShowChild。ShowChild中的方法接受一个参数data ，data就是子组件传递过来的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">    &lt;child v-on:ListenChild=&quot;ShowChild&quot;&gt;&lt;/child&gt;//</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import HomeChild from &apos;@/components/Child&apos;</div><div class="line">export default &#123;</div><div class="line">    name: &apos;Father&apos;,</div><div class="line">    components: &#123;</div><div class="line">        Child</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    methods: &#123;</div><div class="line">        ShowChild: function (data) &#123;</div><div class="line">            this.data = data;</div><div class="line">            console.log(&quot;data:&quot; + data)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><h2 id="0x02-React"><a href="#0x02-React" class="headerlink" title="0x02 React"></a>0x02 React</h2><p>&emsp;&emsp;这里父组件是Father，子组件是Child。</p><h3 id="2-1父组件向子组件通信"><a href="#2-1父组件向子组件通信" class="headerlink" title="2.1父组件向子组件通信"></a>2.1父组件向子组件通信</h3><p>&emsp;&emsp;父组件可以向子组件通过传 props 的方式，向子组件进行通信。</p><h4 id="2-1-1-父组件-Father-js"><a href="#2-1-1-父组件-Father-js" class="headerlink" title="2.1.1 父组件 Father.js"></a>2.1.1 父组件 Father.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//父组件通过属性向子组件传递参数</div><div class="line">    return (</div><div class="line">        this.state.list.map((item, index) =&gt; &#123;</div><div class="line">            return (</div><div class="line">              //父组件通过属性向子组件传递参数</div><div class="line">              &lt;Father</div><div class="line">                key=&#123;index&#125;</div><div class="line">                content=&#123;item&#125;</div><div class="line">                index=&#123;index&#125; /&gt;</div><div class="line">            );</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">    )</div></pre></td></tr></table></figure><p>&emsp;&emsp;父组件通过属性向子组件传递参数，代码中的key，content，index都是属性，用来传递父组件中的index，item值。</p><h4 id="2-1-2-Child-js"><a href="#2-1-2-Child-js" class="headerlink" title="2.1.2 Child.js"></a>2.1.2 Child.js</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const &#123; content &#125; = this.props;//es6的结构复制</div><div class="line">return (</div><div class="line">    //通过this.props.content接收父组件传来的参数</div><div class="line">    &lt;div onClick=&#123;this.handleDelete&#125;&gt;</div><div class="line">        &#123;this.props.content&#125;</div><div class="line">        </div><div class="line">    &lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure><p>&emsp;&emsp;子组件中定义content来复制this.props，通过this.props.content接收父组件传来的属性值。</p><h3 id="2-2-子组件向父组件通信"><a href="#2-2-子组件向父组件通信" class="headerlink" title="2.2 子组件向父组件通信"></a>2.2 子组件向父组件通信</h3><p>&emsp;&emsp;子组件和父组件通信，通过props调用父组件传递过来的方法来进行通信。</p><h4 id="2-2-1-父组件-Father-js"><a href="#2-2-1-父组件-Father-js" class="headerlink" title="2.2.1 父组件 Father.js"></a>2.2.1 父组件 Father.js</h4><p>&emsp;&emsp;在父组件中定义能够实现删除功能的handleDelete()函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">handleDelete(index)  &#123;</div><div class="line">    const list = [...this.state.list];</div><div class="line">    list.splice(index, 1);</div><div class="line">    this.setState(&#123;</div><div class="line">      list</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;父组件使用delete向子组件传递handleDelete方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">this.state.list.map((item, index) =&gt; &#123;</div><div class="line">    return (</div><div class="line">      //父组件接收子组件传递过来的方法</div><div class="line">      &lt;Father</div><div class="line">        delete=&#123;this.handleDelete&#125; /&gt;//定义delete向子组件传递handleDelete方法。</div><div class="line">    );</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h4 id="2-2-2-Child-js"><a href="#2-2-2-Child-js" class="headerlink" title="2.2.2 Child.js"></a>2.2.2 Child.js</h4><p>&emsp;&emsp;在子组件中定义handleDelete1()方法。定义delete, index来复制this.props。通过delete(index)调用从父组件中传递过来的handleDelete方法，实现删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">childHandleDelete() &#123;</div><div class="line">    const &#123; delete, index&#125; = this.props;</div><div class="line">    //子组件和父组件通信，子组件要调用父组件传递过来的方法，</div><div class="line">    delete(index);</div><div class="line">    // this.props.delete(this.props.index);</div><div class="line">    // this.props.delete(this.props.index);//将this.props.index传递给父组件中的delete方法。</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;而要在子组件中固定位置中实现删除功能。就要调用handleDelete1()获取父组件传递过来的方法和index，进行删除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">return (</div><div class="line">    //通过onClick调用this.childHandleDelete实现删除功能。 </div><div class="line">    &lt;div onClick=&#123;this.childHandleDelete&#125;&gt;</div><div class="line">        &#123;this.props.content&#125;</div><div class="line">        </div><div class="line">    &lt;/div&gt;</div><div class="line">)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2019/04/01/React和Vue中父子组件间的通信总结/REACT_VUE.PNG&quot; alt=&quot;REACT_VUE&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="父子组件通信" scheme="http://yoursite.com/tags/%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>论文分享：A Proposed Visualization for Vulnerability Scan Data</title>
    <link href="http://yoursite.com/2019/01/02/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB%EF%BC%9AA-Proposed-Visualization-for-Vulnerability-Scan-Data/"/>
    <id>http://yoursite.com/2019/01/02/论文分享：A-Proposed-Visualization-for-Vulnerability-Scan-Data/</id>
    <published>2019-01-02T07:22:01.000Z</published>
    <updated>2019-08-09T06:52:11.204Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Title：</strong> A Proposed Visualization for Vulnerability Scan Data（针对漏洞扫描数据的建议可视化）<br><strong>原文作者：</strong> S Watson<br><strong>会议：</strong> Thirteenth Symposium on Usable Privacy and Security ({SOUPS} 2017)<br><strong>日期：</strong> 2017/6/20<br><strong>原文地址：</strong> <a href="https://www.usenix.org/system/files/conference/soups2017/wsiw2017-watson.pdf" target="_blank" rel="external">https://www.usenix.org/system/files/conference/soups2017/wsiw2017-watson.pdf</a></p><h2 id="0x01-论文背景"><a href="#0x01-论文背景" class="headerlink" title="0x01 论文背景"></a>0x01 论文背景</h2><p>&emsp;&emsp;基于通信和保护需求将系统分开的网络安全区域可以最大限度地降低安全风险，同时即使面对故障和安全事件，也可以继续保持信息流。<br>&emsp;&emsp;通过基于角色的组织访问控制将风险和风险限制在每个区域，允许监控网络的人员更快地识别针对位于关键区域中的关键资产的可疑活动，并允许区域或子区域被锁定在违规事件或需要收容的事件。<br><a id="more"></a><br>&emsp;&emsp;基于区域的体系结构，其中网络被布置成六个逻辑和/或物理上分离的区域。 根据需要，也可以在每个区域内配置子区域。对每个区域的访问由周边安全设备管理，例如防火墙。    </p><p><img src="/2019/01/02/论文分享：A-Proposed-Visualization-for-Vulnerability-Scan-Data/./image1.PNG" alt="image"></p><p>&emsp;&emsp;不受信任区域包含不属于该组织的所有主机，包括Internet服务提供商。来自此区域的流量流入半可信（DMZ）区域，其中必须在外部公开的系统位于该区域中。这将包括组织的外部Web服务器。</p><p>&emsp;&emsp;受信任区域将包含所有内部公开的系统，例如员工桌面和笔记本电脑以及组织内部网。流量从它流入半透明区域并流向不可信区域，以便允许访问互联网的所有资源。</p><p>&emsp;&emsp;高风险的关键任务系统（例如保存受限组织数据的数据库服务器）将位于受限区域中。来自此区域的流量将流入受信任区域。</p><p>&emsp;&emsp;管理区域将包含管理组织的网络和安全性的所有系统。来自此区域的流量流入半可信，受信任和受限制的区域。</p><p>&emsp;&emsp;最后，审计区域将包含收集审计组织所需的日志和其他数据的所有系统。由于此数据高度敏感，因此流量仅从半信任，受信任和受限制的区域流入。</p><h2 id="0x02-论文内容"><a href="#0x02-论文内容" class="headerlink" title="0x02 论文内容"></a>0x02 论文内容</h2><p>&emsp;&emsp;作者提出了一种基于安全区域的安全可视化建议，在基于区域的网络防御之上覆盖漏洞扫描数据的可视化，在实际网络布局的上下文中提供漏洞数据。</p><h3 id="2-1-论文目标"><a href="#2-1-论文目标" class="headerlink" title="2.1 论文目标"></a>2.1 论文目标</h3><p>&emsp;&emsp;使用现有工具和技术、简单可视化方法来整合所需的上下文信息以帮助用户做出关键安全决策。</p><h3 id="2-2-数据与工具"><a href="#2-2-数据与工具" class="headerlink" title="2.2 数据与工具"></a>2.2 数据与工具</h3><p>&emsp;&emsp;使用了Rapid7 Nexpose扫描的同一子网中的35系统中的11,836个个体漏洞生成的扫描报告。    </p><h3 id="2-3-可视化输入"><a href="#2-3-可视化输入" class="headerlink" title="2.3 可视化输入"></a>2.3 可视化输入</h3><p>&emsp;&emsp;用于图节点的文件，每个图节点对应于网络上的唯一设备，其中每个节点的IP地址被指定为节点id。</p><p>&emsp;&emsp;边缘的文件，表示与所表示的周边设备的所有连接，再次在文件中通过IP地址指定为从/到列。</p><p>&emsp;&emsp;带有原始漏洞数据的文件。</p><h3 id="2-4-节点与边界"><a href="#2-4-节点与边界" class="headerlink" title="2.4 节点与边界"></a>2.4 节点与边界</h3><ol><li>&emsp;&emsp;在图上使用标签来表示每个节点；使用给定节点的所有Nexpose严重性分数的平均值来确定其总体严重性分数，分数基于Common Vulnerability Scoring System计算。</li></ol><ul><li><p>A moderate vulnerability,（0-3.9）；只能在本地被利用，需要验证。这些漏洞几乎不会为攻击者提供受限信息，也不会提供攻击者破坏或破坏数据或导致系统中断的手段。</p></li><li><p>A severe vulnerability,（4.0-6.9）；只能被经验丰富的黑客利用，有或没有身份验证。这些漏洞将为攻击者提供对受限信息的部分访问，并可能提供攻击者破坏或破坏数据或导致系统中断的手段。</p></li></ul><ul><li>A critical vulnerability,（7.0-10.0）；只需很少甚至不需要身份验证即可轻松利用。这些漏洞将为攻击者提供对受限信息的完全访问权限，并提供攻击者可以破坏或破坏数据或导致系统中断的方法。</li></ul><ol><li><p>&emsp;&emsp;节点大小代表每个节点的整体漏洞风险，并根据为给定节点发现的严重漏洞和关键漏洞的数量计算。</p></li><li><p>&emsp;&emsp;放置在网络区域之间的线上的灰色节点表示在网络区域之间创建逻辑或物理分离的周边设备。</p></li></ol><p><img src="/2019/01/02/论文分享：A-Proposed-Visualization-for-Vulnerability-Scan-Data/./image2.PNG" alt="image"></p><h2 id="0x03-未来研究"><a href="#0x03-未来研究" class="headerlink" title="0x03 未来研究"></a>0x03 未来研究</h2><p>&emsp;&emsp;可视化在处理更大的网络和更复杂的关键性度量时进行扩展。<br>&emsp;&emsp;评估可视化在交流和沟通方面对用户做出决策所做的贡献。</p><h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>&emsp;&emsp;根据基于区域的网络防御架构，提出了一种建议的漏洞数据可视化分析方法。使用标签来表示节点，每个节点对应于实际网络中的一个设备；使用给定节点的所有Nexpose严重性分数的平均值来确定其总体严重性分数，分数基于Common Vulnerability Scoring System计算，分数在0.0到10.0之间，分成轻度（0-3.9）、严重（4.0-6.9）、关键（7.0-10.0）漏洞；节点大小代表每个节点的整体漏洞风险，并根据为给定节点发现的严重漏洞和关键漏洞的数量计算；放置在网络区域之间的线上的灰色节点表示在网络区域之间创建逻辑或物理分离的周边设备。</p><h5 id="0x05-收获"><a href="#0x05-收获" class="headerlink" title="0x05 收获"></a>0x05 收获</h5><ol><li>了解了可视化在网络基础方面的具体应用。</li><li>可视化模型与实际网络结构的结合。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Title：&lt;/strong&gt; A Proposed Visualization for Vulnerability Scan Data（针对漏洞扫描数据的建议可视化）&lt;br&gt;&lt;strong&gt;原文作者：&lt;/strong&gt; S Watson&lt;br&gt;&lt;strong&gt;会议：&lt;/strong&gt; Thirteenth Symposium on Usable Privacy and Security ({SOUPS} 2017)&lt;br&gt;&lt;strong&gt;日期：&lt;/strong&gt; 2017/6/20&lt;br&gt;&lt;strong&gt;原文地址：&lt;/strong&gt; &lt;a href=&quot;https://www.usenix.org/system/files/conference/soups2017/wsiw2017-watson.pdf&quot;&gt;https://www.usenix.org/system/files/conference/soups2017/wsiw2017-watson.pdf&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x01-论文背景&quot;&gt;&lt;a href=&quot;#0x01-论文背景&quot; class=&quot;headerlink&quot; title=&quot;0x01 论文背景&quot;&gt;&lt;/a&gt;0x01 论文背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;基于通信和保护需求将系统分开的网络安全区域可以最大限度地降低安全风险，同时即使面对故障和安全事件，也可以继续保持信息流。&lt;br&gt;&amp;emsp;&amp;emsp;通过基于角色的组织访问控制将风险和风险限制在每个区域，允许监控网络的人员更快地识别针对位于关键区域中的关键资产的可疑活动，并允许区域或子区域被锁定在违规事件或需要收容的事件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="论文" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>论文分享：CommViz-Visualization of Semantic Patterns in Large Social Communication Network</title>
    <link href="http://yoursite.com/2018/12/23/%E8%AE%BA%E6%96%87%E5%88%86%E4%BA%AB%EF%BC%9ACommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/"/>
    <id>http://yoursite.com/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/</id>
    <published>2018-12-23T08:41:51.000Z</published>
    <updated>2019-08-09T06:53:35.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Title：</strong> CommViz: Visualization of Semantic Patterns in Large Social Communication Networks（CommViz：大型社交网络中语义模式的可视化）<br><strong>原文作者：</strong> Karin Verspoor, Bahadorreza Ofoghi, Marlene Robles Granda<br><strong>期刊：</strong> Information Visualization<br><strong>日期：</strong> 2018/01/01<br><strong>原文地址：</strong> <a href="https://minerva-access.unimelb.edu.au/bitstream/handle/11343/127914/commviz-InfoVis.version-accepted.pdf?sequence=1" target="_blank" rel="external">https://minerva-access.unimelb.edu.au/bitstream/handle/11343/127914/commviz-InfoVis.version-accepted.pdf?sequence=1</a><br><strong>可视化链接：</strong> <a href="http://commviz.eng.unimelb.edu.au" target="_blank" rel="external">http://commviz.eng.unimelb.edu.au</a></p><h2 id="0x00-概览"><a href="#0x00-概览" class="headerlink" title="0x00 概览"></a>0x00 概览</h2><p>这篇文章介绍了一种信息可视化工具—CommViz，通过采用称为hive图的可视化方法来反映网络的语义结构，将其称之为语义蜂巢图。该方法有效地组织并提供对复杂的，高维度的通信数据的洞察，例如社交媒体上的电子邮件或消息。作者通过将CommViz工具的体系结构及其应用程序作为案例研究介绍给安然电子邮件语料库，演示了可视化结构如何能够调查大量消息中的模式和关系。<br><a id="more"></a><br><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/0.PNG" alt="可视化图0"></p><h2 id="0x01-提出的问题及解决、文章目标、背景"><a href="#0x01-提出的问题及解决、文章目标、背景" class="headerlink" title="0x01 提出的问题及解决、文章目标、背景"></a>0x01 提出的问题及解决、文章目标、背景</h2><h3 id="1-1-提出的问题及解决"><a href="#1-1-提出的问题及解决" class="headerlink" title="1.1 提出的问题及解决"></a>1.1 提出的问题及解决</h3><p>CommViz利用社交通信网络数据中的现有结构，例如电子邮件，即时消息或在线论坛 - 利用与每个单独消息相关联的元数据，指示发送者，接收者以及消息传输的日期和时间以及夫妻具有进一步上下文属性的结构，例如消息的推断主题内容（主题）或发送者的位置。</p><ol><li>谁在给定的时间范围内向谁发送了关于什么主题的消息？</li><li>人们在谈论什么主题以及何时讨论？</li><li>哪些用户对特定主题进行了大量沟通？这对应于连接用户主题轴及其克隆的链接。</li><li>哪个主题与最大数量的邮件相关联？这可以通过源自用户主题轴的段中的链接的密度和暗度来观察。</li><li>在哪个时段是最常见的话题？通过查看源自用户主题轴并以用户时间轴轴结束的链接，可以观察到这一点。同样，坐标空间的该区域中的链接的密度和暗度表示重要的活动。</li><li>什么时候有最多的消息活动？这可以通过沿用户时间轴轴进入段的链接的密度和暗度来观察。</li><li>在给定的时间范围内，两个用户之间发送了多少条消息？这对应于连接用户时间轴和其克隆的链接。在这些轴之间的时间段内连接两个用户的暗链接指示当时两个用户之间的大量电子邮件。考虑图3中的安然数据集的概述。</li><li>CommViz方法解决了在二维表示中在单个链接中表示单个消息的四个核心属性的概念性挑战。</li></ol><h3 id="1-2-文章目标及贡献"><a href="#1-2-文章目标及贡献" class="headerlink" title="1.2 文章目标及贡献"></a>1.2 文章目标及贡献</h3><p>设计一个可视化，公开用户（发送者 - 接收者）交互的网络结构，同时整合这些交互的上下文和时间属性。通过案例研究和用户研究证明该工具可用于阐明网络中与感兴趣的特定分析问题相对应的有意义模式，文章中论证了语义蜂巢图的使用优于替代方法可视化这些通信网络。<br>根据其属性组织消息，以便于检测与数据中的那些属性相关的有意义的模式，因此面临可视化高维多变量数据的问题。解决了在二维表示中在单个链接中表示单个消息的四个核心属性的概念性挑战。</p><h3 id="1-3-相关工作及背景"><a href="#1-3-相关工作及背景" class="headerlink" title="1.3 相关工作及背景"></a>1.3 相关工作及背景</h3><ol><li>大量节点和链接的可视化可能导致可视化中的“毛球”或“意大利面条”效应，具有大量的过度绘图，连接结构中的模式非常难以辨别。在图9中的代表性社交网络可视化中，可以观察到安全语料库中的这个问题，其将消息的人（发送者和接收者）显示为节点，并且当消息已经从一个人发送到另一个人时包括两个节点之间的链接。Hive图是作为“理性化”大型网络可视化的方法引入的，使用平行坐标图，其中轴是径向排列的，其中网络结构参数（如节点的聚类系数）用于将节点分配给轴，然后基于有序结构值（例如节点度或介于两者），将每个节点沿轴放置在可解释的坐标位置。蜂巢图在网络中的应用集中在根据网络本身的结构元素组织节点（即，定量网络结构测量）。所得到的可视化被认为是定量的，可视地可解析的和可缩放的。</li><li>已经开发了许多专门用于分析电子邮件的信息可视化系统，重点是电子邮件的元数据，包括旨在识别组织内的通信结构，线程结构或时间模式的工作。开发了很少的可视化系统考虑消息的上下文或内容。会话地图是一个早期系统，可视化Usenet的主题结构，提供社交网络，讨论主题和词汇关系的三个独立但相互连接的可视化。</li><li>主题模型通过应用概率图形模型得出，该概率图形模型推断在文档集合中聚集在一起的单词集合，以便发现代表集合中的文档的主题或主题。由于主题模型是对单词的概率分布，因此人们难以检查和验证。因此，已经努力促进主题的组织和可视化。这项工作主要侧重于主题的语料库级分析，包括TERMITE中主题模型中结构和术语关系的可视化，目的是支持对推断的主题质量的评估。其他工作，例如TopicMaps和TopicNets，已经解决了整个集合中主题和文档的连通性问题。许多其他工具，如Jigsaw和WordTree，也旨在揭示整个文档集文本中的模式，尽管它们不直接使用主题建模。</li></ol><h2 id="0x02-数据集及模型"><a href="#0x02-数据集及模型" class="headerlink" title="0x02 数据集及模型"></a>0x02 数据集及模型</h2><h3 id="2-1-数据集及处理"><a href="#2-1-数据集及处理" class="headerlink" title="2.1 数据集及处理"></a>2.1 数据集及处理</h3><p>Enron email corpus（企业用户多年来发送的电子邮件）</p><p>该数据集最初包含属于158名安然员工的619,446封电子邮件，每位用户平均有757封邮件。 大多数信息都是由安然公司的高级管理人员发送的。数据集中的每个电子邮件对象都包含发件人和收件人的电子邮件地址，邮件正文，日期，时间和主题。<br>经过处理之后，最终数据集包括89个人和56,210封电子邮件。</p><p>产生了四个核心维度：{sender, recipient, time, context}四个核心维度<br>为了捕获此数据集中的上下文，我们应用称为主题建模的自然语言处理技术来确定文档集合的主题结构。</p><p>在对安然消息运行LDA之前，对文本应用了许多预处理步骤，包括标记化。令牌的小写，词形还原（使用斯坦福核心NLP工具），使用标准停用词列表删除停用词，以及删除非字母令牌（因为在主题建模的上下文中数字可能不具备信息）。电子邮件内容也经过预处理，以删除一些不相关的文本。具体而言，在转发电子邮件的情况下，剥离了电子邮件正文中包含的嵌入标题信息。</p><h3 id="2-2-语料库模型"><a href="#2-2-语料库模型" class="headerlink" title="2.2 语料库模型"></a>2.2 语料库模型</h3><p>应用主题建模的自然语言处理技术来确定文档的主题结构集合，并将每个电子邮件消息的内容与这些主题中的一个或多个相关联。使用Latent Dirichlet Allocation（LDA）方法，标准主题建模技术。</p><p>LDA中的主题由整个语料库词汇表中的术语列表上的不同分布表示。为了分析安然语料库并找到每封电子邮件消息的主题分布，使用了MAchine Learning for LanguagE Toolkit。</p><p>对于安全电子邮件的主题模型，LDA需要目标主题的数量作为其输入。实验中将主题总数设置为20，以用作可视化的初始目标集，而无需仔细调查最佳主题数。下表提供了MALLET在安然语料库中找到的主题（主题编号19）的示例，其中列出了该主题中概率最高的前10个术语。从该列表中，可以直观地确定该主题与能源定价有关。 alpha度量和令牌总数是主题的概率（在所有20个主题中总和为1.0）和语料库中与主题最相关的令牌总数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;topic id=’19’ alpha=’0.0232’</div><div class="line">totalTokens=’146261’&gt;</div><div class="line">    &lt;word rank=’1’&gt;power&lt;/word&gt;</div><div class="line">    &lt;word rank=’2’&gt;gas&lt;/word&gt;</div><div class="line">    &lt;word rank=’3’&gt;market&lt;/word&gt;</div><div class="line">    &lt;word rank=’4’&gt;price&lt;/word&gt;</div><div class="line">    &lt;word rank=’5’&gt;plant&lt;/word&gt;</div><div class="line">    &lt;word rank=’6’&gt;energy&lt;/word&gt;</div><div class="line">    &lt;word rank=’7’&gt;year&lt;/word&gt;</div><div class="line">    &lt;word rank=’8’&gt;project&lt;/word&gt;</div><div class="line">    &lt;word rank=’9’&gt;cost&lt;/word&gt;</div><div class="line">    &lt;word rank=’10’&gt;include&lt;/word&gt;</div><div class="line">&lt;/topic&gt;</div></pre></td></tr></table></figure><p>在确定主题后，作者通过计算与每个主题相关联的电子邮件中的单词比例，将每封电子邮件映射到其最可能的主题。</p><h3 id="2-3-可视化方案"><a href="#2-3-可视化方案" class="headerlink" title="2.3 可视化方案"></a>2.3 可视化方案</h3><p>首先，就用户（在数据集中表示为发件人或收件人的个人）而言，我们已经开发了一个“可疑列表”，用于集中分析特定的个人子集。可疑列表中的每个个体都表示为可视化中的单个用户。其他安然内部用户（即，具有电子邮件地址@enron.com的用户）被组合在一起成为单个节点（节点1）。所有外部用户（非安然电子邮件地址）也组合在一起，形成一个节点（节点0）。</p><p>其次，如果电子邮件有多个收件人（例如，在：或：cc：列表中），我们会将该电子邮件视为连接发件人和每个收件人的多条（相同）个人邮件。</p><p>CommViz的核心可视化表示由两个主轴组成，每个主轴根据焦点问题，上下文或时间的一个方面表示数据集中的个体。对于焦点安全数据集，我们将上下文视为消息主题，由主题建模确定。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/1.PNG" alt="可视化图1"></p><p>一个主轴线性划分为表示主题的段（每个线性段一个主题）。每个段包含一组表示电子邮件消息发送者的节点。对于安然数据集，每个段包含许多节点，这些节点等于安全数据集（或子样本）中的用户总数，并且轴具有与主题一样多的段。此轴上的每个节点代表可能已在给定主题上发送电子邮件的给定发件人。该轴称为用户主题轴。</p><p>第二主轴根据时间线性分段，因此在通信语料库中具有特定时间帧的段。发送消息的年份是沿此轴的安全数据集的初始分段结构。段中的每个节点表示在给定时间范围内可能的电子邮件收件人。我们称之为轴是用户时间轴的轴。<br>连接CommViz中节点的链接（弧）表示特定时间范围内特定主题的通信。图1描述了应用于安然数据的可视化的基本结构，两个用户之间有一个示例弧。弧表示两个用户之间关于时间帧2中的主题2的电子邮件通信（表示一个或多个消息）。</p><p>该可视化结构的一个重要特征是沿一个轴的信息通过边缘的连通性传递到另一个轴上的节点。也就是说，沿时间轴的时间信息不仅适用于该轴上的节点。 ，它还会将主题和在该时间段内链接在另一个轴上的各个用户相关联。 这是因为单个链接代表发送者，接收者，时间范围，上下文的四倍。 此属性表示CommViz以直观有效的方式表示数据的四个维度。<br>为了仅沿一个轴可视化用户交互（即，当不考虑另一个轴中的信息时），可以克隆蜂巢图中的每个轴。 下图显示了在使用克隆时我们为安然语料库采用的相同结构。 使用这种结构，可以专门理解在给定时间或关于给定主题的两个用户之间的交互。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/2.PNG" alt="可视化图2"></p><h3 id="2-4-评估可视化"><a href="#2-4-评估可视化" class="headerlink" title="2.4 评估可视化"></a>2.4 评估可视化</h3><p>使用对照实验来比较不同的技术/工具或相同的技术与不同的设置或样式是最常见的可视化评估类型。</p><p>为CommViz采用的可视化评估类型是一个面向分析的任务，其中相同数据的两个不同可视化在支持用户正确回答数据驱动问题方面的有效性方面相互比较。将CommViz的有效性与Cytoscape中实现的竞争对手可视化方法的有效性进行了比较。</p><p>首先从与安然电子邮件语料库相关的每个可视化（CommViz和Cytoscape）中捕获了六个屏幕截图。 每个屏幕截图提供了回答特定类型问题所需的相同数据子集的视图。所有问题/图像在补充文件1和2中详述。问题涵盖数据集中的各种主题和日期信息。屏幕截图附有说明，以帮助用户理解问题的上下文，以及多项选择问题本身。 机械土耳其工人被要求从四个选项之一中选择一个答案，根据对数据的标准分析查询得知正确的答案。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/3.PNG" alt="可视化图3"><br>  用户以三种不同的随机确定的顺序之一回答了12个问题，如下表所示。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/4.PNG" alt="可视化图4"></p><p>将12个问题的三个序列中的每一个与相应的描述和屏幕截图一起放入单个人类智能任务中（因此总共有三个HIT）。 每个HIT中的问题一次出现在屏幕上（带有问题编号，描述，可视化屏幕截图，问题和四个可能的答案选项），一旦他们回答，用户就无法返回上一个问题 它移动到下一个。<br>每个HIT分别提交给Mechanical Turk，由50名不同的机械土耳其工人回答。<br>我们为员工实施了多项资格标准，包括：<br>允许工人只在每个HIT中回答一次问题。<br>如果他们已经回答了另一个HIT的问题，那么工人就不被允许带任何其他HIT。<br>工人必须拥有至少10,000个经批准的HIT。<br>对于他们之前为Mechanical Turk的任何请求者完成的HIT，工人必须至少拥有98％的批准率。</p><p>可视化技术的有效性分析的第一个指标是准确性。每种可视化技术的总体准确度计算为参与给定HIT的50名个体工人的平均值。为了确定两个可视化的准确度值之间的差异是否具有统计显着性，文章在与每个HIT和整体相关的准确度值之间进行了配对t检验。</p><p>只考虑不同工作人员在回答每种可视化技术的数据驱动问题时的一致性。这可以解释为意味着具有Cytoscape可视化的用户之间的响应更加一致，但是这些响应通常是不正确的，即，用户被可视化以一致的方式误导。</p><p>首先，针对每个可视化计算平均Fleiss Kappa，并针对每个问题，与金标准答案进行比较。这侧重于为每个可视化的每个单独问题给出的答案。在这种情况下，存在六个一致值，每个问题一个与相同问题的黄金标准答案相比（即，两个主题和每个HIT的50个响应）。然后计算HIT的这六个协议值的平均值。<br>下图为使用Cytoscape和CommViz获得的结果的准确性和评估者间协议分析。 每个准确度值前面的y符号表示该值与基于标准95％置信水平的配对t检验的竞争可视化的准确度之间的统计上显着差异。 在所有HIT和整体中，CommViz用户在测试问题上获得的统计上显着高于Cytoscape用户。<br><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/5.PNG" alt="可视化图5"><br>其次，对于每个可视化，以及每个工人，与黄金标准答案相比，计算了平均Fleiss Kappa。这个kappa值强调用户的六个答案的平均一致性与六个问题的六个金标准答案，这六个问题伴随着每个可视化技术的屏幕截图。这个kappa值强调用户的六个答案的平均一致性与六个问题的六个金标准答案，这六个问题伴随着每个可视化技术的屏幕截图。为此，计算了两组六个答案之间的50个一致值（即，六个主题和两个评价者）。然后计算每个HIT的这50个协议值的平均值。下图给出了这两个一致性分析的结果。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/6.PNG" alt="可视化图6"></p><p>进一步分析了单个问题级别的结果，以确定两种可视化技术中的每一种都表现出卓越的性能;换句话说，与另一个相比，使用一种可视化技术的用户可以更有效地回答什么类型的问题。每个可视化的准确性首先计算机械土耳其工人为每个问题给出的答案。与技术水平分析类似，每个问题的黄金标准答案用于计算准确性。<br>结果表明CommViz使用户能够更有效地理解底层数据的信息内容。同时，使用CommViz可视化时，用户似乎更确定答案;与基于Cytoscape的可视化相比，用户响应的一致性更高。我们已经证明CommViz比标准的强制定向布局通信可视化具有重要的优势，特别是涉及上下文/主题之间或跨时间的比较分析的问题类型。<br><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/7.PNG" alt="可视化图7"></p><p>最后，展示了由150名机械土耳其工人选择的答案选项的分布，用（a）CommViz和（b）Cytoscape回答六个数据驱动的问题。 用数字标注的条形对应于问题的“正确”答案。</p><p><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/8.PNG" alt="可视化图8"></p><h2 id="0x03-创新性"><a href="#0x03-创新性" class="headerlink" title="0x03 创新性"></a>0x03 创新性</h2><ul><li>社交网络特征与基础数据的语义属性在单个可视化中的集成。</li><li>最初为生物网络可视化开发的称为hive图的可视化方法的改编，以实现通信网络结构的清晰表达。这种适应的新颖贡献是根据数据语义而不是网络结构的定量特征来绘制数据。因此，称之为适应语义蜂巢图。</li><li>在消息的sender，recipient，time元数据之外添加额外的信息性维度，特别是消息的上下文，也可以用于反映消息的内容。因此，可视化捕获社交网络结构，包括消息方向性以及消息特定的上下文。</li><li>在单个边缘中表示消息的所有四个属性，同时还支持在大型消息集合中探索涉及属性的不同子集的模式。该方法从语义蜂巢图扩展到语义坐标，其中轴被构造为同时捕获两个属性。</li><li>CommViz具有灵活，性此可视化方法不仅适用于邮件数据，还适用于即时消息或在线论坛 - 利用与每个单独消息相关联的元数据，指示发送者，接收者以及消息传输的日期和时间以及具有进一步上下文属性的结构，例如消息的推断主题内容（主题）或发送者的位置。文中通过将其应用于小型Twitter样本，并将其应用于来自VAST 2015 Mini-Challenge 2的“Dinofun World”访客通信数据。证明了其应用场景的灵活性。两种调整都可以在盲目的情况下查看*。<br><img src="/2018/12/23/论文分享：CommViz-Visualization-of-Semantic-Patterns-in-Large-Social-Communication-Network/9.PNG" alt="可视化图9"></li><li>可视化的评估方面，做了大量丰富的对比实验。</li></ul><h2 id="0x04-未来工作"><a href="#0x04-未来工作" class="headerlink" title="0x04 未来工作"></a>0x04 未来工作</h2><ul><li>可以增强界面和可视化的许多方面，以向可视化的用户提供更直接的反馈。显然需要对当前安然应用程序进行改进，以提高分析师理解用户主题轴上的主题对应的能力。进一步建立在数据的语义特征上的一种增强是将用户分组到组织结构中，例如，基于团队，部门等，并根据用户级别，聚合这些组之间，之间和之内的消息流量。</li><li>可以改进用作主题组织消息的基础的主题建模算法。McCallum 为此提出了作者 -收件人-主题（ART）模型，并使用该模型证明了分类任务的改进。该模型可以用于改进主题建模本身，并且可以被利用来以连贯的方式组织轴段内的用户节点，即，就其角色而不是当前的任意排序。</li><li>允许分析师根据感兴趣的特定问题从基础数据的各种视图中进行选择。然后根据该选择生成主要和次要组织维度;Web服务将相应地生成节点和边缘及其分组。可视化足够灵活，可以支持沿不同轴的多个层次组，并且我们实现的Web服务方法允许根据需要动态生成这些不同的视图。</li></ul><h2 id="0x05-我的一些思考"><a href="#0x05-我的一些思考" class="headerlink" title="0x05 我的一些思考"></a>0x05 我的一些思考</h2><h3 id="5-1-文章的一些不足"><a href="#5-1-文章的一些不足" class="headerlink" title="5.1 文章的一些不足"></a>5.1 文章的一些不足</h3><ul><li>没有考虑如何最好合并一个额外的数据维度。在五个维度的时候，就不好表示了。</li><li>解释性问题。通过链接连接的轴之间的空间越大，越远离轴原点移动;可视化的评估解释。</li><li>时间动态问题。与主题相关的级别模式，例如，谁在谈论什么主题？如果没有明确表示代表中的个人，就不能轻易地进行查询。</li></ul><h6 id="文章的可借鉴的地方"><a href="#文章的可借鉴的地方" class="headerlink" title="文章的可借鉴的地方"></a>文章的可借鉴的地方</h6><ul><li>可视化方案的评估方法；Fleiss Kappa一致性计算。</li><li>选取的邮件四个维度，文档主题模型的使用。</li><li>在其他领域的可视化方法的扩展。</li><li>克隆轴的提出。使用这种结构，可以专门理解在给定时间或关于给定主题的两个用户之间的交互。</li></ul><h6 id="可视化领域的一些点"><a href="#可视化领域的一些点" class="headerlink" title="可视化领域的一些点"></a>可视化领域的一些点</h6><ul><li>提出一个新的可视化方法/算法；或者将别的领域的方法应用到当前领域中。</li><li>可视化模型及可视化方案。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Title：&lt;/strong&gt; CommViz: Visualization of Semantic Patterns in Large Social Communication Networks（CommViz：大型社交网络中语义模式的可视化）&lt;br&gt;&lt;strong&gt;原文作者：&lt;/strong&gt; Karin Verspoor, Bahadorreza Ofoghi, Marlene Robles Granda&lt;br&gt;&lt;strong&gt;期刊：&lt;/strong&gt; Information Visualization&lt;br&gt;&lt;strong&gt;日期：&lt;/strong&gt; 2018/01/01&lt;br&gt;&lt;strong&gt;原文地址：&lt;/strong&gt; &lt;a href=&quot;https://minerva-access.unimelb.edu.au/bitstream/handle/11343/127914/commviz-InfoVis.version-accepted.pdf?sequence=1&quot;&gt;https://minerva-access.unimelb.edu.au/bitstream/handle/11343/127914/commviz-InfoVis.version-accepted.pdf?sequence=1&lt;/a&gt;&lt;br&gt;&lt;strong&gt;可视化链接：&lt;/strong&gt; &lt;a href=&quot;http://commviz.eng.unimelb.edu.au&quot;&gt;http://commviz.eng.unimelb.edu.au&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-概览&quot;&gt;&lt;a href=&quot;#0x00-概览&quot; class=&quot;headerlink&quot; title=&quot;0x00 概览&quot;&gt;&lt;/a&gt;0x00 概览&lt;/h2&gt;&lt;p&gt;这篇文章介绍了一种信息可视化工具—CommViz，通过采用称为hive图的可视化方法来反映网络的语义结构，将其称之为语义蜂巢图。该方法有效地组织并提供对复杂的，高维度的通信数据的洞察，例如社交媒体上的电子邮件或消息。作者通过将CommViz工具的体系结构及其应用程序作为案例研究介绍给安然电子邮件语料库，演示了可视化结构如何能够调查大量消息中的模式和关系。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="论文" scheme="http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Electron中主进程和渲染进程间的通信</title>
    <link href="http://yoursite.com/2018/12/23/Electron%E4%B8%AD%E4%B8%BB%E8%BF%9B%E7%A8%8B%E5%92%8C%E6%B8%B2%E6%9F%93%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/"/>
    <id>http://yoursite.com/2018/12/23/Electron中主进程和渲染进程间的通信/</id>
    <published>2018-12-23T07:52:11.000Z</published>
    <updated>2019-08-09T04:04:38.521Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/23/Electron中主进程和渲染进程间的通信/electron.PNG" alt="electron"></p><h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;在最近的项目中，用到了electron来进行桌面应用的开发。开发过程中涉及到从数据库中获取数据，并在页面中进行渲染这一过程。这一块也是electron开发中很重要的一个知识点：主进程和渲染进程间的通信。</p><a id="more"></a><h2 id="0x01-主进程—ipcMain"><a href="#0x01-主进程—ipcMain" class="headerlink" title="0x01 主进程—ipcMain"></a>0x01 主进程—ipcMain</h2><p>&emsp;&emsp;ipcMain模块是EventEmitter类的一个实例。 当在主进程中使用时，它处理从渲染器进程（网页）发送出来的异步和同步信息。 从渲染器进程发送的消息将被发送到该模块。</p><h3 id="1-1-发送消息"><a href="#1-1-发送消息" class="headerlink" title="1.1 发送消息"></a>1.1 发送消息</h3><ul><li>发送消息时，事件名称为channel。</li><li>回复同步信息时，需要设置event.returnValue。</li><li>将异步消息发送回发件人，需要使用event.sender.send(…)。</li></ul><h3 id="1-2-方法"><a href="#1-2-方法" class="headerlink" title="1.2 方法"></a>1.2 方法</h3><p>&emsp;&emsp;IpcMain模块可以使用以下方法来侦听事件：</p><ul><li>ipcMain.on(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;监听一个事件，当接收到新的消息时 listener 会以 listener(event, args…) 的形式被调用。</p><ul><li>ipcMain.once(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;这个方法只添加一次性的监听事件，当且仅当下一个消息发送到 channel 时 listener 才会被调用，随后 listener 会被移除。</p><ul><li>ipcMain.removeListener(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;从监听器数组中移除监听事件(channel)指定的监听器(listener)。</p><ul><li>ipcMain.removeAllListeners([channel][String])</li></ul><p>&emsp;&emsp;删除所有监听者，或特指的 事件(channel) 的所有监听者.</p><h3 id="1-3-事件对象"><a href="#1-3-事件对象" class="headerlink" title="1.3 事件对象"></a>1.3 事件对象</h3><p>&emsp;&emsp;主进程向callback传递event对象可以有如下方法：</p><ul><li>event.returnValue</li></ul><p>&emsp;&emsp;在一个同步消息中使用该方法返回值.</p><ul><li>event.sender</li></ul><p>&emsp;&emsp;在一个异步消息中使用该方法返回值.</p><h2 id="0x02-渲染进程—ipcRenderer"><a href="#0x02-渲染进程—ipcRenderer" class="headerlink" title="0x02 渲染进程—ipcRenderer"></a>0x02 渲染进程—ipcRenderer</h2><p>&emsp;&emsp;ipcRenderer 是一个 EventEmitter 的实例。 可以使用它提供的一些方法从渲染进程 (web 页面) 发送同步或异步的消息到主进程。 也可以接收主进程回复的消息。</p><h3 id="2-1-方法"><a href="#2-1-方法" class="headerlink" title="2.1 方法"></a>2.1 方法</h3><p>&emsp;&emsp;ipcRenderer 模块可以使用以下方法来监听事件和发送消息。</p><ul><li>ipcRenderer.on(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;监听事件(channel), 当新消息到达，将通过 listener(event, args…) 调用监听器(listener)。</p><ul><li>ipcRenderer.once(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;为事件添加一个一次性用的监听器(listener) 函数.这个监听器 只有在下次的消息到达 事件(channel) 时被请求调用，之后就被删除了.</p><ul><li>ipcRenderer.removeListener(channel[String], listener[Function])</li></ul><p>&emsp;&emsp;为特定的事件(channel)从监听队列中删除特定的 listener 监听者.</p><ul><li>ipcRenderer.removeAllListeners(channel[String])</li></ul><p>&emsp;&emsp;移除所有的监听器，当指定 channel 时只移除与其相关的所有监听器。</p><ul><li>ipcRenderer.send(channel[, arg1][, arg2][, …])</li></ul><p>&emsp;&emsp;通过事件(channel)发送异步消息到主进程，可以携带任意参数。 在内部，参数会被序列化为 JSON，因此参数对象上的函数和原型链不会被发送。主进程可以使用 ipcMain 监听事件(channel) .</p><ul><li>ipcRenderer.sendSync(channel[, arg1][, arg2][, …])</li></ul><p>&emsp;&emsp;返回任何由ipcMain处理程序发送过来的值。通过 channel 发送同步消息到主进程，可以携带任意参数。 在内部，参数会被序列化为 JSON，因此参数对象上的函数和原型链不会被发送。主进程可以使用 ipcMain 监听 channel来接收这些消息，并通过 event.returnValue 设置回复消息。<br>需要注意的是: 发送同步消息将会阻塞整个渲染进程。</p><h2 id="0x03-渲染进程—remote"><a href="#0x03-渲染进程—remote" class="headerlink" title="0x03 渲染进程—remote"></a>0x03 渲染进程—remote</h2><p>&emsp;&emsp;可以使用 remote 模块来调用 main 进程对象的方法,而不必显式发送进程间消息。也就是说，可以使用remote在渲染进程中使用主进程模块。<br>比如，可以利用下面的代码在渲染进程中新建一个浏览器窗口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//渲染进程</div><div class="line">const &#123;BrowserWindow&#125; = require(&apos;electron&apos;).remote</div><div class="line">let win = new BrowserWindow(&#123;width: 800, height: 600&#125;)</div><div class="line">win.loadURL(&apos;https://miss-me.github.io/&apos;)</div></pre></td></tr></table></figure><h3 id="3-1-远程对象"><a href="#3-1-远程对象" class="headerlink" title="3.1 远程对象"></a>3.1 远程对象</h3><p>&emsp;&emsp;remote 模块返回的每个对象 (包括函数) 表示主进程中的一个对象 (称之为远程对象或远程函数)。 当调用远程对象的方法时, 调用远程函数, 或者使用远程构造函数 (函数) 创建新对象时, 实际上是在发送同步进程消息。<br>&emsp;&emsp;在上面的渲染进程中新建浏览器窗口时，BrowserWindow和win都是远程对象，new BrowserWindow并不是在渲染进程中创建BrowserWindow对象，而是在主进程中创建了一个BrowserWindow对象，并在渲染进程中返回相应的远程对象，即win对象。<br>&emsp;&emsp;【注意】Electron确保只要渲染进程中的远程对象存在（换句话说，没有被垃圾收集），主进程中的相应对象将不会被释放。也就是说，当远程对象被垃圾回收后，主进程中的相应对象将被接触引用。在这种情况下，如果远程对象在渲染进程中泄露（存储在映射中，但从未释放），则主进程中的相应对象也将被泄露。</p><h3 id="3-2-访问主进程中的内置模块"><a href="#3-2-访问主进程中的内置模块" class="headerlink" title="3.2 访问主进程中的内置模块"></a>3.2 访问主进程中的内置模块</h3><p>&emsp;&emsp;主进程中的内置模块被添加为 remote 模块中的获取器，因此可以像 electron 模块一样直接使用它们。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const app = require(&apos;electron&apos;).remote.app</div><div class="line">console.log(app)</div></pre></td></tr></table></figure><h3 id="3-3-方法"><a href="#3-3-方法" class="headerlink" title="3.3 方法"></a>3.3 方法</h3><ul><li>remote.require(module[String])</li></ul><p>&emsp;&emsp;返回任何主进程中require(module) 返回的对象。 由其相对路径指定的模块将相对于主进程的入口点来解析。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// main process: main/index.js</div><div class="line">const &#123;app&#125; = require(&apos;electron&apos;)</div><div class="line">app.on(&apos;ready&apos;, () =&gt; &#123; /* ... */ &#125;)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// some relative module: main/foo.js</div><div class="line">module.exports = &apos;bar&apos;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// renderer process: renderer/index.js</div><div class="line">const foo = require(&apos;electron&apos;).remote.require(&apos;./foo&apos;) // bar</div></pre></td></tr></table></figure><ul><li>remote.getCurrentWindow()</li></ul><p>&emsp;&emsp;返回 BrowserWindow - 此网页所属的窗口</p><ul><li>remote.getCurrentWebContents()</li></ul><p>&emsp;&emsp;返回 WebContents - 此网页的 web 内容</p><ul><li>remote.getGlobal(name[String])</li></ul><p>&emsp;&emsp;返回任何主进程中 name (例如 global[name])的全局变量。</p><h3 id="3-4-属性"><a href="#3-4-属性" class="headerlink" title="3.4 属性"></a>3.4 属性</h3><ul><li>remote.process</li></ul><p>&emsp;&emsp;主进程中的 process 对象。这与 remote.getGlobal(‘process’) 相同, 但已被缓存。</p><h2 id="0x04-进程间通信"><a href="#0x04-进程间通信" class="headerlink" title="0x04 进程间通信"></a>0x04 进程间通信</h2><h3 id="4-1-同步消息"><a href="#4-1-同步消息" class="headerlink" title="4.1 同步消息"></a>4.1 同步消息</h3><ul><li>渲染进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const ipcRenderer = require(&apos;electron&apos;).ipcRenderer//引入ipcRenderer</div><div class="line"></div><div class="line">const reply = ipc.sendSync(&apos;synchronous-message&apos;, &apos;ping&apos;)//向&apos;synchronous-message&apos;事件发送一个异步消息：字段&apos;ping&apos;</div></pre></td></tr></table></figure><ul><li>主进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const ipcMain = require(&apos;electron&apos;).ipcMain</div><div class="line">//主进程通过监听&apos;synchronous-message&apos;这个事件，接收渲染进程发送过来的值，也就是这里的arg</div><div class="line">ipcMain.on(&apos;synchronous-message&apos;, function (event, arg) &#123;</div><div class="line">  event.returnValue = &apos;pong&apos;//向渲染进程返回一个值，同步返回消息</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="4-2-异步消息"><a href="#4-2-异步消息" class="headerlink" title="4.2 异步消息"></a>4.2 异步消息</h3><ul><li>渲染进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">const ipcipcRenderer = require(&apos;electron&apos;).ipcRenderer</div><div class="line"></div><div class="line">ipc.send(&apos;asynchronous-message&apos;, &apos;ping&apos;)//渲染进程向主进程发送一个异步消息</div><div class="line"></div><div class="line"></div><div class="line">ipcRenderer.on(&apos;asynchronous-reply&apos;, function (event, arg) &#123;//渲染进程监听一个异步返回消息的事件，主进程返回的消息保存在arg里</div><div class="line">  const message = arg</div><div class="line">&#125;)</div></pre></td></tr></table></figure><ul><li>主进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const ipcMain = require(&apos;electron&apos;).ipcMain</div><div class="line"></div><div class="line">ipcMain.on(&apos;asynchronous-message&apos;, function (event, arg) &#123;//主进程监听来自渲染进程的异步消息，并返回一个消息</div><div class="line">  event.sender.send(&apos;asynchronous-reply&apos;, &apos;pong&apos;)//异步返回数据</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="4-3-使用remote通信"><a href="#4-3-使用remote通信" class="headerlink" title="4.3 使用remote通信"></a>4.3 使用remote通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 渲染进程</div><div class="line">//渲染remote接口直接获取渲染进程发送消息。</div><div class="line">remote.BrowserWindow.fromId(winId).webContents.send(&apos;ping&apos;, &apos;someThing&apos;);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 主进程</div><div class="line">//主进程创建事件，发送消息</div><div class="line">win1.webContents.send(&apos;distributeIds&apos;,&#123;</div><div class="line">    win2Id : win2.id</div><div class="line">&#125;);</div><div class="line">win2.webContents.send(&apos;distributeIds&apos;,&#123;</div><div class="line">    win1Id : win1.id</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><a href="https://segmentfault.com/a/1190000009253100" target="_blank" rel="external">https://segmentfault.com/a/1190000009253100</a></p><h3 id="4-4-渲染进程间的通信"><a href="#4-4-渲染进程间的通信" class="headerlink" title="4.4 渲染进程间的通信"></a>4.4 渲染进程间的通信</h3><p>&emsp;&emsp;使用 ipcRenderer.sendTo() 在渲染进程中互相发送通信，更加容易。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipcRenderer.sendTo(windowId, &apos;ping&apos;, &apos;someThing&apos;)</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/23/Electron中主进程和渲染进程间的通信/electron.PNG&quot; alt=&quot;electron&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在最近的项目中，用到了electron来进行桌面应用的开发。开发过程中涉及到从数据库中获取数据，并在页面中进行渲染这一过程。这一块也是electron开发中很重要的一个知识点：主进程和渲染进程间的通信。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Electron" scheme="http://yoursite.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>用Vuex管理websocket实时推送的数据，实现全局提示</title>
    <link href="http://yoursite.com/2018/12/08/%E7%94%A8Vuex%E7%AE%A1%E7%90%86websocket%E5%AE%9E%E6%97%B6%E6%8E%A8%E9%80%81%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%8F%90%E7%A4%BA/"/>
    <id>http://yoursite.com/2018/12/08/用Vuex管理websocket实时推送的数据，实现全局提示/</id>
    <published>2018-12-08T02:57:51.000Z</published>
    <updated>2019-08-09T06:57:23.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/08/用Vuex管理websocket实时推送的数据，实现全局提示/state.PNG" alt="state"></p><h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;最近的项目中用到了websocket实现实时通信。遇到了一个问题：如何将websocket服务器端实时推送过来的数据全局实时推送。由于websocket通信的实时性和vue中的渲染机制。在查了很多资料之后，发现vuex是实现这个功能的最佳选择。</p><a id="more"></a><p>&emsp;&emsp;上图中展示了一个状态自管理应用中的单向数据流。由 state，驱动应用的数据源；view，以声明方式将 state 映射到视图；actions，响应在 view 上的用户输入导致的状态变化 三部分组成。当遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏：</p><ul><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul><p>&emsp;&emsp;这时，将组件的共享状态抽取出来，以一个全局单例模式管理。在这种模式下，组件树构成了一个巨大的“视图”，不管在树的哪个位置，任何组件都能获取状态或者触发行为！这就是vuex的设计思想。</p><h2 id="0x01-什么是vuex？"><a href="#0x01-什么是vuex？" class="headerlink" title="0x01 什么是vuex？"></a>0x01 什么是vuex？</h2><p>&emsp;&emsp;vue官方说法中，Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。<br><img src="/2018/12/08/用Vuex管理websocket实时推送的数据，实现全局提示/vuex.PNG" alt="vuex"><br>&emsp;&emsp;如上图所示，Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的状态 (state)。Vuex 和单纯的全局对象有以下两点不同：</p><ul><li><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</p></li><li><p>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样可以方便跟踪每一个状态的变化。</p></li></ul><h2 id="0x02-关于State"><a href="#0x02-关于State" class="headerlink" title="0x02 关于State"></a>0x02 关于State</h2><p>&emsp;&emsp;Vuex 使用单一状态树：用一个对象包含全部的应用层级状态。由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 创建一个 Counter 组件</div><div class="line">const Counter = &#123;</div><div class="line">  template: `&lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt;`,</div><div class="line">  computed: &#123;</div><div class="line">    count () &#123;</div><div class="line">      return store.state.count</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>&emsp;&emsp;每当 store.state.count 变化的时候,都会重新求取计算属性，并且触发更新相关联的 DOM。这种模式导致组件依赖全局状态单例。在模块化的构建系统中，在每个需要使用 state 的组件中需要频繁地导入，并且在测试组件时需要模拟状态。</p><p>&emsp;&emsp;Vuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）。通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到。</p><p>&emsp;&emsp;当一个组件需要获取多个状态时候，将这些状态都声明为计算属性会有些重复和冗余。这时可以使用 mapState 辅助函数帮助我们生成计算属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 在单独构建的版本中辅助函数为 Vuex.mapState</div><div class="line">import &#123; mapState &#125; from &apos;vuex&apos;</div><div class="line"></div><div class="line">export default &#123;</div><div class="line">  // ...</div><div class="line">  computed: mapState(&#123;</div><div class="line">    // 箭头函数可使代码更简练</div><div class="line">    count: state =&gt; state.count,</div><div class="line"></div><div class="line">    // 传字符串参数 &apos;count&apos; 等同于 `state =&gt; state.count`</div><div class="line">    countAlias: &apos;count&apos;,</div><div class="line"></div><div class="line">    // 为了能够使用 `this` 获取局部状态，必须使用常规函数</div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      return state.count + this.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x03-关于Mutations"><a href="#0x03-关于Mutations" class="headerlink" title="0x03 关于Mutations"></a>0x03 关于Mutations</h2><p>&emsp;&emsp;提交 mutation是更改Vuex 的 store 中的状态的唯一方法。mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    count: 1</div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      // 变更状态</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;mutation handler不能直接被调用，Mutations以相应的type通过调用store.commit(‘increment’)触发 mutation handler</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.commit(&apos;increment&apos;)</div></pre></td></tr></table></figure><h2 id="0x04-关于Actions"><a href="#0x04-关于Actions" class="headerlink" title="0x04 关于Actions"></a>0x04 关于Actions</h2><p>&emsp;&emsp;Action 类似于 mutation，不同在于：</p><ul><li>Action 提交的是 mutation，而不是直接变更状态。</li><li>Action 可以包含任意异步操作。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">  state: &#123;</div><div class="line">    count: 0</div><div class="line">  &#125;,</div><div class="line">  mutations: &#123;</div><div class="line">    increment (state) &#123;</div><div class="line">      state.count++</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  actions: &#123;</div><div class="line">    increment (context) &#123;</div><div class="line">      context.commit(&apos;increment&apos;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此可以通过调用 context.commit 提交一个 mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters。实践中，经常会用到 ES2015 的 参数解构 来简化代码（特别是需要多次调用 commit 的时候）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  increment (&#123; commit &#125;) &#123;</div><div class="line">    commit(&apos;increment&apos;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;Action 通过 store.dispatch 方法触发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">store.dispatch(&apos;increment&apos;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;这个方式就体现了action与mutation 的不同之处：mutation 必须同步执行，而Action 就不受约束！可以在 action 内部执行异步操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">actions: &#123;</div><div class="line">  incrementAsync (&#123; commit &#125;) &#123;</div><div class="line">    setTimeout(() =&gt; &#123;</div><div class="line">      commit(&apos;increment&apos;)</div><div class="line">    &#125;, 1000)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="0x05-项目中的思路"><a href="#0x05-项目中的思路" class="headerlink" title="0x05 项目中的思路"></a>0x05 项目中的思路</h2><p>&emsp;&emsp;项目结构如下所示：其中Web.vue是整个页面的根组件，于是我将websocket的实时通信写在了这里。<br>&emsp;&emsp;在建立连接之后，当有用户上线，后端就向前端实时推送数据，并使用this.$store.dispatch将后端推送的数据保存为store里的一个state。</p><h3 id="5-1-实时通信"><a href="#5-1-实时通信" class="headerlink" title="5.1 实时通信"></a>5.1 实时通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">methods:&#123;</div><div class="line">    initWebSocket()&#123;</div><div class="line">        // 打开一个 web socket</div><div class="line">        this.ws = new WebSocket(&quot;ws://ip:port&quot;);</div><div class="line">        this.ws.onopen = this.websocketsend;           </div><div class="line">        this.ws.onmessage = this.websocketonmessage;</div><div class="line">        this.ws.onclose = this.websocketclose;</div><div class="line">    &#125;,</div><div class="line">    websocketsend(agentData)&#123;// Web Socket 已连接上，使用 send() 方法发送数据</div><div class="line">        this.ws.send(agentData);</div><div class="line">    &#125;,</div><div class="line">    websocketonmessage(evt) &#123; </div><div class="line">        var data = eval(&quot;(&quot;+evt.data+&quot;)&quot;);</div><div class="line">        var type =data.type || &apos;&apos;;</div><div class="line">        var action = data.action;</div><div class="line">        var id = data.client_id;</div><div class="line">        // 后端php文件中中返回的init类型的消息，将client_id发给后台进行uid绑定</div><div class="line">        // 利用jquery发起ajax请求，将client_id发给后端进行uid绑定</div><div class="line">        // console.log(evt);  </div><div class="line">        if(type == &apos;init&apos;)&#123;</div><div class="line">                $.ajax(&#123; //这里使用了jQuery的同步通信来提交用户id，是根据后端websocket框架使用的websocket通信连接验证及建立的方式来的。</div><div class="line">                    type: &apos;POST&apos;,</div><div class="line">                    url: &quot;./index.php/bind&quot;,  //?client_id=&quot;+data.client_id+&quot;&amp;token=&quot;+sessionStorage.token</div><div class="line">                    async: false,  </div><div class="line">                    dataType:&apos;json&apos;,</div><div class="line">                    data:&#123;client_id: id,token:sessionStorage.token&#125;,</div><div class="line">                    success: function(data)&#123;  </div><div class="line">                        // console.log(data);</div><div class="line">                        //第一次连接建立之后，就启动一个dispatch将当前返回的cookie存到vuex的全局变量中去。</div><div class="line">                        this.$store.dispatch(&apos;dataPush&apos;,</div><div class="line">                        data).then(() =&gt; &#123;</div><div class="line">                        </div><div class="line">                        &#125;)                   </div><div class="line">                    &#125;  </div><div class="line">                &#125;);   </div><div class="line">                // console.log(&quot;请求后&quot;);                  </div><div class="line">        &#125;else if(action == &apos;ping&apos;)&#123;</div><div class="line">            this.websocketsend(&quot;pong&quot;);  </div><div class="line">        &#125;else&#123;</div><div class="line">            // console.log(evt.data);</div><div class="line">            this.$store.dispatch(&apos;dataPush&apos;, evt.data).then(() =&gt; &#123;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    websocketclose(e)&#123; // 关闭 websocket</div><div class="line">        console.log(e);</div><div class="line">    &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="5-2-使用Vuex管理新用户上线"><a href="#5-2-使用Vuex管理新用户上线" class="headerlink" title="5.2 使用Vuex管理新用户上线"></a>5.2 使用Vuex管理新用户上线</h3><p>&emsp;&emsp;然后，在src文件夹下新建一个/store/index.js文件，引入vuex来进行全局状态管理。在state里面定义一个全局变量data。在mutations里面定义一个dataPush函数，更改state状态。当接收到新用户上线的数据推送时，就会触发store里面的dataPush函数，修改store里面的数据状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import Vue from &apos;vue&apos;</div><div class="line">import Vuex from &apos;vuex&apos;</div><div class="line"></div><div class="line">Vue.use(Vuex)</div><div class="line"></div><div class="line">const store = new Vuex.Store(&#123;</div><div class="line">    // 全局变量</div><div class="line">    state: &#123;</div><div class="line">        data: undefined</div><div class="line">    &#125;,</div><div class="line">    // 修改全局变量必须通过mutations中的方法</div><div class="line">    // mutations只能采用同步方法</div><div class="line">    mutations: &#123;</div><div class="line">        dataPush (state, payload) &#123;</div><div class="line">            state.data = payload;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    // 异步方法用actions</div><div class="line">    // actions不能直接修改全局变量，需要调用commit方法来触发mutation中的方法</div><div class="line">    actions: &#123;</div><div class="line">        dataPush (context, payload) &#123;</div><div class="line">            context.commit(&apos;dataPush&apos;, payload)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line">export default store</div></pre></td></tr></table></figure></p><h3 id="5-3-监听状态更新，进行提示"><a href="#5-3-监听状态更新，进行提示" class="headerlink" title="5.3 监听状态更新，进行提示"></a>5.3 监听状态更新，进行提示</h3><p>&emsp;&emsp;最后，在web.vue页面建立一个监听事件，监听$store.state.data这个状态是否有更新，如果有更新，就使用一个提示组件，展示新上线的用户信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">watch:&#123;//监听vuex中更新的data数据</div><div class="line">    &quot;$store.state.data&quot;:function () &#123;</div><div class="line">        var data = JSON.parse(this.$store.state.data);</div><div class="line">        // &quot;uid&quot;:&quot;xxxxxxx&quot;,&quot;eventid&quot;:&quot;xxxxxxxxxxxxxxxxxxx&quot;,</div><div class="line">        // &quot;sessdate&quot;:&quot;&quot;,&quot;ip&quot;:&quot;&quot;</div><div class="line">        </div><div class="line">        this.$Notice.warning(&#123;</div><div class="line">            title: &apos;客户端上线&apos;,</div><div class="line">            desc: &quot;ip:&quot;+data[&quot;ip&quot;]+&quot;&lt;br&gt;uid:&quot;+data[&quot;uid&quot;]+&quot;&lt;br&gt;eventid:&quot;+data[&quot;eventid&quot;]+&quot;&lt;br&gt;sessdate:&quot;+data[&quot;sessdate&quot;],</div><div class="line">            duration: 0</div><div class="line">        &#125;);                     </div><div class="line">    &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/08/用Vuex管理websocket实时推送的数据，实现全局提示/state.PNG&quot; alt=&quot;state&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近的项目中用到了websocket实现实时通信。遇到了一个问题：如何将websocket服务器端实时推送过来的数据全局实时推送。由于websocket通信的实时性和vue中的渲染机制。在查了很多资料之后，发现vuex是实现这个功能的最佳选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vuex" scheme="http://yoursite.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>react+electron+ant-design+sqlite3实现一个桌面应用</title>
    <link href="http://yoursite.com/2018/12/04/react-electron-ant-design-sqlite3%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/04/react-electron-ant-design-sqlite3实现一个桌面应用/</id>
    <published>2018-12-04T13:22:27.000Z</published>
    <updated>2019-08-09T04:18:17.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;最近帮隔壁实验室写个简单的展示页面，想着自己学了一下nodejs与react，刚好可以用来练练手。于是使用sqlite3数据库，用nodejs来写后端，react写前端的前后端分离方法，完成了一个小demo。这时候又要求用electron改成桌面版的应用，这简单啊，把react打包出来的index.html放到electron下做入口文件不就OK了。但是又涉及到跟对方的Java环境下的jar包通信的问题，对方的思路是通过前端点击按钮在数据库里存入一个字段，jar包所在环境通过不断轮询数据库去获取该字段确定是否启动手机应用拖数据库。前端在点击按钮后不断轮询数据库，看需要的数据是否更新，有数据更新就取回数据，并在前端展示。对于这个方案，我是拒绝的。回来跟师兄讨论了一下，确定了下几种方案。</p><a id="more"></a><ul><li>nodejs写后端，react写前端。前端请求后端，由nodejs命令行启动jar。打包react页面放到electron下作为入口文件。</li><li>nodejs写后端，react写前端。把react页面打包近electron下作为入口文件，由于electron是基于nodejs的，所以在electron里使用socket实现桌面应用与jar包通信。</li><li>Java写后端，react写前端。把react写的页面打包放进electron下作为入口文件，放入Java环境下。</li><li>整合electron与react框架。使用ipcMain与ipcRenderer实现进程间的通信，ipcMain（主进程）用来获取数据，启动jar获取返回，再将数据返回到ipcRenderer(渲染进程)进行渲染。</li></ul><p>&emsp;&emsp;前三种方式都是需要启动服务器端的，对方采用sqlite3做数据库，就是希望在不启动服务器的情况下打开应用，启动jar包，展示数据。因此，第四种方式是<br>最合适的。但是在整合electron与react框架时，出现了很多问题。其中最关键的问题就是整合后react中不能直接使用require引入ipcRenderer。目前网络上查到的解决方案，都是使用window.require引入，同时使用预加载的方式。但是这种方式只适合在不使用进程间通信的情况下使用。下面给出一种我尝试成功的方法，可以使用进程间通信。虽然在开发过程中也出现了很多问题，但是所幸都一一解决了。</p><h2 id="0x01-技术路线"><a href="#0x01-技术路线" class="headerlink" title="0x01 技术路线"></a>0x01 技术路线</h2><table><thead><tr><th>技术路线</th><th>用途 </th></tr></thead><tbody><tr><td>Electron</td><td>构建桌面应用</td></tr><tr><td>react</td><td>前端页面渲染，展示</td></tr><tr><td>ant design</td><td>React的UI库</td></tr><tr><td>sqlite3</td><td>一个轻量级的数据库</td></tr></tbody></table><h2 id="0x02-环境安装及配置"><a href="#0x02-环境安装及配置" class="headerlink" title="0x02 环境安装及配置"></a>0x02 环境安装及配置</h2><h3 id="2-1-安装Nodejs环境"><a href="#2-1-安装Nodejs环境" class="headerlink" title="2.1 安装Nodejs环境"></a>2.1 安装Nodejs环境</h3><p>&emsp;&emsp;首先确认已经安装了Nodejs环境，如果没有安装请自行在搜索相关文章进行安装，这里不做详细讲解。</p><h3 id="2-2-新建项目，打开cmd"><a href="#2-2-新建项目，打开cmd" class="headerlink" title="2.2 新建项目，打开cmd"></a>2.2 新建项目，打开cmd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir my-react</div><div class="line">cd my-react</div><div class="line">npm init//默认配置就好</div></pre></td></tr></table></figure><h3 id="2-3-安装依赖"><a href="#2-3-安装依赖" class="headerlink" title="2.3 安装依赖"></a>2.3 安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install –save-dev electron electron-prebuilt electron-reload electron-packager</div><div class="line">npm install –save-dev babel babelify babel-preset-es2015 babel-preset-react babel-plugin-transform-es2015-spread</div><div class="line">npm install –save-dev browserify watchify</div><div class="line">npm install –-save react react-dom react-router-dom</div></pre></td></tr></table></figure><p>&emsp;&emsp;推荐ant design按需加载，因此这里还需要安装babel-plugin-import。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install antd --save</div><div class="line">npm install –save-dev babel-plugin-import</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;具体配置和使用请参考<a href="https://ant.design/docs/react/introduce-cn/" target="_blank" rel="external">ant design官网</a>.</p><h3 id="2-4-配置-babel"><a href="#2-4-配置-babel" class="headerlink" title="2.4 配置.babel"></a>2.4 配置.babel</h3><p>&emsp;&emsp;在根目录下新建一个.babelrc文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [</div><div class="line">        &quot;es2015&quot;,</div><div class="line">        &quot;react&quot;</div><div class="line">    ],</div><div class="line">    &quot;plugins&quot;: [</div><div class="line">        &quot;transform-object-rest-spread&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;这两项用来告知babel转换ES6和React JSX风格的代码，另外还需转换ES6中的spread语法。</p><h3 id="2-5-代码转换"><a href="#2-5-代码转换" class="headerlink" title="2.5 代码转换"></a>2.5 代码转换</h3><p>&emsp;&emsp;package.json 文件中配置 watchify，让其可以自动检测本地代码变化，并且自动转换代码。<br>&emsp;&emsp;scripts 下面配置了三个命令：start、watch、package，分别用于启动 App、检测并转换代码、打包 App。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;electron .&quot;,</div><div class="line">    &quot;watch&quot;: &quot;watchify app/appEntry.js -t babelify -o public/js/bundle.js --debug --verbose&quot;,</div><div class="line">    &quot;package&quot;: &quot;electron-packager ./ DemoApps --overwrite --app-version=1.0.0 --platform=win32 --arch=x64 --out=../DemoApps --electron-version=1.4.13 --app-version=1.2.1 --icon=./public/img/icon/icon.ico&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过在命令行下执行 npm run xxx ，可以运行上面定义好的命令。我们看到，通过 babelify 将代码转换输出到 public/js/bundle.js 目录下，所以我们发布时只需要这一个转换好的 js 文件即可。</p><h2 id="0x03-Electron"><a href="#0x03-Electron" class="headerlink" title="0x03 Electron"></a>0x03 Electron</h2><p>&emsp;&emsp;package.json文件中有一个”main”字段，这指明了主进程的入口文件。也就是说，启动Electron后会首先在主进程中加载执行这个js文件。所以我们要在这里创建窗口，并在这里指定页面加载的入口文件（index.html）。</p><h3 id="3-1-index-js"><a href="#3-1-index-js" class="headerlink" title="3.1 index.js"></a>3.1 index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">const electron = require(&apos;electron&apos;);</div><div class="line">const &#123;app, BrowserWindow, Menu, ipcMain, ipcRenderer&#125; = electron;</div><div class="line"></div><div class="line">var mainWnd = null;</div><div class="line">function createMainWnd() &#123;//创建主进程的窗口</div><div class="line">    mainWnd = new BrowserWindow(&#123;//长宽可以自定义设置</div><div class="line">        width: ,</div><div class="line">        height: ,</div><div class="line">        icon: &apos;public/img/app-icon.png&apos;</div><div class="line">    &#125;);</div><div class="line">    if (isDevelopment) &#123;</div><div class="line">        mainWnd.webContents.openDevTools();</div><div class="line">    &#125;</div><div class="line">    mainWnd.loadURL(`file://$&#123;__dirname&#125;/index.html`);//加载index.html，打开electron将会显示index.html的内容</div><div class="line">    mainWnd.on(&apos;closed&apos;, () =&gt; &#123;</div><div class="line">       mainWnd = null;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.on(&apos;ready&apos;, createMainWnd);</div><div class="line">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</div><div class="line">    app.quit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="3-2-index-html"><a href="#3-2-index-html" class="headerlink" title="3.2 index.html"></a>3.2 index.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;Electron Demo Apps&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;public/css/main.css&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=&quot;root&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;!--引入转换后的js--&gt;</div><div class="line">        &lt;script src=&quot;public/js/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>&emsp;&emsp;这里的id为root的div是一个容器，React组件将会渲染到这个div上面；引入的bundle.js是通过babelify转换生成的js文件。</p><h3 id="3-3-app-appEntry-js"><a href="#3-3-app-appEntry-js" class="headerlink" title="3.3 app/appEntry.js"></a>3.3 app/appEntry.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">import &#123;</div><div class="line">    BrowserRouter as Router,</div><div class="line">    Route,</div><div class="line">    Link,</div><div class="line">    Switch,</div><div class="line">    Redirect</div><div class="line">&#125; from &apos;react-router-dom&apos;;</div><div class="line">import Homepage from &apos;./components/Homepage&apos;; // 导入首页组件</div><div class="line">import Device from &apos;./components/Device&apos;; // 导入设备组件</div><div class="line">import &#123; Layout, Menu &#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">const &#123; Header, Content, Footer &#125; = Layout;</div><div class="line">const electron = window.require(&apos;electron&apos;);</div><div class="line">const &#123; ipcRenderer, shell &#125; = electron;</div><div class="line"></div><div class="line">class MainWindow extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">        &lt;!--这是路由组件--&gt;</div><div class="line">            &lt;Router&gt;</div><div class="line">                &lt;Layout className=&quot;layout&quot;&gt;</div><div class="line">                    &#123;/* &lt;div className=&quot;logo&quot; /&gt; */&#125;</div><div class="line">                    &lt;Header&gt;</div><div class="line">                        &lt;div className=&quot;logo&quot; /&gt;</div><div class="line">                        &lt;Menu</div><div class="line">                            theme=&quot;dark&quot;</div><div class="line">                            mode=&quot;horizontal&quot;</div><div class="line">                            defaultSelectedKeys=&#123;[&apos;1&apos;]&#125;</div><div class="line">                            style=&#123;&#123; lineHeight: &apos;64px&apos; &#125;&#125;</div><div class="line">                        &gt;</div><div class="line">                            &lt;Menu.Item key=&quot;1&quot;&gt;</div><div class="line">                                &lt;Link to=&quot;/service&quot;&gt;服务&lt;/Link&gt;</div><div class="line">                            &lt;/Menu.Item&gt;</div><div class="line">                            &lt;Menu.Item key=&quot;2&quot;&gt;</div><div class="line">                                &lt;Link to=&quot;/homepage&quot;&gt;首页&lt;/Link&gt;</div><div class="line">                            &lt;/Menu.Item&gt;</div><div class="line">                        &lt;/Menu&gt;</div><div class="line">                    &lt;/Header&gt;</div><div class="line">                    &lt;Content style=&#123;&#123; padding: &apos;0 50px&apos; &#125;&#125;&gt;</div><div class="line">                        &lt;div style=&#123;&#123; background: &apos;#fff&apos;, padding: 24, minHeight: 880 &#125;&#125;&gt;</div><div class="line"></div><div class="line">                            &lt;Switch&gt;</div><div class="line">                             </div><div class="line">                                &lt;Route exact path=&quot;/&quot; component=&#123;Service&#125;&gt;</div><div class="line">                                    </div><div class="line">                                &lt;/Route&gt;</div><div class="line">                                &lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div><div class="line">                                &lt;Redirect to=&quot;/&quot; /&gt;</div><div class="line">                            &lt;/Switch&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/Content&gt;</div><div class="line">                    &lt;Footer style=&#123;&#123; textAlign: &apos;center&apos; &#125;&#125;&gt;</div><div class="line">                        Ant Design ©2018 Created by Ant UED</div><div class="line">                    &lt;/Footer&gt;</div><div class="line">                &lt;/Layout&gt;</div><div class="line">            &lt;/Router&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let mainWndComponent = ReactDOM.render(</div><div class="line">    &lt;MainWindow /&gt;,</div><div class="line">    document.querySelector(&apos;#root&apos;));</div></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，这里的ant design要按需引入；同时为了实现路由，要引入react-router-dom的组件；引入nodejs中文件处理的一些模块；引入electron的渲染进程，用于和主进程进行通信。并通过ReactDOM.render 方法将一个 React 组件渲染到了一个 div 上面。</p><h2 id="0x04-sqlite3安装"><a href="#0x04-sqlite3安装" class="headerlink" title="0x04 sqlite3安装"></a>0x04 sqlite3安装</h2><p>&emsp;&emsp;Electron是基于nodejs的，sqlite3又是一个轻量级数据库。所以这里我们通过在Electron里安装sqlite3的依赖，并引入sqlite3模块来使用它。    </p><p>&emsp;&emsp;但是在安装过程中会出现很多问题，其中比较多的就是在Electron中对sqlite3的编译问题。下面给出一个测试正确的方法。</p><p>&emsp;&emsp;首先是安装环境。先安装python2.7环境，只能是2.7的环境，sqlite3在大于2.7的环境中无法正确编译；其次安装vs2015，只能是2015版本，2017不行。安装完之后一定要安装vs2015所需的C++开发环境，这点很重要，因为要是没有这个东西，会报错，缺少v140的工具集，之所以没有选择vs2017，是由于vs201没有v140的工具集。这一步的安装工作非常非常非常重要！！！！如果环境安装不正确，使用后面的命令将会报错！！！！</p><p>&emsp;&emsp;然后使用Microsoft的windows-build-tools，在确认电脑安装了python2.7版本的情况下（python3.0以上版本不支持），以管理员身份运行PowerShell或CMD.exe。使用下面代码安装所有必需的工具和配置。环境没有安装好这一步将会报错！！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g windows-build-tools</div></pre></td></tr></table></figure><p>&emsp;&emsp;然后安装sqlite3及相关依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cnpm install sqlite3 --save</div><div class="line"></div><div class="line">cnpm install node-gyp -g</div><div class="line"></div><div class="line">cnpm install nan --save</div><div class="line"></div><div class="line">cnpm install electron-rebuild --save</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;最后进行编译。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.\node_modules\.bin\electron-rebuild.cmd</div><div class="line"></div><div class="line">cd .\node_modules\sqlite3</div><div class="line"></div><div class="line">node-gyp rebuild --target=1.4.13 --arch=x64 --target_platform=win32 --dist-url=https://atom.io/download/electron/ --module_name=node_sqlite3 --module_path=../lib/binding/electron-v1.4-win32-x64</div></pre></td></tr></table></figure><p>&emsp;&emsp;上面的target是electron版本，可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">electron -v</div></pre></td></tr></table></figure><p>命令来查看。<br>&emsp;&emsp;还有一点需要注意的是，上面有两个地方用到了electron的版号，一个是’–target’中，这里需要完整的版本号；另一个是module_path中有一个electron-v1.4字段，module_path是编译生成的node_sqlite3.node所在的路径，electron-v1.4-win32-x64是node_sqlite3.node上一级文件名，这里只能用v1.4不能用1.4.13，否则会生成名为electron-v1.4.13-win32-x64的文件夹。在启动项目时，项目会默认查找electron-v1.4-win32-x64文件夹中的node_sqlite3.node文件，会因为找不到该文件而报错。如果使用了electron-v1.4.13，一定要到相应的文件夹中把名字改成electron-v1.4-win32-x64。切记切记！！！</p><h2 id="0x05-启动"><a href="#0x05-启动" class="headerlink" title="0x05 启动"></a>0x05 启动</h2><p>&emsp;&emsp;首先启动Watchify，主要是让其监控本地文件修改，实时转换生成 public/js/bundle.js 文件。如果appEntry.js转换成bundle.js有错误的话，命令行下也会有提示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run watch</div></pre></td></tr></table></figure><p>&emsp;&emsp;接下来就需要调用start来启动App了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run start</div></pre></td></tr></table></figure><h2 id="0x06-数据库操作与页面渲染"><a href="#0x06-数据库操作与页面渲染" class="headerlink" title="0x06 数据库操作与页面渲染"></a>0x06 数据库操作与页面渲染</h2><p>&emsp;&emsp;在这个项目中，我们使用到进程间通信来获取数据，并渲染到页面上。主进程用ipcMain，负责从sqlite3数据库获取数据，再通过与渲染进程ipcrenderer通信，将数据返回给渲染进程，渲染到页面上。</p><h3 id="6-1-主进程index-js中"><a href="#6-1-主进程index-js中" class="headerlink" title="6.1 主进程index.js中"></a>6.1 主进程index.js中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ipcMain.on(&apos;getServiceMsg&apos;, (event, arg) =&gt; &#123;//主进程监听一个渲染进程，进行数据库操作</div><div class="line">    let curpage = arg.curpage;</div><div class="line">    let sql_num = &quot;SELECT * from Info&quot;;</div><div class="line">    let sql_all = &quot;SELECT * from Info limit 1&quot; ;</div><div class="line">    let num;</div><div class="line">    let results = [];</div><div class="line">    db.all(sql_num, function (err, rows) &#123;</div><div class="line">        num = rows.length;</div><div class="line">    &#125;);</div><div class="line">    db.all(sql_all, function (err, rows) &#123;</div><div class="line">        console.log(rows);</div><div class="line">        rows.map((row) =&gt; &#123;</div><div class="line">            results.push(&#123;</div><div class="line">                &quot;key&quot;: row.id,</div><div class="line">                &quot;xinghao&quot;: row.xinghao,</div><div class="line">                &quot;bianhao&quot;: row.bianhao,</div><div class="line">                &quot;yuyan&quot;: row.yuyan,</div><div class="line">                &quot;changshang&quot;: row.changshang</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">        results.push(&#123;</div><div class="line">            &quot;count&quot;: num,</div><div class="line">            &quot;curpage&quot;: curpage</div><div class="line">        &#125;);</div><div class="line">        // console.log(results);</div><div class="line">        event.returnValue = results;//将从数据库取得的数据返回给渲染进程</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;主进程需要对这个字段进行监听。</p><h3 id="6-2-渲染进程Homepage-js中"><a href="#6-2-渲染进程Homepage-js中" class="headerlink" title="6.2 渲染进程Homepage.js中"></a>6.2 渲染进程Homepage.js中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">export default class Hello extends Component&#123;</div><div class="line">        constructor(props) &#123;</div><div class="line">            super(props);</div><div class="line">            this.state = &#123;</div><div class="line">                dataSource: [],</div><div class="line">                total: &quot;&quot;,</div><div class="line">                curpage: 1,</div><div class="line">                Selected: &quot;&quot;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        componentDidMount() &#123;</div><div class="line">            this.getMessageData();</div><div class="line">        &#125;</div><div class="line">        getMessageData() &#123;</div><div class="line">            let data = &#123;</div><div class="line">                &quot;type&quot;:&quot;Info&quot;,</div><div class="line">                &quot;curpage&quot;:this.state.curpage</div><div class="line">            &#125;</div><div class="line">            let res = ipcRenderer.sendSync(&apos;getServiceMsg&apos;, data);//发送给主进程一个字段：&apos;getServiceMsg&apos;，执行数据库查询操作后会获取一个返回值。</div><div class="line">            let count = res.pop();</div><div class="line">            this.setState(&#123;</div><div class="line">                dataSource: res[0],</div><div class="line">                total: count.count</div><div class="line">            &#125;, () =&gt; &#123;</div><div class="line">                console.log(this.state.dataSource);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        onChange(page) &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                curpage: page.current,</div><div class="line">            &#125;, () =&gt; &#123;</div><div class="line">                this.getMessageData();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    render()&#123;&#125;</div></pre></td></tr></table></figure><h2 id="0x07-开发过程中出现的一些问题"><a href="#0x07-开发过程中出现的一些问题" class="headerlink" title="0x07 开发过程中出现的一些问题"></a>0x07 开发过程中出现的一些问题</h2><h3 id="7-1-css样式的问题"><a href="#7-1-css样式的问题" class="headerlink" title="7.1 css样式的问题"></a>7.1 css样式的问题</h3><p>&emsp;&emsp;在用react开发的js文件中引用外部的css文件会报错；antd.css样式不能渲染。这应该是因为babel将appEntry.js转换成bundle.js文件，并没有将css文件转化出来。页面是通过加载index.html进行渲染的，html文件中不能找到css文件。因此，在入口html文件中引入外部css文件。可以解决这个问题。</p><h3 id="7-2-文件路径问题"><a href="#7-2-文件路径问题" class="headerlink" title="7.2 文件路径问题"></a>7.2 文件路径问题</h3><p>&emsp;&emsp;文件夹app下存放的是用react开发的js文件，在这里面引入图片时使用相对路径会出错。首先，Homepage与Device两个页面放在app文件夹下的components下，在app文件夹中，js文件的根路径就是app文件夹；因此，引入的图片只能放在app文件夹或下一级目录下；其次，经过babel的转化引起，在bundle.js文件中找不到合适的路径。因此，在引入图片时，我使用了绝对路径或者在整个项目的根目录下写一个css文件，在类中引入图片。</p><h3 id="7-3-路由的问题"><a href="#7-3-路由的问题" class="headerlink" title="7.3 路由的问题"></a>7.3 路由的问题</h3><p>&emsp;&emsp;在打开页面时，首页是空白的，只有通过点击导航栏，才会将页面渲染出来。这个问题的解决请参考我前面的博客。</p><h3 id="7-4-window-require问题"><a href="#7-4-window-require问题" class="headerlink" title="7.4 window.require问题"></a>7.4 window.require问题</h3><p>&emsp;&emsp;在react中不能直接引入ipcRenderer。这里要使用window.require进行引入，但需要注意的是，打包后的index.html文件为空白，会出现，’window.require is not a function’的报错，使用window.require而不是require来避免electron和browserify的require函数之间的冲突。在浏览器测试的时候会报错，这是因为window.require未在浏览器中定义，只在运行Electron应用程序时起作用。</p><h2 id="0x08-打包"><a href="#0x08-打包" class="headerlink" title="0x08 打包"></a>0x08 打包</h2><p>&emsp;&emsp;关于electron的打包，目前提供了两种打包方式。这里使用的是electron-package。可以参考我的另外一篇博客<a href="https://miss-me.github.io/2018/05/24/electron%E4%B8%8Evue%E5%AE%9E%E8%B7%B5%E5%88%9D%E4%BD%93%E9%AA%8C/" title="With a Title" target="_blank" rel="external">electron与vue实践初体验</a>。<br>&emsp;&emsp;这里只给出命令</p><h6 id="package-json-scripts"><a href="#package-json-scripts" class="headerlink" title="package.json/scripts"></a>package.json/scripts</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">electron-packager ./ DemoApps --overwrite --app-version=1.0.0 --platform=win32 --arch=x64 --out=../DemoApps --electron-version=1.4.13 --app-version=1.2.1 --icon=./public/img/icon/icon.ico</div></pre></td></tr></table></figure><p>&emsp;&emsp;需要注意的是，前面00x4中对sqlite3编译时用到了–arch=x64，所以对应的，这里的arch也要用x64，如果用别的可能会报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近帮隔壁实验室写个简单的展示页面，想着自己学了一下nodejs与react，刚好可以用来练练手。于是使用sqlite3数据库，用nodejs来写后端，react写前端的前后端分离方法，完成了一个小demo。这时候又要求用electron改成桌面版的应用，这简单啊，把react打包出来的index.html放到electron下做入口文件不就OK了。但是又涉及到跟对方的Java环境下的jar包通信的问题，对方的思路是通过前端点击按钮在数据库里存入一个字段，jar包所在环境通过不断轮询数据库去获取该字段确定是否启动手机应用拖数据库。前端在点击按钮后不断轮询数据库，看需要的数据是否更新，有数据更新就取回数据，并在前端展示。对于这个方案，我是拒绝的。回来跟师兄讨论了一下，确定了下几种方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>浏览器存储的三种方式------Cookie、localStorage和SessionStorage</title>
    <link href="http://yoursite.com/2018/12/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F-Cookie%E3%80%81localStorage%E5%92%8CSessionStorage/"/>
    <id>http://yoursite.com/2018/12/04/浏览器存储的三种方式-Cookie、localStorage和SessionStorage/</id>
    <published>2018-12-04T13:01:42.000Z</published>
    <updated>2019-08-09T06:51:19.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;这是不得不写的一篇。</p><a id="more"></a><h2 id="0x01-Cookie"><a href="#0x01-Cookie" class="headerlink" title="0x01 Cookie"></a>0x01 Cookie</h2><p>&emsp;&emsp;当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。<br>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</p><ul><li>当用户访问 web 页面时，用户名可以记录在 cookie 中。</li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li></ul><p>&emsp;&emsp;Cookie 以名/值对形式存储，<br>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=John Doe</div></pre></td></tr></table></figure><ol><li><p>创建Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=John Doe&quot;;</div><div class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;//为Cookie创建一个过期时间</div><div class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;//使用path参数告诉浏览器Cookie的路径</div></pre></td></tr></table></figure></li><li><p>读取Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = document.cookie;//以字符串的方式返回所有的cookie</div></pre></td></tr></table></figure></li><li><p>修改Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;//类似于创建Cookie，旧的Cookie将会被覆盖。</div></pre></td></tr></table></figure></li><li><p>删除Cookie</p></li></ol><p>&emsp;&emsp;设置express参数为以前的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;</div></pre></td></tr></table></figure></p><h2 id="0x02-localStorage"><a href="#0x02-localStorage" class="headerlink" title="0x02 localStorage"></a>0x02 localStorage</h2><p>&emsp;&emsp;localStorage是HTML5中新加入的特性，用来作为本地存储的，解决了cookie存储空间不足的问题。localStorage 类似于sessionStorage。区别在于:</p><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 针对一个 session 的数据存储,当页面被关闭时,数据存储在sessionStorage 会被清除 。</li></ul><p>&emsp;&emsp;localStorage的使用:</p><ol><li><p>清空localStorage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.clear()</div></pre></td></tr></table></figure></li><li><p>存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(&quot;name&quot;,&quot;Mark&quot;) </div><div class="line">localStorage.name = &quot;Mark&quot;;</div></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">localStorage.getItem(&quot;Mark&quot;)//读取保存在localStorage对象里名为name的变量的值</div><div class="line">localStorage.name //&quot;Mark&quot;</div><div class="line">localStorage.valueOf()//读取存储在localStorage上的所有数据</div><div class="line">localStorage.key(0) // 读取第一条数据的变量名(键值)</div></pre></td></tr></table></figure></li><li><p>删除某个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.removeItem(&quot;name&quot;); //undefined</div></pre></td></tr></table></figure></li><li><p>检查localStorage里是否保存某个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.hasOwnProperty(&apos;name&apos;) // true</div><div class="line">localStorage.hasOwnProperty(&apos;sex&apos;) // false</div></pre></td></tr></table></figure></li><li><p>将数组转为本地字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]; // [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</div><div class="line"></div><div class="line">localStorage.arr = arr //[&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</div><div class="line"></div><div class="line">localStorage.arr.toLocaleString(); // &quot;aa,bb,cc&quot;</div></pre></td></tr></table></figure></li><li><p>将JSON存储到localStorage里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var students = &#123;</div><div class="line">    xiaomin: &#123;</div><div class="line">        name: &quot;xiaoming&quot;,</div><div class="line">        grade: 1</div><div class="line">    &#125;,</div><div class="line">    teemo: &#123;</div><div class="line">        name: &quot;teemo&quot;,</div><div class="line">        grade: 3</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">students = JSON.stringify(students); //将JSON转为字符串存到变量里</div><div class="line"></div><div class="line">console.log(students);</div><div class="line"></div><div class="line">localStorage.setItem(&quot;students&quot;,students);//将变量存到localStorage里</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">var newStudents = localStorage.getItem(&quot;students&quot;);</div><div class="line"></div><div class="line">newStudents = JSON.parse(students); //转为JSON</div><div class="line"></div><div class="line">console.log(newStudents); // 打印出原先对象</div></pre></td></tr></table></figure></li></ol><h2 id="0x03-SessionStorage"><a href="#0x03-SessionStorage" class="headerlink" title="0x03 SessionStorage"></a>0x03 SessionStorage</h2><p>&emsp;&emsp;sessionStorage 是HTML5新增的一个会话存储对象，用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。在JavaScript语言中可通过 window.sessionStorage 或 sessionStorage 调用此对象。</p><p>&emsp;&emsp;sessionStorage的使用：</p><ol><li><p>存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.setItem(&apos;testKey&apos;,&apos;这是一个测试的value值&apos;);//采用setItem()方法存储</div><div class="line">sessionStorage[&apos;testKey&apos;] = &apos;这是一个测试的value值&apos;;//通过属性方式存储</div></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.getItem(&apos;testKey&apos;); //通过getItem()方法取值、</div><div class="line">sessionStorage[&apos;testKey&apos;]; // 通过属性方式取值</div></pre></td></tr></table></figure></li><li><p>存储Json对象</p></li></ol><p>&emsp;&emsp;sessionStorage也可存储Json对象：存储时，通过JSON.stringify()将对象转换为文本格式；读取时，通过JSON.parse()将文本转换回对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var userEntity = &#123;</div><div class="line">    name: &apos;tom&apos;,</div><div class="line">    age: 22</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">// 存储值：将对象转换为Json字符串</div><div class="line">sessionStorage.setItem(&apos;user&apos;, JSON.stringify(userEntity));</div><div class="line"></div><div class="line">// 取值时：把获取到的Json字符串转换回对象</div><div class="line">var userJsonStr = sessionStorage.getItem(&apos;user&apos;);</div><div class="line">userEntity = JSON.parse(userJsonStr);</div><div class="line">console.log(userEntity.name); // =&gt; tom</div></pre></td></tr></table></figure><h2 id="0x04-三者比较"><a href="#0x04-三者比较" class="headerlink" title="0x04 三者比较"></a>0x04 三者比较</h2><table><thead><tr><th>特性</th><th>localstorage</th><th>SessionStorage</th><th>Cookie</th></tr></thead><tbody><tr><td>存储空间</td><td>5M左右</td><td>5M左右</td><td>4k，不能超过20个</td></tr><tr><td>生命周期</td><td>永久</td><td>当前会话</td><td>在设置的过期时间之前一直有效</td></tr><tr><td>与服务器通信</td><td>仅在浏览器中保存，不参与和服务器的通话</td><td>仅在浏览器中保存，不参与和服务器的通话</td><td>携带在HTTP头中,使用过多会导致性能的问题</td></tr><tr><td>应用场景</td><td>常用于长期登录（判断用户是否已登录）</td><td>敏感账号的一次性登录</td><td>1.判断用户是否登陆过网站，以便下次登录时能够实现自动登录（记住密码）；2.保存上次登录的时间等信息；3.保存上次查看的页面；4.浏览计数</td></tr><tr><td>作用域</td><td>不同浏览器无法共享，相同浏览器的不同页面之间可以共享localStorage（页面属于相同域名和端口）</td><td>不同浏览器无法共享，不同页面或标签页间无法共享。（当一个标签页包含多个iframe标签且属于同源页面，可以共享）</td><td>Cookie的作用域为当前设置的域名及其子域名</td></tr><tr><td>接口</td><td>可以接受原生接口，也可以封装来对Object和Array有更好支持</td><td>可以接受原生接口，也可以封装来对Object和Array有更好支持</td><td>原生的Cookie接口不友好，需要自己封装setCookie，getCookie</td></tr></tbody></table><p>&emsp;&emsp;这三者的共同点是：都是保存在浏览器端，且同源的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是不得不写的一篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app中使用react-router-dom实现路由跳转</title>
    <link href="http://yoursite.com/2018/12/03/create-react-app%E4%B8%AD%E4%BD%BF%E7%94%A8react-router-dom%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/</id>
    <published>2018-12-03T13:37:24.000Z</published>
    <updated>2019-08-09T04:08:04.642Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/react.PNG" alt="react"></p><h2 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h2><p>&emsp;&emsp;说来很奇怪，之前用create-react-app写的web网页，结合ant desgin布局写的一个导航栏路由跳转。启动项目之后，首页有数据展示，点击导航栏可以跳转。但是！在整合了electron和react之后，启动项目之后首页空白，默认导航栏位置错误，要人为点击一下才有数据展示。这样用户体验真的真的很不友好。也是查了好久好久才解决了这个问题，于是决定写一篇博客，总结一下react-router-dom。<br><a id="more"></a></p><h2 id="0x01-react-router-dom的安装与使用"><a href="#0x01-react-router-dom的安装与使用" class="headerlink" title="0x01 react-router-dom的安装与使用"></a>0x01 react-router-dom的安装与使用</h2><p>&emsp;&emsp;react-router-dom的使用有两种方式。    </p><h3 id="1-1-使用npm"><a href="#1-1-使用npm" class="headerlink" title="1.1 使用npm"></a>1.1 使用npm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save react-router-dom</div></pre></td></tr></table></figure><ul><li>js文件中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// using ES6 modules</div><div class="line">import &#123; BrowserRouter, Route, Link &#125; from &apos;react-router-dom&apos;//推荐使用</div><div class="line"> </div><div class="line">// using CommonJS modules</div><div class="line">const BrowserRouter = require(&apos;react-router-dom&apos;).BrowserRouter</div><div class="line">const Route = require(&apos;react-router-dom&apos;).Route</div><div class="line">const Link = require(&apos;react-router-dom&apos;).Link</div></pre></td></tr></table></figure><h3 id="1-2-使用unpkg"><a href="#1-2-使用unpkg" class="headerlink" title="1.2 使用unpkg"></a>1.2 使用unpkg</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://unpkg.com/react-router-dom/umd/react-router-dom.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>&emsp;&emsp;注意的是，这种方式还需要引入react的一些核心文件和依赖文件。不推荐使用这种方式。</p><h2 id="0x02-react-router-dom与react-router的区别"><a href="#0x02-react-router-dom与react-router的区别" class="headerlink" title="0x02 react-router-dom与react-router的区别"></a>0x02 react-router-dom与react-router的区别</h2><ul><li>react-router: 实现了路由的核心功能</li><li>react-router-dom: 基于react-router，加入了在浏览器运行环境下的一些功能，例如：Link组件，会渲染一个a标签，Link组件源码a标签行; BrowserRouter和HashRouter组件，前者使用pushState和popState事件构建路由，后者使用window.location.hash和hashchange事件构建路由。</li></ul><p>&emsp;&emsp;接下来将介绍react-router-dom的一些组件</p><h2 id="0x03-react-router-dom的详细介绍"><a href="#0x03-react-router-dom的详细介绍" class="headerlink" title="0x03 react-router-dom的详细介绍"></a>0x03 react-router-dom的详细介绍</h2><h3 id="3-1-HashRouter和BrowserRouter"><a href="#3-1-HashRouter和BrowserRouter" class="headerlink" title="3.1 HashRouter和BrowserRouter"></a>3.1 HashRouter和BrowserRouter</h3><p>&emsp;&emsp;这两个API两个是路由的基本，需要将它们包裹在最外层，两者只需要选其一。      </p><h4 id="3-1-1-HashRouter"><a href="#3-1-1-HashRouter" class="headerlink" title="3.1.1 HashRouter"></a>3.1.1 HashRouter</h4><p>&emsp;&emsp;使用URL的哈希部分（即window.location.hash）的<router>来保持UI与URL同步。注意：哈希历史记录不支持location.key或location.state。如果你使用过react-router2或3或者vue-router，你经常会发现，在浏览器打开页面，其url中会有个#，例如localhost:3000/#，HashRouter就会出现这种情况，它是通过hash值来对路由进行控制。如果使用HashRouter，路由就会默认有这个#。</router></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;HashRouter&gt;</div><div class="line">    &lt;Route path=&quot;/&quot; componet=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/HashRouter&gt;</div></pre></td></tr></table></figure><h4 id="3-1-2-BrowserRouter"><a href="#3-1-2-BrowserRouter" class="headerlink" title="3.1.2 BrowserRouter"></a>3.1.2 BrowserRouter</h4><p>&emsp;&emsp;很多情况下不需要这个#，这时就需要用到BrowserRouter。它的原理是使用HTML5历史记录API（pushState，replaceState和popstate事件）的<router>来保持UI与URL的同步， 下面将主要结合它来讲解。如果文件放在服务器的二级目录下就可以使用它。</router></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter</div><div class="line">  basename=&quot;app&quot;</div><div class="line">  forceRefresh=true</div><div class="line">  getUserConfirmation=window.confirm</div><div class="line">  keyLength=9</div><div class="line">&gt;</div><div class="line">  &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure><ul><li>basename:string。所有位置的基本URL，如果应用程序是从服务器上的子目录提供的，则需要将其设置为子目录。 也就是说，上面例子中的Linkde解析后的href属性为 href=”#/app/about”。    </li><li>getUserConfirmation：function。用来确认导航功能。默认使用window.confirm。      </li><li>forceRefresh:bool。如果为true，则路由器将在页面导航中使用全页刷新。可以在不支持HTML5历史记录API的浏览器中使用此功能。      </li><li>keyLength:number。location.key的长度，默认为6。       </li><li>children:node。要呈现的单个子元素。       </li><li>例如”<a href="http://localhost:3000/app/&quot;,当主页前面是有一级目录app时，同样要显示主页的内容。这时需要配合Link使用。建议使用BrowserRouter。" target="_blank" rel="external">http://localhost:3000/app/&quot;,当主页前面是有一级目录app时，同样要显示主页的内容。这时需要配合Link使用。建议使用BrowserRouter。</a>      </li></ul><h3 id="3-2-Route"><a href="#3-2-Route" class="headerlink" title="3.2 Route"></a>3.2 Route</h3><p>&emsp;&emsp;Route用于控制路径对应显示的组件。常用的有exact、path以及component属性。    </p><ul><li>exact用于严格匹配，控制匹配到/路径时不会再继续向下匹配；</li><li>path标识指向的路由路径；</li><li>component表示要跳转的路径对应的显示组件；</li></ul><p>&emsp;&emsp;Route会有三大props，分别是location、history、match；     </p><h4 id="3-2-1-history"><a href="#3-2-1-history" class="headerlink" title="3.2.1 history"></a>3.2.1 history</h4><p>&emsp;&emsp;history 指的是 history 包，它是 React Router 的两个主要依赖之一（除了 React 本身），并且提供了几种不同的实现方式，用于在各种环境中管理 JavaScript 中的会话历史。<br>&emsp;&emsp;history分成以下三种     </p><ul><li>browser history - 针对 DOM 环境，用于支持 HTML5 history API 的浏览器</li><li>hash history - 针对 DOM 环境，用于传统的旧式（低版本） 浏览器</li><li>memory history - history 在内存上的实现，用于测试以及 React Native 等非 DOM 环境</li></ul><p>&emsp;&emsp;history对象具有以下属性和方法：    </p><ul><li>length - number 历史堆栈中的条目数</li><li>action - string 当前的导航操作（push、replace 或 pop）</li><li>location - object 当前访问的位置信息，见下文</li><li>push(path, [state]) - function 将一个新条目推入到历史堆栈中</li><li>replace(path, [state]) - function 替换历史堆栈中的当前条目</li><li>go(n) - function 将历史堆栈中的指针移动 n 个条目</li><li>goBack() - function 返回到上一个页面，相当于 go(-1)</li><li>goForward() - function 进入到下一个页面，相当于 go(1)</li><li>block(prompt) - function 阻止导航（请参阅 history 文档）</li></ul><p>&emsp;&emsp;history 对象是可变的。因此建议从 <route> 渲染组件时接收的属性中直接访问 location，而不是通过 history.location 进行访问。这样可以保证 React 在生命周期中的钩子函数正常执行。    </route></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps(nextProps) &#123;</div><div class="line">    // true</div><div class="line">    console.log(nextProps.location !== this.props.location);</div><div class="line">    </div><div class="line">    // false，因为 history 是可变的。</div><div class="line">    console.log(nextProps.history.location !== this.props.history.location);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-2-2-location"><a href="#3-2-2-location" class="headerlink" title="3.2.2 location"></a>3.2.2 location</h4><p>&emsp;&emsp;location 代表应用程序的位置。如当前的位置，将要去的位置，或是之前所在的位置。<br>&emsp;&emsp;location具有以下的属性：     </p><ul><li>pathname - string URL 路径</li><li>search - string URL 中的查询字符串</li><li>hash - string URL 中的 hash 片段</li><li>state - object 存储至 location 中的额外状态数据，仅在 browser history 和 memory history 中有效。<br>&emsp;&emsp;Router 将在以下几个地方提供 location 对象：     </li><li>在 Route component 中，以 this.props.location 方式获取</li><li>在 Route render 中，以 ({ location }) =&gt; () 方式获取</li><li>在 Route children 中，以 ({ location }) =&gt; () 方式获取</li><li>在 withRouter 中，以 this.props.location 方式获取</li></ul><p>&emsp;&emsp;location 对象永远不会发生改变，因此可以在生命周期钩子函数中使用 location 对象来查看当前访问地址是否发生改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps(nextProps) &#123;</div><div class="line">  if (nextProps.location !== this.props.location) &#123;</div><div class="line">    // 已经跳转了！</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-2-3-match"><a href="#3-2-3-match" class="headerlink" title="3.2.3 match"></a>3.2.3 match</h4><p>&emsp;&emsp;Match是在使用Router之后被放入props中的一个属性，在class创建的组件中我们需要通过this.props.match来获取match之中的信息。match中包含的信息如下。</p><ul><li>params: object 路径参数，通过解析 URL 中的动态部分获得键值对 </li><li>isExact: bool 为 true 时，整个 URL 都需要匹配 </li><li>path: string 用来匹配的路径模式，用于创建嵌套的 Route </li><li>url: string URL 匹配的部分，用于嵌套的 Link</li></ul><p>&emsp;&emsp;在获取id时经常使用match。    </p><h3 id="3-3-Link和NavLink"><a href="#3-3-Link和NavLink" class="headerlink" title="3.3 Link和NavLink"></a>3.3 Link和NavLink</h3><p>&emsp;&emsp;两者都可以控制路由跳转，不同点是NavLink的api更多。    </p><h4 id="3-3-1-Link"><a href="#3-3-1-Link" class="headerlink" title="3.3.1 Link"></a>3.3.1 Link</h4><p>&emsp;&emsp;主要api是to，to可以接受string或者一个object，来控制url，表示路由要跳转的路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/home&quot; /&gt;</div><div class="line">&lt;Link to=&#123;&#123;</div><div class="line">    pathname: &apos;/home&apos;,</div><div class="line">    search: &apos;?page=1&apos;,</div><div class="line">    hash: &apos;#the-hash&apos;,</div><div class="line">    state: &#123; fromDashboard: true &#125;</div><div class="line">&#125;&#125; /&gt;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;这时点击Link就会跳转到home页面。    </p><h4 id="3-3-2-NavLink："><a href="#3-3-2-NavLink：" class="headerlink" title="3.3.2 NavLink："></a>3.3.2 NavLink：</h4><p>&emsp;&emsp;它可以为当前选中的路由设置类名、样式以及回调函数等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;NavLink exact activeClassName=&quot;selected&quot; to=&quot;/home/1&quot;&gt;首页&lt;/NavLink&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;Route path=&quot;/home/:1&quot; componet=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;exact用于严格匹配，匹配到/则不会继续向下匹配；to则是控制跳转的路径，activeClassName是选中状态的类名，可以为其添加样式。我们通过在/home后面添加1来向路由中传递信息，这结合了上面Route中的/second/:id，线面的1234内容显示需要用到match。    </p><h3 id="3-4-Switch"><a href="#3-4-Switch" class="headerlink" title="3.4 Switch"></a>3.4 Switch</h3><p>&emsp;&emsp;Switch常常会用来包裹Route，它里面不能放其他元素，表示一次只能显示一个路由。用于渲染与路径匹配的第一个子 <route> 或 <redirect>。但与<route>不同的是，<switch> 只会渲染一个路由。而定义一系列 <route> 时，所有被匹配到的 <route> 将都会在页面被渲染出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Route exact path=&quot;/&quot; component=&#123;Service&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div></pre></td></tr></table></figure></route></route></switch></route></redirect></route></p><p>&emsp;&emsp;像这种情况，exact匹配到’/‘就不会再向下匹配，当url为”<a href="http://localhost:3000/&quot;时,两个页面都会被匹配到；（匹配不到页面）Switch有两个属性" target="_blank" rel="external">http://localhost:3000/&quot;时,两个页面都会被匹配到；（匹配不到页面）Switch有两个属性</a>    </p><ul><li>location: object。用于匹配子元素而不是当前历史位置（通常是当前的浏览器 URL）的 location 对象。</li><li>children: node。<switch> 的子元素应该是 <route> 或 <redirect>。只有第一个匹配当前路径的组件会被渲染。当<switch> 中包含 <redirect> 时，可以使用任何 <route> 拥有的路径匹配属性：path、exact 和 strict。from 只是 path 的别名。     </route></redirect></switch></redirect></route></switch></li></ul><h3 id="3-5-Redirect"><a href="#3-5-Redirect" class="headerlink" title="3.5 Redirect"></a>3.5 Redirect</h3><p>&emsp;&emsp;Redirect有四个属性    </p><ul><li><p>to:string。链接到的路径名或位置。</p></li><li><p>to:object。要链接的位置。</p></li><li><p>push:bool。当为true时，重定向会将新条目推入历史记录，而不是替换当前条目</p></li><li><p>from:string。要重定向的路径名。用于在<switch>内部渲染<redirect>时匹配位置。</redirect></switch></p></li></ul><h2 id="0x04-结合小例子的讲解"><a href="#0x04-结合小例子的讲解" class="headerlink" title="0x04 结合小例子的讲解"></a>0x04 结合小例子的讲解</h2><p>&emsp;&emsp;在这个小例子中，<browserrouter>被放在最外层；<browserrouter>的子节点是<switch>，表示当前只会渲染一个路由，如果不使用<switch>的话，两个组件将会以同时渲染在一个页面上；再接下来是<route>，exact表示精确匹配到’’，只要匹配到’/‘就不会再往下匹配了，这时候就会出现将homepage和device两个页面都匹配到，这种情况下，如果不加Switch，就会按照先后顺序将两个组件都显示到同一个页面上；在加上switch的情况下，也会因为匹配到两个路径中有’/‘的组件而显示空白，这个时候，就需要加上Redirect，只显示第一个被匹配到的路径对应组件的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;Menu.Item key=&quot;1&quot;&gt;</div><div class="line">    &lt;Link to=&quot;/service&quot;&gt;设备&lt;/Link&gt;</div><div class="line">&lt;/Menu.Item&gt;</div><div class="line">&lt;Menu.Item key=&quot;2&quot;&gt;</div><div class="line">    &lt;Link to=&quot;/homepage&quot;&gt;取证&lt;/Link&gt;</div><div class="line">&lt;/Menu.Item&gt;</div><div class="line">&lt;BrowserRouter&gt;</div><div class="line">    </div><div class="line">    &lt;Switch&gt;</div><div class="line">     </div><div class="line">        &lt;Route exact path=&quot;/&quot; component=&#123;Device&#125;&gt;</div><div class="line">            </div><div class="line">        &lt;/Route&gt;</div><div class="line">        &lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div><div class="line">        &lt;Redirect to=&quot;/&quot; /&gt;</div><div class="line">    &lt;/Switch&gt;</div><div class="line">           </div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></route></switch></switch></browserrouter></browserrouter></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/react.PNG&quot; alt=&quot;react&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;说来很奇怪，之前用create-react-app写的web网页，结合ant desgin布局写的一个导航栏路由跳转。启动项目之后，首页有数据展示，点击导航栏可以跳转。但是！在整合了electron和react之后，启动项目之后首页空白，默认导航栏位置错误，要人为点击一下才有数据展示。这样用户体验真的真的很不友好。也是查了好久好久才解决了这个问题，于是决定写一篇博客，总结一下react-router-dom。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>用setTimeout实现for循环中的计时器</title>
    <link href="http://yoursite.com/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2018/09/01/用setTimeout实现for循环中的计时器/</id>
    <published>2018-09-01T01:56:17.000Z</published>
    <updated>2019-08-09T06:54:49.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp;要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.</p><a id="more"></a><h2 id="00x1-基本思路"><a href="#00x1-基本思路" class="headerlink" title="00x1 基本思路"></a>00x1 基本思路</h2><p>&emsp;&emsp;要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">// setTimeout(function()&#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">// &#125;,2000)</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以在控制台看到紧跟着分别输出了小于10的i的值。但是加上setTimeout函数后，控制台的内容却都变成了10。<br>&emsp;&emsp;解释造成这种差别的原因，我们要从JavaScript的执行机制开始说起。</p><h2 id="00x2-js执行机制与作用域链"><a href="#00x2-js执行机制与作用域链" class="headerlink" title="00x2 js执行机制与作用域链"></a>00x2 js执行机制与作用域链</h2><p>&emsp;&emsp;首先，JavaScript是单线程环境，代码从上到下依次执行。这种执行方这也被称作是“同步执行”。（同一时间JavaScript只能执行一段代码，如果这段代码要执行很长时间，那么之后的代码只能尽情地等待它执行完才能有机会执行）。<br>&emsp;&emsp;但JavaScript中引进了异步机制。于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有主线程上的任务执行完了，才通知”任务队列”，任务队列中的任务才会进入主线程执行。</p><p>&emsp;&emsp;在上面的代码中，for循环是同步代码，setTimeout是异步代码。遇到这种既包含同步又包含异步的情况，JavaScript依旧按照从上到下的顺序执行同步代码，并将异步代码插入任务队列。setTimeout的第二个参数则是把执行代码（console.log(i)）添加到任务队列需等待的毫秒数，但等待的时间是相对主程序完毕的时间计算的，也就是说，在执行到setTimeout函数时会等待一段时间，再将当前任务插入任务队列。<br>&emsp;&emsp;最后，当执行完同步代码，js引擎就会去执行任务队列中的异步代码。这时候任务队列中就会有十个console.log(i)。我们知道，在每次循环中将setTimeout里面的代码“console.log(i)”放入任务队列时，i的值都是不一样的。但JavaScript引擎开始执行任务队列中的代码时，会开始在当前的作用域中开始找变量i，但是当前作用域中并没有对变量i进行定义。这个时候就会在创造该函数的作用域中寻找i。创建该函数的作用域就是全局作用域，这个时候就找到了for循环中的变量i，这时的i是全局变量，并且值已经确定：10。十个console.log“共享”i的值。这就是作用域链的问题。<br>&emsp;&emsp;为了解决以上两个问题，可以使用let或者闭包或者箭头函数。</p><h2 id="00x3-解决方案一——闭包"><a href="#00x3-解决方案一——闭包" class="headerlink" title="00x3 解决方案一——闭包"></a>00x3 解决方案一——闭包</h2><p>&emsp;&emsp;终于来到了本文中最重要的一部分。什么是闭包？！<br>&emsp;&emsp;闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">    for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">    (function(j)&#123;//闭包</div><div class="line">    setTimeout(function()&#123;</div><div class="line">    console.log(j);//分别输出i的值</div><div class="line">    &#125;,4000)</div><div class="line">    &#125;)(i);//闭包</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;代码中注释为“闭包”的两行代码就是一个典型的闭包。我们在函数内部创建了一个函数，并将变量i以函数参数形式传递给内层函数中变量j，j就是这个函数中的局部变量，每次i传入的值不同，局部变量j的值也不同。</p><h2 id="00x4-解决方案二——let"><a href="#00x4-解决方案二——let" class="headerlink" title="00x4 解决方案二——let"></a>00x4 解决方案二——let</h2><p>&emsp;&emsp;如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">setTimeout(function()&#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">&#125;,2000)</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><h2 id="00x5-解决方案三——箭头函数"><a href="#00x5-解决方案三——箭头函数" class="headerlink" title="00x5 解决方案三——箭头函数"></a>00x5 解决方案三——箭头函数</h2><p>&emsp;&emsp;如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">&#125;,2000)</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><h2 id="00x5-间隔输出"><a href="#00x5-间隔输出" class="headerlink" title="00x5 间隔输出"></a>00x5 间隔输出</h2><p>&emsp;&emsp;在实际查看时，控制台并不是一开始就输出i的值，但是也并没有按照预期每隔一段时间输出i的值，问题就出现setTimeout等待的时间上，每次都是2000ms。在任务队列里，setTimeout按照异步的顺序执行，按照放入任务队列的顺序依次开始执行，所以几乎同时打印出值。也就是说，在异步的情况下，执行任务队列里的代码(console.log(i))按照先后顺序执行，没有明显的时间差。可以利用传入的i的值来设置这种时间差。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">(function(j)&#123;//闭包</div><div class="line">setTimeout(function()&#123;</div><div class="line">console.log(j);//分别输出i的值</div><div class="line">&#125;,2000*j)</div><div class="line">&#125;)(i);//闭包</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;这样等待的时间就会分别变成2000<em>1,2000</em>2,2000*3……且传入i的值就立即执行，所以每次打印都会有2000ms的时间差。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.&lt;/p&gt;
    
    </summary>
    
    
      <category term="setTimeout" scheme="http://yoursite.com/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>解决Vue打包中 .ico小图标不显示的问题</title>
    <link href="http://yoursite.com/2018/08/09/%E8%A7%A3%E5%86%B3Vue%E6%89%93%E5%8C%85%E4%B8%AD-ico%E5%B0%8F%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/08/09/解决Vue打包中-ico小图标不显示的问题/</id>
    <published>2018-08-09T07:00:56.000Z</published>
    <updated>2019-08-09T08:24:35.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp;Vue项目打包中遇到这个问题，经过查询得到了解决。故此记录。</p><a id="more"></a><h2 id="00x1-图标检查与缓存检查"><a href="#00x1-图标检查与缓存检查" class="headerlink" title="00x1 图标检查与缓存检查"></a>00x1 图标检查与缓存检查</h2><h3 id="1-检查图标。"><a href="#1-检查图标。" class="headerlink" title="1. 检查图标。"></a>1. 检查图标。</h3><p>&emsp;&emsp;确认图标是可以打开的。</p><h3 id="2-缓存问题"><a href="#2-缓存问题" class="headerlink" title="2. 缓存问题"></a>2. 缓存问题</h3><p>&emsp;&emsp;图标不显示也有可能是缓存问题，手动强制刷新一下。</p><h2 id="00x2-通过配置webpack解决"><a href="#00x2-通过配置webpack解决" class="headerlink" title="00x2 通过配置webpack解决"></a>00x2 通过配置webpack解决</h2><p>&emsp;&emsp;HtmlWebpackPlugin是webpack的Plugin提供的一个插件，该插件的基本作用就是生成HTML，主要有两个作用：</p><ul><li><p>为html文件中引入的外部资源如<code>script</code>、<code>link</code>动态添加每次compile后的hash，防止引用缓存的外部文件问题。</p></li><li><p>可以生成创建html入口文件，比如单页面可以生成一个html文件入口，配置<strong>N</strong>个<code>html-webpack-plugin</code>可以生成<strong>N</strong>个页面入口。</p></li></ul><p>&emsp;&emsp;通过在其配置中加入favicon，在生成HTML文件的时候，为小图标指定资源的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">new HtmlWebpackPlugin(&#123;</div><div class="line">   filename: &apos;index.html&apos;,</div><div class="line">   template: &apos;index.html&apos;,</div><div class="line">   inject: true,</div><div class="line">   favicon: &apos;./favicon.ico&apos;</div><div class="line">  &#125;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;修改完文件要重新npm run dev才会有效果。</p><h2 id="00x3-根据打包后的图片路径配置index-html中-ico图标路径"><a href="#00x3-根据打包后的图片路径配置index-html中-ico图标路径" class="headerlink" title="00x3 根据打包后的图片路径配置index.html中.ico图标路径"></a>00x3 根据打包后的图片路径配置index.html中.ico图标路径</h2><p>&emsp;&emsp;图标不显示也可能是打包后路径的路径与index.html中引入.ico的路径不一致导致。可以在打包后的文件中找到.ico文件，再在index.html中修改引入的路径。也可以将.ico文件放入指定目录下，再修改index.html中引入的路径。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Vue项目打包中遇到这个问题，经过查询得到了解决。故此记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="问题解决" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>事件、事件代理、事件冒泡</title>
    <link href="http://yoursite.com/2018/07/02/%E4%BA%8B%E4%BB%B6%E3%80%81%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E3%80%81%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1/"/>
    <id>http://yoursite.com/2018/07/02/事件、事件代理、事件冒泡/</id>
    <published>2018-07-02T07:08:38.000Z</published>
    <updated>2019-08-09T07:10:20.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp;这是一篇总结博客。</p><a id="more"></a><h2 id="00x1-事件与事件流"><a href="#00x1-事件与事件流" class="headerlink" title="00x1 事件与事件流"></a>00x1 事件与事件流</h2><ol><li>事件：HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。</li><li>事件流：事件流描述的是从页面中接受事件的顺序。事件发生时会在元素节点与根节点之间按照特定的顺序传播，路径所经过的所有节点都会收到该事件，这个传播过程即DOM事件流。事件传播的顺序对应浏览器的两种事件流模型：捕获型事件流和冒泡型事件流。<ul><li>冒泡型事件流：事件的传播是从最特定的事件目标到最不特定的事件目标。即从DOM树的叶子到根。</li><li>捕获型事件流：事件的传播是从最不特定的事件目标到最特定的事件目标。即从DOM树的根到叶子。<br><img src="/2018/07/02/事件、事件代理、事件冒泡/eventflash.PNG" alt="image"></li></ul></li></ol><p>&emsp;&emsp;“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。首先发生的是事件捕获，然后处于目标阶段，最后才事件冒泡。</p><h2 id="00x2-事件冒泡"><a href="#00x2-事件冒泡" class="headerlink" title="00x2 事件冒泡"></a>00x2 事件冒泡</h2><p>&emsp;&emsp;IE在处理事件流的时候，事件的传播是按照从最特定的事件目标到最不特定的事件目标(document对象，有的浏览器是window)的顺序触发。这就是事件冒泡。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;test&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;content&quot;&gt;</div><div class="line">        &lt;button id=&quot;btn&quot;&gt;&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;在上面的代码中，如果点击了按钮“&lt; button &gt;”节点，那么接下来，“&lt; div &gt;”、“&lt; body &gt;”、“&lt; html &gt;”、document会按照先后顺序依次收到点击事件。<br>&emsp;&emsp;事件冒泡仅仅传递的是事件触发，也就是说，当点击按钮button的时候仅仅触发了div、body、html、document的点击事件，并没有把自己绑定的函数传递给父级。父级的执行情况，还是取决于自己所绑定的函数。在父级没有绑定函数的情况下，并没有什么影响。但是在父级绑定了函数的情况下，冒泡就会带来一些困扰。这个时候就需要取消事件冒泡。</p><ul><li>event.stopPropagation()：阻止事件的冒泡，不让事件向documen上蔓延，但是默认事件仍然会执行，当使用这个方法的时候，如果点击一个连接，这个连接仍然会被打开。该方法只阻止一次事件冒泡并且IE不支持此方法。IE取消事件冒泡要用e.cancelBubble=true。</li><li>event.preventDefault()方法：阻止默认事件，调用此方法时，链接不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素。</li><li>return false ：这个方法比较暴力，会同时阻止事件冒泡和默认事件；写上此代码，连接不会被打开，事件也不会传递到上一层的父元素；可以理解为return false就等于同时调用了event.stopPropagation()和event.preventDefault()。</li></ul><h2 id="00x3-事件代理"><a href="#00x3-事件代理" class="headerlink" title="00x3 事件代理"></a>00x3 事件代理</h2><p>&emsp;&emsp;事件代理还可以叫事件委托，指的是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件。<br>&emsp;&emsp;比如在一个页面中，有100个button，每个button都有一个点击事件。那要怎么做呢，首先想到的是，我们可以给每个button onclick绑定点击事件，那这样就需要给每个button写一个onclick来进行绑定，增加了代码的重复度。再高级一点的方法呢，我们可以用dom来处理事件，使用for循环的方法，遍历所有的button，使用dom给他们添加点击事件。<br>&emsp;&emsp;但是这个方式也不是最完美的，因为在JavaScript中，添加到页面上的事件处理程序数量会直接关系到页面的整体运行性能。for循环中需要不断地与dom节点进行交互，访问dom的次数越多，引起浏览器重绘与重排的次数也越多，会延长整个页面的交互时间。性能优化的主要思想之一就是减少DOM操作。这个时候就可以利用事件代理，将所有操作放入js程序中，与DOM只交互一次，大大减少了与DOM的交互次数，提高了性能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;test&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;content&quot;&gt;</div><div class="line">        &lt;button id=&quot;btn&quot;&gt;&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;事件代理是利用事件冒泡实现的。上面我们已经讲过，事件冒泡就是事件从最深的节点开始，然后逐步向上传播事件。当我们给button添加一个点击事件，这个事件会一层一层往外执行，div、body、html、document会一次收到这个事件。事件代理就是采用父级的div来做事件处理，由于冒泡原理，点击button事件会被冒泡到button的父级元素div上，如果div上添加的有点击事件，这时点击事件就会被触发；当然，点击div的时候，事件也是会触发的。那如果我们想让事件代理的效果跟直接给节点绑定的效果一样，需要怎么做呢？<br>&emsp;&emsp;Event对象提供了一个target属性，可以返回事件的目标节点，成为事件源。我们可以将target理解为当前事件要操作的DOM，当然这并不是在真正地操作DOM。标准浏览器使用ev.target，IE浏览器用event.srcElement。此时只是获取了当前节点的位置，要想知道节点的名称，需要用nodeName来获取节点具体的标签名。需要注意的是，nodeName返回的值是大写的，习惯上把这个值转成小写的再使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.onload = function()&#123;</div><div class="line">　　var div = document.getElementById(&quot;content&quot;);</div><div class="line">　　div.onclick = function(ev)&#123;</div><div class="line">　　　　var ev = ev || window.event;</div><div class="line">　　　　var target = ev.target || ev.srcElement;</div><div class="line">　　　　if(target.nodeName.toLowerCase() == &apos;button&apos;)&#123;</div><div class="line">　 　　　　　　alert(123);</div><div class="line">　　　　　　　  alert(target.innerHTML);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;经过这样修改后就只有在点击button的时候才会触发事件了，且每次只用执行一次DOM操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是一篇总结博客。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Electron与vue实践初体验</title>
    <link href="http://yoursite.com/2018/05/24/electron%E4%B8%8Evue%E5%AE%9E%E8%B7%B5%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/05/24/electron与vue实践初体验/</id>
    <published>2018-05-24T09:40:08.000Z</published>
    <updated>2019-08-09T04:09:22.079Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/05/24/electron与vue实践初体验/electron.png" alt="electron"></p><h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp;最近接触了electronjs，官方文档上描述介绍Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，用于构建桌面应用。在开始构建electron或vue之前，默认已经安装了nodejs和git。npm镜像资源索取代理地址在国外，安装速度很慢，这里使用了淘宝提供的镜像cnpm来进行安装。     </p><a id="more"></a><p>&emsp;&emsp;使用下面的命令来安装cnpm。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org//安装cnpm</div></pre></td></tr></table></figure></p><h2 id="00x1-构建electron"><a href="#00x1-构建electron" class="headerlink" title="00x1 构建electron"></a>00x1 构建electron</h2><ul><li>首先，打开命令行，使用cnpm安装electron。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cnpm install -g electron//在全局安装</div><div class="line">cnpm install --save-dev electron//在当前目录安装</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;这里使用了全局安装方式：<br><img src="/2018/05/24/electron与vue实践初体验/cnpm-install-g-electron.PNG" alt="mockjs"></p><ul><li>打开git，在github上下载electron-quick-start。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/electron/electron-quick-start</div><div class="line">cd electron-quick-start</div><div class="line">cnpm install //安装各种依赖</div><div class="line">cnpm run start //打开桌面应用</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;可以看到一个桌面应用被打开。<br><img src="/2018/05/24/electron与vue实践初体验/helloword.PNG" alt="mockjs"></p><h2 id="00x2-在electron中引入vue"><a href="#00x2-在electron中引入vue" class="headerlink" title="00x2 在electron中引入vue"></a>00x2 在electron中引入vue</h2><ul><li><p>新建一个vue项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cnpm install -g vue-cli//全局安装vue-cli脚手架</div><div class="line">vue init webpack my-vue(项目名字)//初始化一个项目</div><div class="line">cd my-vue</div><div class="line">cnpm install //安装各种依赖</div><div class="line">npm run dev //打开这个项目</div></pre></td></tr></table></figure></li><li><p>vue打包<br>&emsp;&emsp;打开vue项目中config文件夹下的index.js文件，确认其中的assetsPublicPath修改为相对路径 ./。注意是build配置下的assetsPublicPath。</p></li></ul><p>&emsp;&emsp;运行npm run build对vue项目进行打包，在dist文件夹中生成打包文件。将dist文件夹中生成的static文件夹和index.html放入electron-quick-start下，替换掉electron-quick-start的index.html。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;再次在electron-quick-start目录中运行npm run start</p><h2 id="00x3-打包"><a href="#00x3-打包" class="headerlink" title="00x3 打包"></a>00x3 打包</h2><ul><li><p>在electron-quick-start下安装打包插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g electron-packager//采用全局安装</div></pre></td></tr></table></figure></li><li><p>使用electron-packager来进行打包，可以直接使用打包命令</p></li></ul><p>electron-packager <location of="" project=""> <name of="" project=""> <platform> <architecture> <electronversion> <optional options=""></optional></electronversion></architecture></platform></name></location></p><p>&emsp;&emsp;这里的参数:</p><ul><li>location of project：项目所在路径 </li><li>name of project：打包的项目名字 </li><li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 Linux） </li><li>architecture：决定了使用 x86 还是 x64 还是两个架构都用 </li><li>electron version：electron 的版本 </li><li>optional options：可选选项</li></ul><p>&emsp;&emsp;但是这个命令很长，每次都这样输入会比较麻烦；</p><ul><li><p>可以在package.json下的script下这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;electron_build&quot;: &quot;electron-packager ./ --platform=win32 --arch=x64 --icon=./app/img/electron.ico --overwrite&quot;</div></pre></td></tr></table></figure></li><li><p>打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run electron_build</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;运行打包命令就会生成一个文件夹，在里面就能找到打包生成的.exe文件。双击就能运行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/05/24/electron与vue实践初体验/electron.png&quot; alt=&quot;electron&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近接触了electronjs，官方文档上描述介绍Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，用于构建桌面应用。在开始构建electron或vue之前，默认已经安装了nodejs和git。npm镜像资源索取代理地址在国外，安装速度很慢，这里使用了淘宝提供的镜像cnpm来进行安装。     &lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Electron" scheme="http://yoursite.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>JSON.stringify()与JSON.parse()的用法</title>
    <link href="http://yoursite.com/2018/04/04/JSON-stringify-%E4%B8%8EJSON-parse-%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/04/JSON-stringify-与JSON-parse-的用法/</id>
    <published>2018-04-04T06:11:32.000Z</published>
    <updated>2019-08-09T08:23:50.512Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x0-写在前面"><a href="#00x0-写在前面" class="headerlink" title="00x0 写在前面"></a>00x0 写在前面</h2><p>&emsp;&emsp;在使用ajax请求数据的过程中，经常需要用到JSON的两个方法：</p><p>&emsp;&emsp;JSON.stringify()和JSON.parse()两个方法来处理数据。那什么时候需要用到JSON.stringify()，什么时候需要用到JSON.parse()呢？马上就细细道来。</p><a id="more"></a><h2 id="00x1-JSON-stringify"><a href="#00x1-JSON-stringify" class="headerlink" title="00x1 JSON.stringify()"></a>00x1 JSON.stringify()</h2><p>&emsp;&emsp;JSON.stringify()用于将 JavaScript对象序列化为JSON字符串</p><h3 id="1-1-序列化对象"><a href="#1-1-序列化对象" class="headerlink" title="1.1 序列化对象"></a>1.1 序列化对象</h3><p>&emsp;&emsp;JSON.stringify()用于将 JavaScript对象序列化为JSON字符串。第一个参数是要序列化的<strong>JavaScript对象</strong>，此外还可以接收两个参数，指定以不同的方式序列化JavaScript对象。</p><h3 id="1-2-过滤器"><a href="#1-2-过滤器" class="headerlink" title="1.2 过滤器"></a>1.2 过滤器</h3><p>&emsp;&emsp;第二个参数是过滤器，可以是数组、函数。如果过滤参数是数组，JSON.stringify()的结果中将只会包含数组中列出的属性。</p><h4 id="1-过滤器是数组"><a href="#1-过滤器是数组" class="headerlink" title="1 过滤器是数组"></a>1 过滤器是数组</h4><p>&emsp;&emsp;如下所示，JSON.stringify()的第二个参数是一个数组，最终得到的result中之后包含”name”和”age”两个属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var json = &#123;</div><div class="line">    &quot;name&quot;: &quot;Bob&quot;,</div><div class="line">    &quot;age&quot;: 19,</div><div class="line">    &quot;job&quot;: &quot;student&quot;</div><div class="line">&#125;</div><div class="line">var result = JSON.stringify(json, [&quot;name&quot;, &quot;age&quot;]);</div></pre></td></tr></table></figure><h4 id="2-过滤器是函数（replacer）"><a href="#2-过滤器是函数（replacer）" class="headerlink" title="2 过滤器是函数（replacer）"></a>2 过滤器是函数（replacer）</h4><p>&emsp;&emsp;函数要接收两个参数，属性（键）名和属性值。根据属性（键）名可以知道应该如何处理要序列化的对象中的属性。属性名只能是字符串，如果值不是键值对儿结构的值时，键名可以是空字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var json = &#123;</div><div class="line"> &quot;name&quot;: &quot;Bob&quot;,</div><div class="line"> &quot;age&quot;: 19,</div><div class="line"> &quot;job&quot;: &quot;student&quot;</div><div class="line">&#125;</div><div class="line">var result = JSON.stringify(json, function(key, value)&#123;</div><div class="line">    //do something；</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="1-3-字符串缩进"><a href="#1-3-字符串缩进" class="headerlink" title="1.3 字符串缩进"></a>1.3 字符串缩进</h3><p>&emsp;&emsp;第三个参数是一个选项，表示是否在JSON字符串中保留缩进，用于控制结果中的缩进和空白符。</p><h4 id="1-3-1-参数是数字"><a href="#1-3-1-参数是数字" class="headerlink" title="1.3.1 参数是数字"></a>1.3.1 参数是数字</h4><p>&emsp;&emsp;如果是数字的话，表示的是每个级别缩进的空格数。</p><p>如下所示，第三个参数是4，表明每一行缩进4个空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var json = &#123;</div><div class="line"> &quot;name&quot;: &quot;Bob&quot;,</div><div class="line"> &quot;age&quot;: 19,</div><div class="line"> &quot;job&quot;: &quot;student&quot;</div><div class="line">&#125;</div><div class="line">var result = JSON.stringify(json, null, 4);</div></pre></td></tr></table></figure><p>&emsp;&emsp;最大空格数是10，所有大于10的都会自动转换为10.</p><h4 id="1-3-2-参数是字符串"><a href="#1-3-2-参数是字符串" class="headerlink" title="1.3.2 参数是字符串"></a>1.3.2 参数是字符串</h4><p>&emsp;&emsp;如果缩进参数是字符串，则这个字符串在JSON字符串中被用作缩进字符（代替空格）。常将缩进字符设置为制表符，或者两个短划线之类的任意字符。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var result = JSON.stringify(json, null, &apos;- -&apos;);</div></pre></td></tr></table></figure><p>&emsp;&emsp;缩进字符串不能超过10个字符长。如果字符串超过了10个，结果中将只出现10个字符。</p><h3 id="1-4-使用场景"><a href="#1-4-使用场景" class="headerlink" title="1.4 使用场景"></a>1.4 使用场景</h3><h4 id="1-4-1-格式化对象"><a href="#1-4-1-格式化对象" class="headerlink" title="1.4.1 格式化对象"></a>1.4.1 格式化对象</h4><p>&emsp;&emsp;格式化一些复杂的对象，这些对象往往对象内嵌套对象，直接看起来并不直观。</p><h4 id="1-4-2-AJAX请求中序列化传值"><a href="#1-4-2-AJAX请求中序列化传值" class="headerlink" title="1.4.2 AJAX请求中序列化传值"></a>1.4.2 AJAX请求中序列化传值</h4><p>&emsp;&emsp;在使用AJAX的POST方法向服务器传值时，使用JSON.stringify()进行参数的序列化。</p><h4 id="1-4-3-判断数组是否包含某对象，或判断对象是否相等"><a href="#1-4-3-判断数组是否包含某对象，或判断对象是否相等" class="headerlink" title="1.4.3 判断数组是否包含某对象，或判断对象是否相等"></a>1.4.3 判断数组是否包含某对象，或判断对象是否相等</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//判断数组是否包含某对象</div><div class="line"></div><div class="line">let data = [</div><div class="line"></div><div class="line">    &#123;name:&apos;June&apos;&#125;,</div><div class="line"></div><div class="line">    &#123;name:&apos;Bob&apos;&#125;,</div><div class="line"></div><div class="line">    &#123;name:&apos;Susan&apos;&#125;,</div><div class="line"></div><div class="line">    ],</div><div class="line"></div><div class="line">    val = &#123;name:&apos;Susan&apos;&#125;;</div><div class="line"></div><div class="line">JSON.stringify(data).indexOf(JSON.stringify(val)) !== -1;//true</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//判断两数组/对象是否相等</div><div class="line"></div><div class="line">let a = [1,2,3],</div><div class="line"></div><div class="line">    b = [1,2,3];</div><div class="line"></div><div class="line">JSON.stringify(a) === JSON.stringify(b);//true</div></pre></td></tr></table></figure><h4 id="1-4-4-让localStorage-sessionStorage可以存储对象"><a href="#1-4-4-让localStorage-sessionStorage可以存储对象" class="headerlink" title="1.4.4 让localStorage/sessionStorage可以存储对象"></a>1.4.4 让localStorage/sessionStorage可以存储对象</h4><p>&emsp;&emsp;localStorage/sessionStorage默认只能存储字符串，而实际开发中，我们往往需要存储的数据多为对象类型，因此可以在存储时利用JSON.stringify()将对象转为字符串，而在取缓存时，只需配合json.parse()转回对象即可。</p><h2 id="00x2-JSON-parse"><a href="#00x2-JSON-parse" class="headerlink" title="00x2 JSON.parse()"></a>00x2 JSON.parse()</h2><p>&emsp;&emsp;JSON.parse()用于将 JSON字符串解析为原生的JavaScript值。</p><h3 id="2-1-解析对象"><a href="#2-1-解析对象" class="headerlink" title="2.1 解析对象"></a>2.1 解析对象</h3><p>&emsp;&emsp;JSON.parse()的第一个参数是要进行解析的JavaScript对象。</p><p>需要注意的是，</p><ul><li><p>JSON.parse() 不允许用逗号作为结尾</p></li><li><p>单引号与双引号</p></li></ul><p>使用JSON.parse()方法来转化成json对象的数据格式的话，需要注意的是被转化的字符串里面的属性要使用引号，并且总体是<strong>单引号套双引号</strong>的方式。否则会报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//正确写法</div><div class="line">var str = &apos;&#123;&quot;name&quot;:&quot;悟空&quot;,&quot;age&quot;:18&#125;&apos;;</div><div class="line"></div><div class="line">//会报错</div><div class="line">var str = &quot;&#123;&apos;name&apos;:&apos;小明&apos;, &apos;age&apos;:18&#125;&quot;;</div><div class="line"></div><div class="line">//会报错</div><div class="line"></div><div class="line">JSON.parse(&quot;[1, 2, 3, 4, ]&quot;);</div><div class="line"></div><div class="line">JSON.parse(&apos;&#123;&quot;foo&quot; : 1, &#125;&apos;);</div></pre></td></tr></table></figure><h3 id="2-2-还原函数（reviver）"><a href="#2-2-还原函数（reviver）" class="headerlink" title="2.2 还原函数（reviver）"></a>2.2 还原函数（reviver）</h3><p>&emsp;&emsp;JSON.parse()还可以接收另外一个参数，该参数是一个函数，接收两个参数，属性（键）名和属性值，将在每个键值对上调用。称为还原函数。</p><ul><li><p>如果还原函数返回undefined，则表示从结果中删除相应的键。</p></li><li><p>如果返回其他值，则将该值插入到结果中。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var result = JSON.parse(jsonText, function(key, value)&#123;</div><div class="line">    //do something</div><div class="line">    return ;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="2-3-使用场景"><a href="#2-3-使用场景" class="headerlink" title="2.3 使用场景"></a>2.3 使用场景</h3><h4 id="2-3-1-解析AJAX请求的响应数据"><a href="#2-3-1-解析AJAX请求的响应数据" class="headerlink" title="2.3.1 解析AJAX请求的响应数据"></a>2.3.1 解析AJAX请求的响应数据</h4><p>&emsp;&emsp;通过AJAX请求返回的响应数据，可以用JSON.parse()进行解析。</p><h2 id="00x3-两者联合"><a href="#00x3-两者联合" class="headerlink" title="00x3 两者联合"></a>00x3 两者联合</h2><p>&emsp;&emsp;JSON.stringify()和JSON.parse()互为逆操作，有以下使用场景。</p><ul><li><p>AJAX的请求与响应。AJAX的请求中使用JSON.stringify()序列化参数，AJAX的响应中使用JSON.parse()解析响应数据。</p></li><li><p>localStorage和sessionStorage的存取。使用JSON.stringify()序列化参数用于存储对象，使用JSON.parse()解析读取后的字符串。</p></li><li><p>深拷贝的实现。使用JSON.parse(JSON.stringify(data))来实现一个简单的深拷贝。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x0-写在前面&quot;&gt;&lt;a href=&quot;#00x0-写在前面&quot; class=&quot;headerlink&quot; title=&quot;00x0 写在前面&quot;&gt;&lt;/a&gt;00x0 写在前面&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在使用ajax请求数据的过程中，经常需要用到JSON的两个方法：&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;JSON.stringify()和JSON.parse()两个方法来处理数据。那什么时候需要用到JSON.stringify()，什么时候需要用到JSON.parse()呢？马上就细细道来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB-数据聚合的三种方式</title>
    <link href="http://yoursite.com/2018/03/03/mongoDB-%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/03/mongoDB-数据聚合的三种方式/</id>
    <published>2018-03-03T11:52:44.000Z</published>
    <updated>2019-08-09T04:12:58.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x1-group"><a href="#00x1-group" class="headerlink" title="00x1 group"></a>00x1 group</h2><p>&emsp;&emsp;使用group可以执行相对复杂的聚合，先选定分组所依据的键，而后mongoDB就会将集合依据选定键进行分组，然后对每一个分组内的文档进行聚合，以得到结果文档。   </p><h3 id="1-1-group结构"><a href="#1-1-group结构" class="headerlink" title="1.1 group结构"></a>1.1 group结构</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db.test.group(&#123;</div><div class="line">    key:&#123;field:true&#125;  //key为分组依据，相当于aggregate中的$group</div><div class="line">    initial:&#123;count:0&#125;   //在分组前对变量初始化，这里声明的变量在下面回调函数中作为result的属性使用。</div><div class="line">    condition://过滤条件，相当于aggregate中的$match。</div><div class="line">    reduce:function ( curr, result ) &#123;&#125;     //第一个参数为当前分组中此时迭代到的文档对象，第二个参数为当前分组</div><div class="line">    &quot;$keyf&quot;:function() &#123;return &#125;  //定义分组函数</div><div class="line">    finalize:function(result)&#123;&#125; //这里的result为reduce的result，代表当前分组。此函数对完成当前分组后回调。</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;Group有传入的命令中共有六个参数，其中三个是JavaScript函数，因此每次查询到匹配的数据，都会被转换为对象传入函数。从运行效率上来说，Group比Aggregate差一大截。</p><h3 id="1-2-使用场景"><a href="#1-2-使用场景" class="headerlink" title="1.2 使用场景"></a>1.2 使用场景</h3><p>&emsp;&emsp;对返回数据最多只包含20000个元素，最多支持20000独立分组。</p><h2 id="00x2-aggregate"><a href="#00x2-aggregate" class="headerlink" title="00x2 aggregate"></a>00x2 aggregate</h2><p>&emsp;&emsp;aggregate是mongoDB中经常提起的“管道”。主要用于处理数据（如求和，统计平均值等），并返回计算后的数据结构。<br>&emsp;&emsp;aggreagte是一个数组，其中包含多个对象（命令），通过遍历Pipleline数组对collection中的数据进行操作。<br>&emsp;&emsp;下面介绍一下aggregate的聚合管道比较常用的几种操作：    </p><h3 id="2-1-project"><a href="#2-1-project" class="headerlink" title="2.1 $project"></a>2.1 $project</h3><p>&emsp;&emsp;修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $project:&#123;</div><div class="line">        &quot;_id&quot;:1,</div><div class="line">        &quot;name&quot;:1</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="2-2-match"><a href="#2-2-match" class="headerlink" title="2.2 $match"></a>2.2 $match</h3><p>&emsp;&emsp;用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $match:&#123;</div><div class="line">        &quot;count&quot;:&quot;3&quot;,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-3-limit"><a href="#2-3-limit" class="headerlink" title="2.3 $limit"></a>2.3 $limit</h3><p>&emsp;&emsp;用来限制MongoDB聚合管道返回的文档数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $limit:5</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-4-skip"><a href="#2-4-skip" class="headerlink" title="2.4 $skip"></a>2.4 $skip</h3><p>&emsp;&emsp;在聚合管道中跳过指定数量的文档，并返回余下的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $skip:8</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-5-unwind"><a href="#2-5-unwind" class="headerlink" title="2.5 $unwind"></a>2.5 $unwind</h3><p>&emsp;&emsp;将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">$unwind:&quot;$identlist&quot;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-6-group"><a href="#2-6-group" class="headerlink" title="2.6 $group"></a>2.6 $group</h3><p>&emsp;&emsp;将集合中的文档分组，可用于统计结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $group:&#123;&quot;_id&quot;:&quot;$count&quot;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-7-sort"><a href="#2-7-sort" class="headerlink" title="2.7 $sort"></a>2.7 $sort</h3><p>&emsp;&emsp;将输入文档排序后输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $sort:&#123;&quot;count&quot;:1&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h3 id="2-8-使用场景"><a href="#2-8-使用场景" class="headerlink" title="2.8 使用场景"></a>2.8 使用场景</h3><p>&emsp;&emsp;应用于常用的聚合操作；对聚合响应性能有一定要求时（索引及组合优化）；管道操作在中完成，由于内存有大小限制，处理的数据集大小有限。    </p><h2 id="00x3-MapReduce"><a href="#00x3-MapReduce" class="headerlink" title="00x3 MapReduce"></a>00x3 MapReduce</h2><h3 id="3-1-MapReduce结构"><a href="#3-1-MapReduce结构" class="headerlink" title="3.1 MapReduce结构"></a>3.1 MapReduce结构</h3><p>&emsp;&emsp;mapreduce是mongoDB中提供的用于数据聚合的一种方式。通过对集合中的各个满足条件的文档进行预处理，整理出想要的数据然后统计得到最终的统计结果。<br>&emsp;&emsp;mapreduce的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;  </div><div class="line">    mapreduce:&lt;collection&gt;,  //需要进行处理的集合名</div><div class="line">    map:&lt;mapfunction&gt;,  //映射函数（分组）</div><div class="line">    reduce:&lt;reducefunction&gt;,  //统计函数</div><div class="line">    [,query:&lt;query filter object&gt;]  //，在发往map函数之前，对文档进行过滤 </div><div class="line">    [,sort:&lt;sorts the input objects using this key.Useful for optimization,like sorting by the emit key for fewer reduces&gt;]  //在发往map函数之前，对文档进行排序</div><div class="line">    [,limit:&lt;number of objects to return from collection&gt;]  //限制发往map函数的文档数量</div><div class="line">    [,out:&lt;see output options below&gt;]  //新建集合，用于存放统计结果</div><div class="line">    [,keeptemp:&lt;true|false&gt;]  //是否保存统计结果为临时集合</div><div class="line">    [,finalize:&lt;finalizefunction&gt;]  //最终处理函数，对reduce返回结果（存入out之前）进行最终处理</div><div class="line">    [,scope:&lt;object where fields go into javascript global scope&gt;] //向map、reduce、finalize导入外部变量</div><div class="line">    [,verbose:true]  //详细的统计信息，用于调试</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用MapReduce主要需要实现两个函数：Map函数和Reduce函数。接下来详细介绍这两个函数。    </p><h3 id="3-2-Map函数"><a href="#3-2-Map函数" class="headerlink" title="3.2 Map函数"></a>3.2 Map函数</h3><p>&emsp;&emsp;可以将Map函数理解为分组，调用emit（key，values），遍历collection中所有的记录。其中，emit中的key为分组依据；values为分组后需要保留的数据，为1时则统计该分组的值的个数。<br>&emsp;&emsp;key对应最后结果集中的_id。经过Map函数处理的集合，每条数据中只有”key”和”values”两个字段。</p><h3 id="3-3-Reduce函数"><a href="#3-3-Reduce函数" class="headerlink" title="3.3 Reduce函数"></a>3.3 Reduce函数</h3><p>&emsp;&emsp;Reduce为统计函数，接受Map函数处理后返回的key和values作为参数，将key-values变成key-value，也就是把values数组变成一个个单一的value。当key-values中的values数组过大时，会被再切分成很多个小的key-values，再对这些小的key-values分别执行Reduce，再将多个块的结果组合成一个新的数组，作为Reduce函数的第二个参数，继续Reduce操作。这个类似于多阶的归并排序。      </p><h3 id="3-4-out和keeptemp"><a href="#3-4-out和keeptemp" class="headerlink" title="3.4 out和keeptemp"></a>3.4 out和keeptemp</h3><p>&emsp;&emsp;out:<br>&emsp;&emsp;在文档输出时，output是可选的，一般结构为{ “out”: option }。<br>&emsp;&emsp;option可以有以下几个选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; replace : &quot;collection name&quot; &#125; – mapReduce的输出结果会替换掉原来的collection，collection不存在则创建。</div><div class="line">&#123; merge : &quot;collection name&quot; &#125; – 将新老数据进行合并，新的替换旧的，没有的添加进去。</div><div class="line">&#123; reduce : &quot;collection name&quot; &#125; – 存在老数据时，在原来基础上加新数据(即 new value = old value + mapReduce value)。</div><div class="line">&#123; inline : 1 &#125; – 不会创建collection，结果保存在内存里，只限于结果小于16MB的情况。</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;通常结构为{“out”:”collection name”}，如果collection不存在，就新建一个集合。</p><p>&emsp;&emsp;keeptemp<br>&emsp;&emsp;值只能为true或者false，表明输出到的collection是否是临时的，如果想在连接关闭后任然保留这个集合，则需要指定keeptemp的值为”true”。在使用output的情况下，不必指定keeptemp为true。</p><h3 id="3-5-使用场景"><a href="#3-5-使用场景" class="headerlink" title="3.5 使用场景"></a>3.5 使用场景</h3><p>&emsp;&emsp;聚合要求复杂；大型数据集            </p><h2 id="00x4-三者比较"><a href="#00x4-三者比较" class="headerlink" title="00x4 三者比较"></a>00x4 三者比较</h2><table><thead><tr><th>&emsp;</th><th>group</th><th>aggregate</th><th>MapReduce</th></tr></thead><tbody><tr><td>是否使用JavaScript引擎</td><td>是，定制reduce函数</td><td>是，不能编写自定义函数</td><td>是，MapReduce函数是用JavaScript编写的</td></tr><tr><td>返回结果集保存位置</td><td>内联,结果必须符合BSON文档的限制(当前是16Mb)</td><td>内联，服务器支持的最大文档大小(16Mb)，超过时会报错</td><td>内联、新集合、合并、替换、减少</td></tr><tr><td>处理数据集大小</td><td>将不会分组到一个超过10,000个键的结果集</td><td>操作在内存中完成，有内存大小限制，处理数据集大小有限</td><td>大型数据集，超过20000的独立分组建议采用MapReduce</td></tr><tr><td>处理性能</td><td>低于aggregate</td><td>较高，管道可重复使用</td><td>低于aggregate</td></tr><tr><td>灵活度</td><td>低于MapReduce</td><td>低于MapRduce</td><td>较高，能使用JavaScript</td></tr></tbody></table><h2 id="00x5-从一个小例子具体分析"><a href="#00x5-从一个小例子具体分析" class="headerlink" title="00x5  从一个小例子具体分析"></a>00x5  从一个小例子具体分析</h2><p>&emsp; &emsp; 为公司的每个用户分配一张卡（有唯一的卡号”_id”）；持有该卡的用户可以使用这张卡在不同的超市消费，每个超市都有一个标识码，用”identlist”存放用户消费过的超市标识码；持有该卡的用户名字用”name”表示，默认在该公司中，每个人的姓名都是唯一的，与”_id”一一对应；”eventline”列举用户每次消费购买的物品；”timeline”记录每次消费的时间;”newtimeline”为用户最近一次消费的时间。<br>&emsp; &emsp;示例数据如下：<br><img src="/2018/03/03/mongoDB-数据聚合的三种方式/mongoDB数据.PNG" alt="mockjs"><br>&emsp; &emsp;知道最近有几家超市做促销（数组A），要求（1）获取在A中任意一家或多家超市消费过的卡的持有者；（2）这些卡的最新消费时间；（3）这些卡的累积消费次数；（4）根据最新消费时间/累积消费次数对获取到的这些卡的数据进行排序；对排序后的数据进行分页。<br>&emsp; &emsp;分析：要求中最难的是第一步：遍历数组A，将A中的每一条数据，作为分组依据（可能将原来的一条数据拆分成几条）；再对分组后的数据以”_id”进行聚合。    </p><h3 id="5-1-使用MapReduce实现以上要求。"><a href="#5-1-使用MapReduce实现以上要求。" class="headerlink" title="5.1 使用MapReduce实现以上要求。"></a>5.1 使用MapReduce实现以上要求。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var map = function()&#123;</div><div class="line">    emit(this.name,this.timeline);</div><div class="line">    &#125;;</div><div class="line">var reduce = function(key,values)&#123;</div><div class="line">    return Array.sum(values);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">db.testtest.mapReduce(</div><div class="line">    map,</div><div class="line">    reduce,</div><div class="line">    &#123;</div><div class="line">        query:&#123;$where:function()&#123;</div><div class="line">        var arr = new Array(&quot;Jk3Nx5-YUxBJZ-Zklt&quot;,&quot;LMuHW7-JtnwQC-OBIh&quot;);</div><div class="line">            for(var index in arr)&#123;               </div><div class="line">                for(var current in this.identlist)&#123;</div><div class="line">                    if(this.identlist[current] == arr[index])&#123;</div><div class="line">                        return true;</div><div class="line">                    &#125;</div><div class="line">                    return false;</div><div class="line">                &#125;</div><div class="line">               </div><div class="line">              &#125;             </div><div class="line">        &#125;&#125;,</div><div class="line">        sort:&#123;&quot;count&quot;:1&#125;,</div><div class="line">        finalize:function(key,value)&#123;return &#123;count:value.length,time:value[0]&#125;;&#125;,</div><div class="line">        out:&quot;bbb_result&quot;        </div><div class="line">     &#125;</div><div class="line">)</div><div class="line">db.bbb_result.find().skip(1).limit(5)</div></pre></td></tr></table></figure><h3 id="5-2-使用aggregate"><a href="#5-2-使用aggregate" class="headerlink" title="5.2 使用aggregate"></a>5.2 使用aggregate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var arr = new Array(&quot;wdeVyU-YVutsF-CEza&quot;,&quot;Jk3Nx5-YUxBJZ-Zklt&quot;);</div><div class="line">db.getCollection(&apos;testtest&apos;).aggregate([</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$identlist&quot;&#125;,</div><div class="line">    &#123;&quot;$match&quot;:&#123;&quot;identlist&quot;:&#123;&quot;$in&quot;:arr&#125;&#125;&#125;,</div><div class="line">    &#123;$group:&#123;_id:&quot;$name&quot;,timeline:&#123;$addToSet:&quot;$timeline&quot;&#125;&#125;&#125;,</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$timeline&quot;&#125;,</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$timeline&quot;&#125;,</div><div class="line">    &#123;$group:&#123;_id:&quot;$_id&quot;,time:&#123;$first:&quot;$timeline&quot;&#125;,count:&#123;&quot;$sum&quot;:1&#125;&#125;&#125;,</div><div class="line">    &#123;$sort:&#123;&quot;count&quot;:-1&#125;&#125;,</div><div class="line">    &#123;$skip:0&#125;,</div><div class="line">    &#123;$limit:5&#125;</div><div class="line">])</div></pre></td></tr></table></figure><p>&emsp; &emsp;以上两个小例子经测试后均能实现要求，这里不做详细解释，需要的请自取~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x1-group&quot;&gt;&lt;a href=&quot;#00x1-group&quot; class=&quot;headerlink&quot; title=&quot;00x1 group&quot;&gt;&lt;/a&gt;00x1 group&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用group可以执行相对复杂的聚合，先选定分组所依据的键，而后mongoDB就会将集合依据选定键进行分组，然后对每一个分组内的文档进行聚合，以得到结果文档。   &lt;/p&gt;
&lt;h3 id=&quot;1-1-group结构&quot;&gt;&lt;a href=&quot;#1-1-group结构&quot; class=&quot;headerlink&quot; title=&quot;1.1 group结构&quot;&gt;&lt;/a&gt;1.1 group结构&lt;/h3&gt;
    
    </summary>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>在Vue项目中使用Mock.js构造模拟数据</title>
    <link href="http://yoursite.com/2018/03/03/%E5%9C%A8Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Mock-js%E6%9E%84%E9%80%A0%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/</id>
    <published>2018-03-03T10:25:51.000Z</published>
    <updated>2018-12-04T13:18:54.063Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/mockjs.PNG" alt="mockjs"></p><h5 id="00x1-mockjs简介"><a href="#00x1-mockjs简介" class="headerlink" title="00x1 mockjs简介"></a>00x1 mockjs简介</h5><p>&emsp;&emsp;mock.js是一款开发前端虚拟接口的插件，主要有两个功能<br><a id="more"></a></p><blockquote><ul><li>生成随机数据</li><li>拦截Ajax请求<h5 id="00x2-在vue-cli项目中安装配置mockjs"><a href="#00x2-在vue-cli项目中安装配置mockjs" class="headerlink" title="00x2 在vue-cli项目中安装配置mockjs"></a>00x2 在vue-cli项目中安装配置mockjs</h5></li></ul></blockquote><p>&emsp;&emsp;首先确保安装并成功引入axios；<br>&emsp;&emsp;然后安装mockjs  npm install mockjs –save-dev；<br>&emsp;&emsp;在main.js文件中引入mockjs并配置axios跨域信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">require(&apos;./mock.js&apos;)  </div><div class="line">//配置axios跨域请求头部</div><div class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;</div><div class="line">//配置axios请求拦截器</div><div class="line">axios.interceptors.request.use(function(config) &#123;</div><div class="line">    return config;</div><div class="line">  &#125;, function(error) &#123;</div><div class="line">    return Promise.reject(error);</div><div class="line">  &#125;)</div><div class="line">//配置axios响应拦截器</div><div class="line">axios.interceptors.response.use(function(response) &#123;</div><div class="line">  return response;</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  return Promise.reject(error);</div><div class="line">&#125;)</div><div class="line">//封装axios的post请求</div><div class="line">export function fetch(url, params) &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    axios.post(url, params).then(response =&gt; &#123;</div><div class="line">        resolve(response.data);</div><div class="line">      &#125;).catch((error) =&gt; &#123;</div><div class="line">        reject(error);</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">//封装接口信息</div><div class="line">export default &#123;</div><div class="line">  http(url, params) &#123;</div><div class="line">    return fetch(url, params);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="00x3-Mock-js语法"><a href="#00x3-Mock-js语法" class="headerlink" title="00x3 Mock.js语法"></a>00x3 Mock.js语法</h5><p>&emsp;&emsp;mock.js语法分为两种，数据模板定义和数据占位符定义     </p><blockquote><ul><li>数据模板定义<br>基本结构：属性名|生成规则:属性值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">（1）&apos;name|min-max&apos;: value</div><div class="line">（2）&apos;name|count&apos;: value</div><div class="line">（3）&apos;name|min-max.dmin-dmax&apos;: value</div><div class="line">（4）&apos;name|min-max.dcount&apos;: value</div><div class="line">（5）&apos;name|count.dmin-dmax&apos;: value</div><div class="line">（6）&apos;name|count.dcount&apos;: value</div><div class="line">（7）&apos;name|+step&apos;: value</div></pre></td></tr></table></figure></li></ul></blockquote><p>(1)属性值是字符串String<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|min-max: string</div><div class="line">通过重复string生成一个字符串，重复次数大于等于min，小于等于max。这里的重复是指对初始化string的重复次数。</div><div class="line"></div><div class="line">2. name|count: string</div><div class="line">通过重复string生成一个字符串，重复次数等于count。</div></pre></td></tr></table></figure></p><p>(2)属性值是数字Number<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. name|+1 : number</div><div class="line">属性值自动加1， 初始值为number</div><div class="line"></div><div class="line">2. name|min-max: number</div><div class="line">生成一个大于等于min，小于等于max的整数。</div><div class="line"></div><div class="line">3. name|min-max.dmin-dmax: number</div><div class="line">生成一个浮点数，整数部分大于等于min，小于等于max，小数部分保留dmin到dmax位。</div></pre></td></tr></table></figure></p><p>（3）属性值是布尔类型Boolean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|1: boolean</div><div class="line">随机生成一个布尔值，值为true的概率为1/2， 值为false的概率为1/2。</div><div class="line"></div><div class="line">2. name|min-max: value</div><div class="line">随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。</div></pre></td></tr></table></figure></p><p>（4）属性值是对象Object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|count: object</div><div class="line">从属性值object中随机选取count个属性</div><div class="line"></div><div class="line">2. name|min-max: object</div><div class="line">从属性值object中随机选取min到max个属性</div></pre></td></tr></table></figure></p><p>(5) 属性值是数组Array<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. name|1: array</div><div class="line">从属性值array中随机选取一个元素，作为最终值</div><div class="line"></div><div class="line">2. name|+1: array</div><div class="line">从属性值array中顺序选取一个元素，作为最终值</div><div class="line"></div><div class="line">3. name|min-max: array</div><div class="line">通过重复属性值array生成一个新数组，重复次数大于等于min，小于等于max。</div><div class="line"></div><div class="line">4. name|count: array</div><div class="line">通过重复属性值array生成一个新数组，重复次数为count。</div></pre></td></tr></table></figure></p><p>(6) 属性值是函数Function<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;name&apos;: function</div><div class="line"></div><div class="line">执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 &apos;name&apos; 所在的对象。</div></pre></td></tr></table></figure></p><p>(7) 属性值是正则表达式RegExp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. name: regexp</div><div class="line">根据正则表达式regexp反向生成可以匹配他的字符串。用于生成自定义格式的字符串。</div></pre></td></tr></table></figure></p><blockquote><ul><li>数据占位符定义<br>基本结构：属性名：占位符<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;name|&apos;:&apos;@占位符()&apos;</div></pre></td></tr></table></figure></li></ul></blockquote><p>&emsp;&emsp;占位符也可以引用数据模板中的属性；占位符会有限引用数据模板中的属性；占位符支持相对路径和绝对路径。</p><h5 id="00x4-Mock-mock"><a href="#00x4-Mock-mock" class="headerlink" title="00x4 Mock.mock()"></a>00x4 Mock.mock()</h5><ul><li><p>Mock.mock(rurl?, rtype?, template|function(options))    </p><blockquote><p>根据数据模板生成模拟数据</p></blockquote></li><li><p>Mock.mock(template)</p><blockquote><p>根据数据模板生成模拟数据。</p></blockquote></li><li><p>Mock.mock(rurl, template)</p><blockquote><p>记录数据模板，当拦截到匹配rurl的ajax请求时，根据数据模板生成模拟数据，并作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, function(options))</p><blockquote><p>记录用于生成响应数据的函数。当拦截到匹配rurl的ajax请求时，函数function执行，并把执行结果作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, rtype, template)</p><blockquote><p>记录数据模板，当拦截到匹配rurl和rtype的ajax请求时，将根据数据模板生成模拟数据，并作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, rtype, function(options))</p><blockquote><p>记录用于生成响应数据的函数。当拦截到匹配rurl和rtype的ajax请求时，函数function(options)将被执行，并把执行结果作为响应数据返回。</p></blockquote></li><li><p>rurl</p><blockquote><p>标识需要拦截的url，可以是url字符串或者url正则：</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\/domain\/list\.json/、&apos;/domian/list.json&apos;。</div></pre></td></tr></table></figure><ul><li><p>rtype</p><blockquote><p>可选，标识需要拦截的ajax请求类型。例如GET, POST, PUT, DELETE等。</p></blockquote></li><li><p>template</p><blockquote><p>可选，标识数据模板，可以是对象或字符串。</p></blockquote></li><li><p>function(options)</p><blockquote><p>可选，表示用于生成响应数据的函数。</p></blockquote></li><li><p>options</p><blockquote><p>指向本次请求的ajax选项集，含有url， type和body三个属性。</p><h5 id="00x5-构造模拟数据"><a href="#00x5-构造模拟数据" class="headerlink" title="00x5 构造模拟数据"></a>00x5 构造模拟数据</h5></blockquote></li></ul><p>&emsp;&emsp;新建一个mock.js文件，在mock.js文件中引入mockjs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const Mock = require(&apos;mockjs&apos;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;根据mock.js语法格式构造模拟数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">export default Mock.mock(&apos;http://test.com&apos;, &#123;</div><div class="line">    &apos;cur_ip&apos;:&#123;</div><div class="line">        &apos;data&apos;:&apos;@date&apos;,</div><div class="line">        &apos;ip&apos;:&apos;@ip&apos;,</div><div class="line">        &apos;number|1-100&apos;:10000, </div><div class="line">        &apos;rank|1-100&apos;:20,</div><div class="line">        &apos;info&apos;:&apos;@title(3)&apos;,</div><div class="line">    &#125;,</div><div class="line">    &apos;cur_whois&apos;:[&#123;</div><div class="line">        &apos;alexa|1-300&apos;:100,</div><div class="line">        &quot;cdate&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;edate&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;name_server&quot;:&apos;@domain&apos;,</div><div class="line">        &quot;registrant_address&quot;:&apos;@county(true)&apos;,</div><div class="line">        &quot;registrant_company&quot;:&apos;@ctitle(3, 5)&apos;,</div><div class="line">        &quot;registrant_email&quot;:&apos;@email&apos;,</div><div class="line">        &quot;registrant_name&quot;:&apos;@name(true)&apos;,</div><div class="line">        &quot;registrant_phone&quot;:/^1[0-9]&#123;10&#125;$/,</div><div class="line">        &quot;registrar_name&quot;:&apos;@name(true)&apos;,</div><div class="line">        &quot;udate&quot;:&apos;@datetime&apos;,</div><div class="line"></div><div class="line">     &#125;],</div><div class="line">    &apos;history_ip|20&apos;:[&#123;</div><div class="line">        &quot;date&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;ip&quot;:&apos;@ip&apos;,</div><div class="line">        &quot;info&quot;:&apos;@title(3)&apos;,</div><div class="line">    &#125;],</div><div class="line">&#125;）</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;mock.js也支持模拟ajax请求响应时间，自定义的响应时间可以是绝对值，也可以是区间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Mock.setup(&#123;</div><div class="line">    timeout: 40000//40秒后再响应</div><div class="line">&#125;)</div><div class="line">Mock.setup(&#123;</div><div class="line">    timeout: &apos;10000-40000&apos;//在10秒和40秒之间响应</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h5 id="00x6-请求获取数据"><a href="#00x6-请求获取数据" class="headerlink" title="00x6 请求获取数据"></a>00x6 请求获取数据</h5><p>&emsp;&emsp;在需要数据的页面中引入构造的mock的api<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import mock from &apos;../main.js&apos;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;请求获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mock.http(&apos;http://test.com&apos;, &apos;type=top&amp;key=123456&apos;).then(res =&gt; &#123;</div><div class="line">  console.log(res);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;完成到这一步后，打开项目就可以看到已经生成的模拟数据，亲测可用。如果只是想了解mockjs语法，可以在打开官网，直接使用示例语法在浏览器控制台上进行测试。</p><blockquote><p>参考：<br><a href="http://mockjs.com/examples.html" target="_blank" rel="external">http://mockjs.com/examples.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/mockjs.PNG&quot; alt=&quot;mockjs&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;00x1-mockjs简介&quot;&gt;&lt;a href=&quot;#00x1-mockjs简介&quot; class=&quot;headerlink&quot; title=&quot;00x1 mockjs简介&quot;&gt;&lt;/a&gt;00x1 mockjs简介&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;mock.js是一款开发前端虚拟接口的插件，主要有两个功能&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Mockjs" scheme="http://yoursite.com/tags/Mockjs/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB安装与配置</title>
    <link href="http://yoursite.com/2017/07/26/mongoDB%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/07/26/mongoDB安装与配置/</id>
    <published>2017-07-26T06:49:12.000Z</published>
    <updated>2019-08-09T04:10:13.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x1-mongodb的安装与配置"><a href="#00x1-mongodb的安装与配置" class="headerlink" title="00x1 mongodb的安装与配置"></a>00x1 mongodb的安装与配置</h2><blockquote><p>(1)在mongodb的官网<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a> 下载安装文件。</p></blockquote><a id="more"></a><pre><code>进入官网，直接点击donwnload即可。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/1.PNG" alt="Alt text"><br>(2)双击.msi文件安装<br><img src="http://oloaybpun.bkt.clouddn.com/2.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/3.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/4.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/5.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/6.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/7.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/8.png" alt="Alt text"></p><p>(3)创建数据目录</p></blockquote><pre><code>进入mongodb的安装包，创建数据目录D:\software\mongodb\mkdir dataD:\software\mongodb\cd  dataD:\software\mongodb\data\cd dbD:\software\mongodb\data\db\</code></pre><blockquote><p>(4)命令行下运行mongodb服务器</p></blockquote><pre><code>进入mongodb安装目录下的bin文件夹D:\software\mongodb\bin\mongod.exe --dbpath D:\software\mongodb\data\db出现下面的内容就表示正确运行了。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/9.png" alt="Alt text"></p></blockquote><pre><code>当然这一步也有可能出现问题，比如我就遇到了“mongod不是内部或外部命令,也不是可运行的程序”这个问题。最开始我在环境变量中加入了bin文件夹的路径，但是问题没有解决。解决方法：直接在bin文件夹中双击打开mongod.exe文件。同样会出现以上的内容。然后在浏览器中打开http://localhost:27017进行测试。出现下面的内容表示mongodb的服务器正确运行了。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/10.png" alt="Alt text"><br>(5)将mongodb安装为windows服务（命令行要有管理员权限）</p></blockquote><pre><code>D:\software\mongodb\bin\mongod --dbpath D:\software\mongodb\data --install但是出现了下面的提示，表明安装失败。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/11.png" alt="Alt text"></p><p>按照提示，需要指定log目录。因此重新切换到bin目录下，新建logs文件。并在logs文件夹下新建mongodb.log文件。</p></blockquote><pre><code>创建日志目录：    D:\software\mongodb\mkdir logs    D:\software\mongodb\cd logs    D:\software\mongodb\logs    然后重新进入bin文件夹，输入命令：    D:\software\mongodb\bin\mongod --dbpath D:\software\mongodb\data  --logpath=D:\software\mongodb\logs\mongodb.log --logappend.    没有出现错误提示。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/12.png" alt="Alt text"></p><p>也能够正常启动：<br><img src="http://oloaybpun.bkt.clouddn.com/13.png" alt="Alt text"><br>6.MongoDB后台管理shell（命令行要有管理员权限）</p></blockquote><pre><code>打开 MongoDB shell，失败。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/14.png" alt="Alt text"></p><p>   连接失败，net start  MongoDB服务，服务不能正常打开，mongo的服务没有被正确创建。</p></blockquote><pre><code>使用sc命令创建mongodb服务，需要注意的是，这一步的cmd必须要以管理员权限打开。D:\software\mongodb\bin\sc create MongDB binpath=&quot;D:\software\mongo\bin\mongod.exe --service --dbpath D:\software\mongodb\data --logpath=D:\software\mongodb\logs\mongodb.log --logappend 服务创建成功net start MongoDB 服务也可以正常启动</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/15.png" alt="Alt text"></p></blockquote><p> MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。可以运行一些简单的算术运算</p><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/16.png" alt="Alt text"></p></blockquote><p>(7)设置环境变量</p><pre><code>进入电脑上的环境变量，在系统变量下的path中加入mongodb目录下的bin文件的路径。这样命令行就可以在任何位置使用mongodb命令，不需要每次使用mongo和mongod命令的时候都进入bin文件夹下。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/18.PNG" alt="Alt text"></p></blockquote><h2 id="00x2-配置过程中一些命令的总结"><a href="#00x2-配置过程中一些命令的总结" class="headerlink" title="00x2 配置过程中一些命令的总结"></a>00x2 配置过程中一些命令的总结</h2><blockquote><p>在配置过程中，出现问题最多的是将mongodb安装为windows服务，和mongodb后台管理shell这两步骤。在解决这两步的问题时，尝试了不同的命令，在这里做一个总结。</p><p>(1)进入bin文件夹下</p></blockquote><pre><code>mongod.exe --bind_ip yourIPadress --logpath &quot;C:\data\dbConf\mongodb.log&quot; --logappend --dbpath &quot;C:\data\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install</code></pre><blockquote><p>(2)打开具有管理员身份的cmd</p></blockquote><pre><code>如果已经有某个服务名了，比如MongoDB，那么先把这个服务删了，sc delete MongoDB然后进入mongodb安装目录下的bin文件mongod --logpath d:\data\log\MongoDB.log --logappend --dbpath d:\data\db --serviceName MongoDB --install</code></pre><blockquote><p>(3)同样是进入mongodb安装目录下的bin文件下</p></blockquote><pre><code>mongod --logpath &quot;D:\software\mongodb\data\mongodb.log&quot; --logappend--dbpath &quot;D:\software\mongodb\data&quot; --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install在解决这部分问题之后，觉得使用这些命令没有成功的原因可能是命令行没有获取管理员权限，还有就是mongdb的服务没有被正确创建。最正确的创建mongodb服务的方法是使用sc命令进行创建。D:\software\mongodb\bin\sc create MongDBbinpath=&quot;D:\software\mongo\bin\mongod.exe --service --dbpath D:\software\mongodb\data--logpath=D:\software\mongodb\logs\mongodb.log --logappend</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x1-mongodb的安装与配置&quot;&gt;&lt;a href=&quot;#00x1-mongodb的安装与配置&quot; class=&quot;headerlink&quot; title=&quot;00x1 mongodb的安装与配置&quot;&gt;&lt;/a&gt;00x1 mongodb的安装与配置&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;(1)在mongodb的官网&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt; 下载安装文件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>表单提交类型与ajax</title>
    <link href="http://yoursite.com/2017/04/23/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E7%B1%BB%E5%9E%8B%E4%B8%8Eajax/"/>
    <id>http://yoursite.com/2017/04/23/表单提交类型与ajax/</id>
    <published>2017-04-23T11:53:07.000Z</published>
    <updated>2019-08-09T04:21:08.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="00x1-问题描述"><a href="#00x1-问题描述" class="headerlink" title="00x1 问题描述"></a>00x1 问题描述</h2><blockquote><p>在写蜜罐时，遇到了form表单提交的一个问题。使用ajax方式异步提交表单，点击提交按钮后，<br>1.提交页面刷新。ajax使用的是POST方式提交，但是在地址栏出现了GET方式提交才会出现的地址类型。<br><img src="/2017/04/23/表单提交类型与ajax/地址.PNG" alt="地址"><br>2.数据库中数据成功入库，但是回调函数不显示。<br><a id="more"></a></p><h2 id="00x2-问题分析及解决"><a href="#00x2-问题分析及解决" class="headerlink" title="00x2 问题分析及解决"></a>00x2 问题分析及解决</h2><p>数据成功入库，说明ajax提交数据是成功的。而在地址栏中，又出现了GET方式提交才会出现的地址类型，说明表单中的数据应该是被提交了两次，第一次以POST方式（ajax中type设置成“POST”）提交，然后再以GET方式提交。</p><p>通过查找资料发现，代码中将button的type设置成了“submit”，将提交按钮的type属性修改成“button”，问题就会解决。<br><img src="/2017/04/23/表单提交类型与ajax/submit.PNG" alt="submit"><br>submit默认为以GET方式进行表单提交（form）。<br>button则响应用户自定义的事件，如果不指定onclick等事件处理函数，它不做任何事情。<br>以ajax方式提交时，jQuery给提交按钮绑定了click事件，ajax中设定了以POST方式提交。而在button中，type被设置成submit，默认以GET方式提交。就引出了关于click和submit执行先后顺序的问题。</p></blockquote><h2 id="00x3-click和submit执行的先后顺序"><a href="#00x3-click和submit执行的先后顺序" class="headerlink" title="00x3 click和submit执行的先后顺序"></a>00x3 click和submit执行的先后顺序</h2><blockquote><p>点击提交按钮时，是先触发click事件，然后再触发submit事件。<br>这里主要说的是click的处理后续和submit的处理后续：click-&gt;click响应事件-&gt;submit响应事件-&gt;submit。click的处理事件完成后，然后轮到submit事件的处理以及处理后的submit。<br>到这一步，感觉问题就快解决了。但是如果ajax提交表单成功之后，再submit以get方式提交的话。过程中就肯定能看到数据入库后返回的回调函数。就说明，ajax提交并没有完全执行，应该是在向后台提交数据之后和在success返回回调信息之间出现了阻塞。</p></blockquote><h2 id="00x4-同步和异步的区别"><a href="#00x4-同步和异步的区别" class="headerlink" title="00x4 同步和异步的区别"></a>00x4 同步和异步的区别</h2><blockquote><p>在JS中负责解释和执行JavaScript代码的线程只有一个。 这里我们叫做主线程。<br>实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。我们把它叫做工作线程。<br><img src="/2017/04/23/表单提交类型与ajax/clipboard.png" alt="clipboard"><br>主线程发起一个异步请求（提交form表单），相应的工作线程接收请求并告知主线程已收到(异步函数返回)；主线程可以继续执行后面的代码，同时工作线程执行异步任务（提交form表单到数据库）；工作线程完成工作后，通知主线程（数据成功入库，返回执行结果，并将其放入消息队列）；主线程收到通知后（主线程通过事件循环从消息队列里取消息），执行一定的动作(调用回调函数来处理返回结果) ；触发submit响应（返回值不为FALSE），执行表单的submit事件。又因为给了action的地址，所以会出现跳转。并且在跳转地址中出现GET方式的提交。</p><p>在同步情况下，主线程发起一个同步请求（提交form表单），相应的工作线程接收请求并立即开始执行同步任务（提交form表单到数据库）；主线程则一直等待，直到工作线程完工作通知主线程（数据成功入库，返回执行结果，回调函数处理返回结果）。因为返回结果不为FALSE，所以在出现提示之后，出现跳转。</p></blockquote><h2 id="00x5-submit阻止表单提交"><a href="#00x5-submit阻止表单提交" class="headerlink" title="00x5 submit阻止表单提交"></a>00x5 submit阻止表单提交</h2><blockquote><p><img src="/2017/04/23/表单提交类型与ajax/clipboard1.png" alt="clipboard1"></p><p>参考：<br>ajax同步和异步的区别：<a href="http://www.open-open.com/lib/view/open1453079994386.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1453079994386.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;00x1-问题描述&quot;&gt;&lt;a href=&quot;#00x1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;00x1 问题描述&quot;&gt;&lt;/a&gt;00x1 问题描述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在写蜜罐时，遇到了form表单提交的一个问题。使用ajax方式异步提交表单，点击提交按钮后，&lt;br&gt;1.提交页面刷新。ajax使用的是POST方式提交，但是在地址栏出现了GET方式提交才会出现的地址类型。&lt;br&gt;&lt;img src=&quot;/2017/04/23/表单提交类型与ajax/地址.PNG&quot; alt=&quot;地址&quot;&gt;&lt;br&gt;2.数据库中数据成功入库，但是回调函数不显示。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
</feed>
