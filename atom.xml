<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miss Me</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-04T13:23:31.824Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Miss Me</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react+electron+ant-design+sqlite3实现一个桌面应用</title>
    <link href="http://yoursite.com/2018/12/04/react-electron-ant-design-sqlite3%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/04/react-electron-ant-design-sqlite3实现一个桌面应用/</id>
    <published>2018-12-04T13:22:27.000Z</published>
    <updated>2018-12-04T13:23:31.824Z</updated>
    
    <content type="html"><![CDATA[<h5 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h5><p>&emsp;&emsp;最近帮隔壁实验室写个简单的展示页面，想着自己学了一下nodejs与react，刚好可以用来练练手。于是使用sqlite3数据库，用nodejs来写后端，react写前端的前后端分离方法，完成了一个小demo。这时候又要求用electron改成桌面版的应用，这简单啊，把react打包出来的index.html放到electron下做入口文件不就OK了。但是又涉及到跟对方的Java环境下的jar包通信的问题，对方的思路是通过前端点击按钮在数据库里存入一个字段，jar包所在环境通过不断轮询数据库去获取该字段确定是否启动手机应用拖数据库。前端在点击按钮后不断轮询数据库，看需要的数据是否更新，有数据更新就取回数据，并在前端展示。对于这个方案，我是拒绝的。回来跟师兄讨论了一下，确定了下几种方案。</p><a id="more"></a><ul><li>nodejs写后端，react写前端。前端请求后端，由nodejs命令行启动jar。打包react页面放到electron下作为入口文件。</li><li>nodejs写后端，react写前端。把react页面打包近electron下作为入口文件，由于electron是基于nodejs的，所以在electron里使用socket实现桌面应用与jar包通信。</li><li>Java写后端，react写前端。把react写的页面打包放进electron下作为入口文件，放入Java环境下。</li><li>整合electron与react框架。使用ipcMain与ipcRenderer实现进程间的通信，ipcMain（主进程）用来获取数据，启动jar获取返回，再将数据返回到ipcRenderer(渲染进程)进行渲染。</li></ul><p>&emsp;&emsp;前三种方式都是需要启动服务器端的，对方采用sqlite3做数据库，就是希望在不启动服务器的情况下打开应用，启动jar包，展示数据。因此，第四种方式是<br>最合适的。但是在整合electron与react框架时，出现了很多问题。其中最关键的问题就是整合后react中不能直接使用require引入ipcRenderer。目前网络上查到的解决方案，都是使用window.require引入，同时使用预加载的方式。但是这种方式只适合在不使用进程间通信的情况下使用。下面给出一种我尝试成功的方法，可以使用进程间通信。虽然在开发过程中也出现了很多问题，但是所幸都一一解决了。</p><h5 id="0x01-技术路线"><a href="#0x01-技术路线" class="headerlink" title="0x01 技术路线"></a>0x01 技术路线</h5><table><thead><tr><th>技术路线</th><th>用途 </th></tr></thead><tbody><tr><td>Electron</td><td>构建桌面应用</td></tr><tr><td>react</td><td>前端页面渲染，展示</td></tr><tr><td>ant design</td><td>React的UI库</td></tr><tr><td>sqlite3</td><td>一个轻量级的数据库</td></tr></tbody></table><h5 id="0x02-环境安装及配置"><a href="#0x02-环境安装及配置" class="headerlink" title="0x02 环境安装及配置"></a>0x02 环境安装及配置</h5><ol><li>首先确认已经安装了Nodejs环境，如果没有安装请自行在搜索相关文章进行安装，这里不做详细讲解。</li><li><p>新建项目，打开cmd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir my-react</div><div class="line">cd my-react</div><div class="line">npm init//默认配置就好</div></pre></td></tr></table></figure></li><li><p>安装依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install –save-dev electron electron-prebuilt electron-reload electron-packager</div><div class="line">npm install –save-dev babel babelify babel-preset-es2015 babel-preset-react babel-plugin-transform-es2015-spread</div><div class="line">npm install –save-dev browserify watchify</div><div class="line">npm install –-save react react-dom react-router-dom</div></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;推荐ant design按需加载，因此这里还需要安装babel-plugin-import。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install antd --save</div><div class="line">npm install –save-dev babel-plugin-import</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;具体配置和使用请参考<a href="https://ant.design/docs/react/introduce-cn/" target="_blank" rel="external">ant design官网</a>.</p><ol><li>配置.babel</li></ol><p>&emsp;&emsp;在根目录下新建一个.babelrc文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [</div><div class="line">        &quot;es2015&quot;,</div><div class="line">        &quot;react&quot;</div><div class="line">    ],</div><div class="line">    &quot;plugins&quot;: [</div><div class="line">        &quot;transform-object-rest-spread&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;这两项用来告知babel转换ES6和React JSX风格的代码，另外还需转换ES6中的spread语法。</p><ol><li>代码转换</li></ol><p>&emsp;&emsp;package.json 文件中配置 watchify，让其可以自动检测本地代码变化，并且自动转换代码。<br>&emsp;&emsp;scripts 下面配置了三个命令：start、watch、package，分别用于启动 App、检测并转换代码、打包 App。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">    &quot;start&quot;: &quot;electron .&quot;,</div><div class="line">    &quot;watch&quot;: &quot;watchify app/appEntry.js -t babelify -o public/js/bundle.js --debug --verbose&quot;,</div><div class="line">    &quot;package&quot;: &quot;electron-packager ./ DemoApps --overwrite --app-version=1.0.0 --platform=win32 --arch=all --out=../DemoApps --version=1.2.1 --icon=./public/img/app-icon.icns&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;通过在命令行下执行 npm run xxx ，可以运行上面定义好的命令。我们看到，通过 babelify 将代码转换输出到 public/js/bundle.js 目录下，所以我们发布时只需要这一个转换好的 js 文件即可。</p><h5 id="0x03-Electron"><a href="#0x03-Electron" class="headerlink" title="0x03 Electron"></a>0x03 Electron</h5><p>&emsp;&emsp;package.json文件中有一个”main”字段，这指明了主进程的入口文件。也就是说，启动Electron后会首先在主进程中加载执行这个js文件。所以我们要在这里创建窗口，并在这里指定页面加载的入口文件（index.html）。</p><ol><li><p>index.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">const electron = require(&apos;electron&apos;);</div><div class="line">const &#123;app, BrowserWindow, Menu, ipcMain, ipcRenderer&#125; = electron;</div><div class="line"></div><div class="line">var mainWnd = null;</div><div class="line">function createMainWnd() &#123;//创建主进程的窗口</div><div class="line">    mainWnd = new BrowserWindow(&#123;//长宽可以自定义设置</div><div class="line">        width: ,</div><div class="line">        height: ,</div><div class="line">        icon: &apos;public/img/app-icon.png&apos;</div><div class="line">    &#125;);</div><div class="line">    if (isDevelopment) &#123;</div><div class="line">        mainWnd.webContents.openDevTools();</div><div class="line">    &#125;</div><div class="line">    mainWnd.loadURL(`file://$&#123;__dirname&#125;/index.html`);//加载index.html，打开electron将会显示index.html的内容</div><div class="line">    mainWnd.on(&apos;closed&apos;, () =&gt; &#123;</div><div class="line">       mainWnd = null;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">app.on(&apos;ready&apos;, createMainWnd);</div><div class="line">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</div><div class="line">    app.quit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li><li><p>index.html</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">        &lt;title&gt;Electron Demo Apps&lt;/title&gt;</div><div class="line">        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;public/css/main.css&quot;&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;div id=&quot;root&quot;&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">        &lt;!--引入转换后的js--&gt;</div><div class="line">        &lt;script src=&quot;public/js/bundle.js&quot;&gt;&lt;/script&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>&emsp;&emsp;这里的id为root的div是一个容器，React组件将会渲染到这个div上面；引入的bundle.js是通过babelify转换生成的js文件。</p><ol><li>app/appEmtry.js<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import ReactDOM from &apos;react-dom&apos;;</div><div class="line">import &#123;</div><div class="line">    BrowserRouter as Router,</div><div class="line">    Route,</div><div class="line">    Link,</div><div class="line">    Switch,</div><div class="line">    Redirect</div><div class="line">&#125; from &apos;react-router-dom&apos;;</div><div class="line">import Homepage from &apos;./components/Homepage&apos;; // 导入首页组件</div><div class="line">import Device from &apos;./components/Device&apos;; // 导入设备组件</div><div class="line">import &#123; Layout, Menu &#125; from &apos;antd&apos;;</div><div class="line"></div><div class="line">const &#123; Header, Content, Footer &#125; = Layout;</div><div class="line">const electron = window.require(&apos;electron&apos;);</div><div class="line">const &#123; ipcRenderer, shell &#125; = electron;</div><div class="line"></div><div class="line">class MainWindow extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    &#125;</div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">        &lt;!--这是路由组件--&gt;</div><div class="line">            &lt;Router&gt;</div><div class="line">                &lt;Layout className=&quot;layout&quot;&gt;</div><div class="line">                    &#123;/* &lt;div className=&quot;logo&quot; /&gt; */&#125;</div><div class="line">                    &lt;Header&gt;</div><div class="line">                        &lt;div className=&quot;logo&quot; /&gt;</div><div class="line">                        &lt;Menu</div><div class="line">                            theme=&quot;dark&quot;</div><div class="line">                            mode=&quot;horizontal&quot;</div><div class="line">                            defaultSelectedKeys=&#123;[&apos;1&apos;]&#125;</div><div class="line">                            style=&#123;&#123; lineHeight: &apos;64px&apos; &#125;&#125;</div><div class="line">                        &gt;</div><div class="line">                            &lt;Menu.Item key=&quot;1&quot;&gt;</div><div class="line">                                &lt;Link to=&quot;/service&quot;&gt;服务&lt;/Link&gt;</div><div class="line">                            &lt;/Menu.Item&gt;</div><div class="line">                            &lt;Menu.Item key=&quot;2&quot;&gt;</div><div class="line">                                &lt;Link to=&quot;/homepage&quot;&gt;首页&lt;/Link&gt;</div><div class="line">                            &lt;/Menu.Item&gt;</div><div class="line">                        &lt;/Menu&gt;</div><div class="line">                    &lt;/Header&gt;</div><div class="line">                    &lt;Content style=&#123;&#123; padding: &apos;0 50px&apos; &#125;&#125;&gt;</div><div class="line">                        &lt;div style=&#123;&#123; background: &apos;#fff&apos;, padding: 24, minHeight: 880 &#125;&#125;&gt;</div><div class="line"></div><div class="line">                            &lt;Switch&gt;</div><div class="line">                             </div><div class="line">                                &lt;Route exact path=&quot;/&quot; component=&#123;Service&#125;&gt;</div><div class="line">                                    </div><div class="line">                                &lt;/Route&gt;</div><div class="line">                                &lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div><div class="line">                                &lt;Redirect to=&quot;/&quot; /&gt;</div><div class="line">                            &lt;/Switch&gt;</div><div class="line">                        &lt;/div&gt;</div><div class="line">                    &lt;/Content&gt;</div><div class="line">                    &lt;Footer style=&#123;&#123; textAlign: &apos;center&apos; &#125;&#125;&gt;</div><div class="line">                        Ant Design ©2018 Created by Ant UED</div><div class="line">                    &lt;/Footer&gt;</div><div class="line">                &lt;/Layout&gt;</div><div class="line">            &lt;/Router&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let mainWndComponent = ReactDOM.render(</div><div class="line">    &lt;MainWindow /&gt;,</div><div class="line">    document.querySelector(&apos;#root&apos;));</div></pre></td></tr></table></figure></li></ol><p>&emsp;&emsp;需要注意的是，这里的ant design要按需引入；同时为了实现路由，要引入react-router-dom的组件；引入nodejs中文件处理的一些模块；引入electron的渲染进程，用于和主进程进行通信。并通过ReactDOM.render 方法将一个 React 组件渲染到了一个 div 上面。</p><h5 id="0x04-sqlite3安装"><a href="#0x04-sqlite3安装" class="headerlink" title="0x04 sqlite3安装"></a>0x04 sqlite3安装</h5><p>&emsp;&emsp;Electron是基于nodejs的，sqlite3又是一个轻量级数据库。所以这里我们通过在Electron里安装sqlite3的依赖，并引入sqlite3模块来使用它。    </p><p>&emsp;&emsp;但是在安装过程中会出现很多问题，其中比较多的就是node-gyp未安装的问题。下面给出一个测试正确的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g node-gyp</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用Microsoft的windows-build-tools，在确认电脑安装了python2.7版本的情况下（python3.0以上版本不支持），以管理员身份运行PowerShell或CMD.exe。使用下面代码安装所有必需的工具和配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --global --production windows-build-tools</div></pre></td></tr></table></figure><p>&emsp;&emsp;最后安装sqlite3.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save sqlite3</div></pre></td></tr></table></figure></p><p><a href="https://www.npmjs.com/package/node-gyp" target="_blank" rel="external">node-gyp</a>的官方网站提供了几种方式.</p><h5 id="0x05-启动"><a href="#0x05-启动" class="headerlink" title="0x05 启动"></a>0x05 启动</h5><p>&emsp;&emsp;首先启动Watchify，主要是让其监控本地文件修改，实时转换生成 public/js/bundle.js 文件。如果appEntry.js转换成bundle.js有错误的话，命令行下也会有提示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run watch</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;接下来就需要调用start来启动App了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run start</div></pre></td></tr></table></figure></p><h5 id="0x06-数据库操作与页面渲染"><a href="#0x06-数据库操作与页面渲染" class="headerlink" title="0x06 数据库操作与页面渲染"></a>0x06 数据库操作与页面渲染</h5><p>&emsp;&emsp;在这个项目中，我们使用到进程间通信来获取数据，并渲染到页面上。主进程用ipcMain，负责从sqlite3数据库获取数据，再通过与渲染进程ipcrenderer通信，将数据返回给渲染进程，渲染到页面上。</p><h6 id="主进程index-js中"><a href="#主进程index-js中" class="headerlink" title="主进程index.js中"></a>主进程index.js中</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ipcMain.on(&apos;getServiceMsg&apos;, (event, arg) =&gt; &#123;//主进程监听一个渲染进程，进行数据库操作</div><div class="line">    let curpage = arg.curpage;</div><div class="line">    let sql_num = &quot;SELECT * from Info&quot;;</div><div class="line">    let sql_all = &quot;SELECT * from Info limit 1&quot; ;</div><div class="line">    let num;</div><div class="line">    let results = [];</div><div class="line">    db.all(sql_num, function (err, rows) &#123;</div><div class="line">        num = rows.length;</div><div class="line">    &#125;);</div><div class="line">    db.all(sql_all, function (err, rows) &#123;</div><div class="line">        console.log(rows);</div><div class="line">        rows.map((row) =&gt; &#123;</div><div class="line">            results.push(&#123;</div><div class="line">                &quot;key&quot;: row.id,</div><div class="line">                &quot;xinghao&quot;: row.xinghao,</div><div class="line">                &quot;bianhao&quot;: row.bianhao,</div><div class="line">                &quot;wangluohao&quot;: row.wangluohao,</div><div class="line">                &quot;shoujihao&quot;: row.shoujihao,</div><div class="line">                &quot;yuyan&quot;: row.yuyan,</div><div class="line">                &quot;xitongbanben&quot;: row.xitongbanben,</div><div class="line">                &quot;xitongxinghao&quot;: row.xitongxinghao,</div><div class="line">                &quot;changshang&quot;: row.changshang</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">        results.push(&#123;</div><div class="line">            &quot;count&quot;: num,</div><div class="line">            &quot;curpage&quot;: curpage</div><div class="line">        &#125;);</div><div class="line">        // console.log(results);</div><div class="line">        event.returnValue = results;//将从数据库取得的数据返回给渲染进程</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;主进程需要对这个字段进行监听。</p><h6 id="渲染进程Homepage-js中"><a href="#渲染进程Homepage-js中" class="headerlink" title="渲染进程Homepage.js中"></a>渲染进程Homepage.js中</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">export default class Hello extends Component&#123;</div><div class="line">        constructor(props) &#123;</div><div class="line">            super(props);</div><div class="line">            this.state = &#123;</div><div class="line">                dataSource: [],</div><div class="line">                total: &quot;&quot;,</div><div class="line">                curpage: 1,</div><div class="line">                Selected: &quot;&quot;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line">        componentDidMount() &#123;</div><div class="line">            this.getMessageData();</div><div class="line">        &#125;</div><div class="line">        getMessageData() &#123;</div><div class="line">            let data = &#123;</div><div class="line">                &quot;type&quot;:&quot;Info&quot;,</div><div class="line">                &quot;curpage&quot;:this.state.curpage</div><div class="line">            &#125;</div><div class="line">            let res = ipcRenderer.sendSync(&apos;getServiceMsg&apos;, data);//发送给主进程一个字段：&apos;getServiceMsg&apos;，执行数据库查询操作后会获取一个返回值。</div><div class="line">            let count = res.pop();</div><div class="line">            this.setState(&#123;</div><div class="line">                dataSource: res[0],</div><div class="line">                total: count.count</div><div class="line">            &#125;, () =&gt; &#123;</div><div class="line">                console.log(this.state.dataSource);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        onChange(page) &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">                curpage: page.current,</div><div class="line">            &#125;, () =&gt; &#123;</div><div class="line">                this.getMessageData();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    render()&#123;&#125;</div></pre></td></tr></table></figure><h5 id="0x07-开发过程中出现的一些问题"><a href="#0x07-开发过程中出现的一些问题" class="headerlink" title="0x07 开发过程中出现的一些问题"></a>0x07 开发过程中出现的一些问题</h5><ul><li>css样式的问题：在用react开发的js文件中引用外部的css文件会报错；antd.css样式不能渲染。这应该是因为babel将appEntry.js转换成bundle.js文件，并没有将css文件转化出来。页面是通过加载index.html进行渲染的，html文件中不能找到css文件。因此，在入口html文件中引入外部css文件。可以解决这个问题。</li><li>文件路径问题：文件夹app下存放的是用react开发的js文件，在这里面引入图片时使用相对路径会出错。首先，Homepage与Device两个页面放在app文件夹下的components下，在app文件夹中，js文件的根路径就是app文件夹；因此，引入的图片只能放在app文件夹或下一级目录下；其次，经过babel的转化引起，在bundle.js文件中找不到合适的路径。因此，在引入图片时，我使用了绝对路径或者在整个项目的根目录下写一个css文件，在类中引入图片。</li><li>路由的问题：在打开页面时，首页是空白的，只有通过点击导航栏，才会将页面渲染出来。这个问题的解决请参考我前面的博客。</li><li>window.require问题：在react中不能直接引入ipcRenderer。这里要使用window.require进行引入，但需要注意的是，打包后的index.html文件为空白，会出现，’window.require is not a function’的报错，使用window.require而不是require来避免electron和browserify的require函数之间的冲突。在浏览器测试的时候会报错，这是因为window.require未在浏览器中定义，只在运行Electron应用程序时起作用。</li></ul><h5 id="0x08-打包"><a href="#0x08-打包" class="headerlink" title="0x08 打包"></a>0x08 打包</h5><p>&emsp;&emsp;关于electron的打包，目前提供了两种打包方式。这里使用的是electron-package。可以参考我的另外一篇博客。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近帮隔壁实验室写个简单的展示页面，想着自己学了一下nodejs与react，刚好可以用来练练手。于是使用sqlite3数据库，用nodejs来写后端，react写前端的前后端分离方法，完成了一个小demo。这时候又要求用electron改成桌面版的应用，这简单啊，把react打包出来的index.html放到electron下做入口文件不就OK了。但是又涉及到跟对方的Java环境下的jar包通信的问题，对方的思路是通过前端点击按钮在数据库里存入一个字段，jar包所在环境通过不断轮询数据库去获取该字段确定是否启动手机应用拖数据库。前端在点击按钮后不断轮询数据库，看需要的数据是否更新，有数据更新就取回数据，并在前端展示。对于这个方案，我是拒绝的。回来跟师兄讨论了一下，确定了下几种方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="ant-design" scheme="http://yoursite.com/tags/ant-design/"/>
    
  </entry>
  
  <entry>
    <title>浏览器存储的三种方式------Cookie、localStorage和SessionStorage</title>
    <link href="http://yoursite.com/2018/12/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AD%98%E5%82%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F-Cookie%E3%80%81localStorage%E5%92%8CSessionStorage/"/>
    <id>http://yoursite.com/2018/12/04/浏览器存储的三种方式-Cookie、localStorage和SessionStorage/</id>
    <published>2018-12-04T13:01:42.000Z</published>
    <updated>2018-12-04T13:19:12.638Z</updated>
    
    <content type="html"><![CDATA[<h5 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h5><p>&emsp;&emsp;这是不得不写的一篇。</p><a id="more"></a><h5 id="0x01-Cookie"><a href="#0x01-Cookie" class="headerlink" title="0x01 Cookie"></a>0x01 Cookie</h5><p>&emsp;&emsp;当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。<br>Cookie 的作用就是用于解决 “如何记录客户端的用户信息”:</p><ul><li>当用户访问 web 页面时，用户名可以记录在 cookie 中。</li><li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li></ul><p>&emsp;&emsp;Cookie 以名/值对形式存储，<br>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookie 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">username=John Doe</div></pre></td></tr></table></figure><ol><li><p>创建Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=John Doe&quot;;</div><div class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT&quot;;//为Cookie创建一个过期时间</div><div class="line">document.cookie=&quot;username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;//使用path参数告诉浏览器Cookie的路径</div></pre></td></tr></table></figure></li><li><p>读取Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var x = document.cookie;//以字符串的方式返回所有的cookie</div></pre></td></tr></table></figure></li><li><p>修改Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie=&quot;username=John Smith; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/&quot;;//类似于创建Cookie，旧的Cookie将会被覆盖。</div></pre></td></tr></table></figure></li><li><p>删除Cookie</p></li></ol><p>&emsp;&emsp;设置express参数为以前的时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">document.cookie = &quot;username=; expires=Thu, 01 Jan 1970 00:00:00 GMT&quot;;</div></pre></td></tr></table></figure></p><h5 id="0x02-localStorage"><a href="#0x02-localStorage" class="headerlink" title="0x02 localStorage"></a>0x02 localStorage</h5><p>&emsp;&emsp;localStorage是HTML5中新加入的特性，用来作为本地存储的，解决了cookie存储空间不足的问题。localStorage 类似于sessionStorage。区别在于:</p><ul><li>localStorage - 没有时间限制的数据存储</li><li>sessionStorage - 针对一个 session 的数据存储,当页面被关闭时,数据存储在sessionStorage 会被清除 。</li></ul><p>&emsp;&emsp;localStorage的使用:</p><ol><li><p>清空localStorage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.clear()</div></pre></td></tr></table></figure></li><li><p>存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem(&quot;name&quot;,&quot;Mark&quot;) </div><div class="line">localStorage.name = &quot;Mark&quot;;</div></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">localStorage.getItem(&quot;Mark&quot;)//读取保存在localStorage对象里名为name的变量的值</div><div class="line">localStorage.name //&quot;Mark&quot;</div><div class="line">localStorage.valueOf()//读取存储在localStorage上的所有数据</div><div class="line">localStorage.key(0) // 读取第一条数据的变量名(键值)</div></pre></td></tr></table></figure></li><li><p>删除某个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">localStorage.removeItem(&quot;name&quot;); //undefined</div></pre></td></tr></table></figure></li><li><p>检查localStorage里是否保存某个变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localStorage.hasOwnProperty(&apos;name&apos;) // true</div><div class="line">localStorage.hasOwnProperty(&apos;sex&apos;) // false</div></pre></td></tr></table></figure></li><li><p>将数组转为本地字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [&apos;aa&apos;,&apos;bb&apos;,&apos;cc&apos;]; // [&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</div><div class="line"></div><div class="line">localStorage.arr = arr //[&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;]</div><div class="line"></div><div class="line">localStorage.arr.toLocaleString(); // &quot;aa,bb,cc&quot;</div></pre></td></tr></table></figure></li><li><p>将JSON存储到localStorage里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var students = &#123;</div><div class="line">    xiaomin: &#123;</div><div class="line">        name: &quot;xiaoming&quot;,</div><div class="line">        grade: 1</div><div class="line">    &#125;,</div><div class="line">    teemo: &#123;</div><div class="line">        name: &quot;teemo&quot;,</div><div class="line">        grade: 3</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">students = JSON.stringify(students); //将JSON转为字符串存到变量里</div><div class="line"></div><div class="line">console.log(students);</div><div class="line"></div><div class="line">localStorage.setItem(&quot;students&quot;,students);//将变量存到localStorage里</div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">var newStudents = localStorage.getItem(&quot;students&quot;);</div><div class="line"></div><div class="line">newStudents = JSON.parse(students); //转为JSON</div><div class="line"></div><div class="line">console.log(newStudents); // 打印出原先对象</div></pre></td></tr></table></figure></li></ol><h5 id="0x03-SessionStorage"><a href="#0x03-SessionStorage" class="headerlink" title="0x03 SessionStorage"></a>0x03 SessionStorage</h5><p>&emsp;&emsp;sessionStorage 是HTML5新增的一个会话存储对象，用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。在JavaScript语言中可通过 window.sessionStorage 或 sessionStorage 调用此对象。</p><p>&emsp;&emsp;sessionStorage的使用：</p><ol><li><p>存储数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.setItem(&apos;testKey&apos;,&apos;这是一个测试的value值&apos;);//采用setItem()方法存储</div><div class="line">sessionStorage[&apos;testKey&apos;] = &apos;这是一个测试的value值&apos;;//通过属性方式存储</div></pre></td></tr></table></figure></li><li><p>读取数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.getItem(&apos;testKey&apos;); //通过getItem()方法取值、</div><div class="line">sessionStorage[&apos;testKey&apos;]; // 通过属性方式取值</div></pre></td></tr></table></figure></li><li><p>存储Json对象</p></li></ol><p>&emsp;&emsp;sessionStorage也可存储Json对象：存储时，通过JSON.stringify()将对象转换为文本格式；读取时，通过JSON.parse()将文本转换回对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var userEntity = &#123;</div><div class="line">    name: &apos;tom&apos;,</div><div class="line">    age: 22</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">// 存储值：将对象转换为Json字符串</div><div class="line">sessionStorage.setItem(&apos;user&apos;, JSON.stringify(userEntity));</div><div class="line"></div><div class="line">// 取值时：把获取到的Json字符串转换回对象</div><div class="line">var userJsonStr = sessionStorage.getItem(&apos;user&apos;);</div><div class="line">userEntity = JSON.parse(userJsonStr);</div><div class="line">console.log(userEntity.name); // =&gt; tom</div></pre></td></tr></table></figure><h5 id="0x04-三者比较"><a href="#0x04-三者比较" class="headerlink" title="0x04 三者比较"></a>0x04 三者比较</h5><table><thead><tr><th>特性</th><th>localstorage</th><th>SessionStorage</th><th>Cookie</th></tr></thead><tbody><tr><td>存储空间</td><td>5M左右</td><td>5M左右</td><td>4k，不能超过20个</td></tr><tr><td>生命周期</td><td>永久</td><td>当前会话</td><td>在设置的过期时间之前一直有效</td></tr><tr><td>与服务器通信</td><td>仅在浏览器中保存，不参与和服务器的通话</td><td>仅在浏览器中保存，不参与和服务器的通话</td><td>携带在HTTP头中,使用过多会导致性能的问题</td></tr><tr><td>应用场景</td><td>常用于长期登录（判断用户是否已登录）</td><td>敏感账号的一次性登录</td><td>1.判断用户是否登陆过网站，以便下次登录时能够实现自动登录（记住密码）；2.保存上次登录的时间等信息；3.保存上次查看的页面；4.浏览计数</td></tr><tr><td>作用域</td><td>不同浏览器无法共享，相同浏览器的不同页面之间可以共享localStorage（页面属于相同域名和端口）</td><td>不同浏览器无法共享，不同页面或标签页间无法共享。（当一个标签页包含多个iframe标签且属于同源页面，可以共享）</td><td>Cookie的作用域为当前设置的域名及其子域名</td></tr><tr><td>接口</td><td>可以接受原生接口，也可以封装来对Object和Array有更好支持</td><td>可以接受原生接口，也可以封装来对Object和Array有更好支持</td><td>原生的Cookie接口不友好，需要自己封装setCookie，getCookie</td></tr></tbody></table><p>&emsp;&emsp;这三者的共同点是：都是保存在浏览器端，且同源的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;这是不得不写的一篇。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>create-react-app中使用react-router-dom实现路由跳转</title>
    <link href="http://yoursite.com/2018/12/03/create-react-app%E4%B8%AD%E4%BD%BF%E7%94%A8react-router-dom%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC/"/>
    <id>http://yoursite.com/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/</id>
    <published>2018-12-03T13:37:24.000Z</published>
    <updated>2018-12-04T13:16:00.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/react.PNG" alt="react"></p><h5 id="0x00-写在前面"><a href="#0x00-写在前面" class="headerlink" title="0x00 写在前面"></a>0x00 写在前面</h5><p>&emsp;&emsp;说来很奇怪，之前用create-react-app写的web网页，结合ant desgin布局写的一个导航栏路由跳转。启动项目之后，首页有数据展示，点击导航栏可以跳转。但是！在整合了electron和react之后，启动项目之后首页空白，默认导航栏位置错误，要人为点击一下才有数据展示。这样用户体验真的真的很不友好。也是查了好久好久才解决了这个问题，于是决定写一篇博客，总结一下react-router-dom。<br><a id="more"></a></p><h5 id="0x01-react-router-dom的安装与使用"><a href="#0x01-react-router-dom的安装与使用" class="headerlink" title="0x01 react-router-dom的安装与使用"></a>0x01 react-router-dom的安装与使用</h5><p>&emsp;&emsp;react-router-dom的使用有两种方式。    </p><h6 id="1-使用npm"><a href="#1-使用npm" class="headerlink" title="1. 使用npm"></a>1. 使用npm</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save react-router-dom</div></pre></td></tr></table></figure><ul><li>js文件中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// using ES6 modules</div><div class="line">import &#123; BrowserRouter, Route, Link &#125; from &apos;react-router-dom&apos;//推荐使用</div><div class="line"> </div><div class="line">// using CommonJS modules</div><div class="line">const BrowserRouter = require(&apos;react-router-dom&apos;).BrowserRouter</div><div class="line">const Route = require(&apos;react-router-dom&apos;).Route</div><div class="line">const Link = require(&apos;react-router-dom&apos;).Link</div></pre></td></tr></table></figure></li></ul><h6 id="2-使用unpkg"><a href="#2-使用unpkg" class="headerlink" title="2. 使用unpkg"></a>2. 使用unpkg</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;https://unpkg.com/react-router-dom/umd/react-router-dom.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure><p>&emsp;&emsp;注意的是，这种方式还需要引入react的一些核心文件和依赖文件。不推荐使用这种方式。</p><h5 id="0x02-react-router-dom与react-router的区别"><a href="#0x02-react-router-dom与react-router的区别" class="headerlink" title="0x02 react-router-dom与react-router的区别"></a>0x02 react-router-dom与react-router的区别</h5><ul><li>react-router: 实现了路由的核心功能</li><li>react-router-dom: 基于react-router，加入了在浏览器运行环境下的一些功能，例如：Link组件，会渲染一个a标签，Link组件源码a标签行; BrowserRouter和HashRouter组件，前者使用pushState和popState事件构建路由，后者使用window.location.hash和hashchange事件构建路由。<br>&emsp;&emsp;接下来将介绍react-router-dom的一些组件</li></ul><h5 id="0x03-react-router-dom的详细介绍"><a href="#0x03-react-router-dom的详细介绍" class="headerlink" title="0x03 react-router-dom的详细介绍"></a>0x03 react-router-dom的详细介绍</h5><h6 id="1-HashRouter和BrowserRouter"><a href="#1-HashRouter和BrowserRouter" class="headerlink" title="1.HashRouter和BrowserRouter"></a>1.HashRouter和BrowserRouter</h6><p>&emsp;&emsp;这两个API两个是路由的基本，需要将它们包裹在最外层，两者只需要选其一。      </p><ol><li><p>HashRouter：使用URL的哈希部分（即window.location.hash）的<router>来保持UI与URL同步。注意：哈希历史记录不支持location.key或location.state。如果你使用过react-router2或3或者vue-router，你经常会发现，在浏览器打开页面，其url中会有个#，例如localhost:3000/#，HashRouter就会出现这种情况，它是通过hash值来对路由进行控制。如果使用HashRouter，路由就会默认有这个#。</router></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;HashRouter&gt;</div><div class="line">    &lt;Route path=&quot;/&quot; componet=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/HashRouter&gt;</div></pre></td></tr></table></figure></li><li><p>很多情况下不需要这个#，这时就需要用到BrowserRouter。它的原理是使用HTML5历史记录API（pushState，replaceState和popstate事件）的<router>来保持UI与URL的同步， 下面将主要结合它来讲解。如果文件放在服务器的二级目录下就可以使用它。</router></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter</div><div class="line">  basename=&quot;app&quot;</div><div class="line">  forceRefresh=true</div><div class="line">  getUserConfirmation=window.confirm</div><div class="line">  keyLength=9</div><div class="line">&gt;</div><div class="line">  &lt;Link to=&quot;/about&quot;&gt;About&lt;/Link&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></li></ol><ul><li>basename:string。所有位置的基本URL，如果应用程序是从服务器上的子目录提供的，则需要将其设置为子目录。 也就是说，上面例子中的Linkde解析后的href属性为 href=”#/app/about”。    </li><li>getUserConfirmation：function。用来确认导航功能。默认使用window.confirm。      </li><li>forceRefresh:bool。如果为true，则路由器将在页面导航中使用全页刷新。可以在不支持HTML5历史记录API的浏览器中使用此功能。      </li><li>keyLength:number。location.key的长度，默认为6。       </li><li>children:node。要呈现的单个子元素。       </li><li>例如”<a href="http://localhost:3000/app/&quot;,当主页前面是有一级目录app时，同样要显示主页的内容。这时需要配合Link使用。建议使用BrowserRouter。" target="_blank" rel="external">http://localhost:3000/app/&quot;,当主页前面是有一级目录app时，同样要显示主页的内容。这时需要配合Link使用。建议使用BrowserRouter。</a>      </li></ul><h6 id="2-Route"><a href="#2-Route" class="headerlink" title="2. Route"></a>2. Route</h6><p>&emsp;&emsp;Route用于控制路径对应显示的组件。常用的有exact、path以及component属性。    </p><ul><li>exact用于严格匹配，控制匹配到/路径时不会再继续向下匹配；</li><li>path标识指向的路由路径；</li><li>component表示要跳转的路径对应的显示组件；</li></ul><p>&emsp;&emsp;Route会有三大props，分别是location、history、match；     </p><ol><li>history</li></ol><p>&emsp;&emsp;history 指的是 history 包，它是 React Router 的两个主要依赖之一（除了 React 本身），并且提供了几种不同的实现方式，用于在各种环境中管理 JavaScript 中的会话历史。<br>&emsp;&emsp;history分成以下三种     </p><ul><li>browser history - 针对 DOM 环境，用于支持 HTML5 history API 的浏览器</li><li>hash history - 针对 DOM 环境，用于传统的旧式（低版本） 浏览器</li><li>memory history - history 在内存上的实现，用于测试以及 React Native 等非 DOM 环境</li></ul><p>&emsp;&emsp;history对象具有以下属性和方法：    </p><ul><li>length - number 历史堆栈中的条目数</li><li>action - string 当前的导航操作（push、replace 或 pop）</li><li>location - object 当前访问的位置信息，见下文</li><li>push(path, [state]) - function 将一个新条目推入到历史堆栈中</li><li>replace(path, [state]) - function 替换历史堆栈中的当前条目</li><li>go(n) - function 将历史堆栈中的指针移动 n 个条目</li><li>goBack() - function 返回到上一个页面，相当于 go(-1)</li><li>goForward() - function 进入到下一个页面，相当于 go(1)</li><li>block(prompt) - function 阻止导航（请参阅 history 文档）</li></ul><p>&emsp;&emsp;history 对象是可变的。因此建议从 <route> 渲染组件时接收的属性中直接访问 location，而不是通过 history.location 进行访问。这样可以保证 React 在生命周期中的钩子函数正常执行。    </route></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps(nextProps) &#123;</div><div class="line">    // true</div><div class="line">    console.log(nextProps.location !== this.props.location);</div><div class="line">    </div><div class="line">    // false，因为 history 是可变的。</div><div class="line">    console.log(nextProps.history.location !== this.props.history.location);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>location</li></ol><p>&emsp;&emsp;location 代表应用程序的位置。如当前的位置，将要去的位置，或是之前所在的位置。<br>&emsp;&emsp;location具有以下的属性：     </p><ul><li>pathname - string URL 路径</li><li>search - string URL 中的查询字符串</li><li>hash - string URL 中的 hash 片段</li><li>state - object 存储至 location 中的额外状态数据，仅在 browser history 和 memory history 中有效。<br>&emsp;&emsp;Router 将在以下几个地方提供 location 对象：     </li><li>在 Route component 中，以 this.props.location 方式获取</li><li>在 Route render 中，以 ({ location }) =&gt; () 方式获取</li><li>在 Route children 中，以 ({ location }) =&gt; () 方式获取</li><li>在 withRouter 中，以 this.props.location 方式获取</li></ul><p>&emsp;&emsp;location 对象永远不会发生改变，因此可以在生命周期钩子函数中使用 location 对象来查看当前访问地址是否发生改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentWillReceiveProps(nextProps) &#123;</div><div class="line">  if (nextProps.location !== this.props.location) &#123;</div><div class="line">    // 已经跳转了！</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ol><li>match</li></ol><p>&emsp;&emsp;Match是在使用Router之后被放入props中的一个属性，在class创建的组件中我们需要通过this.props.match来获取match之中的信息。match中包含的信息如下。</p><ul><li>params: object 路径参数，通过解析 URL 中的动态部分获得键值对 </li><li>isExact: bool 为 true 时，整个 URL 都需要匹配 </li><li>path: string 用来匹配的路径模式，用于创建嵌套的 Route </li><li>url: string URL 匹配的部分，用于嵌套的 Link</li></ul><p>&emsp;&emsp;在获取id时经常使用match。    </p><h6 id="3-Link和NavLink"><a href="#3-Link和NavLink" class="headerlink" title="3. Link和NavLink"></a>3. Link和NavLink</h6><p>&emsp;&emsp;两者都可以控制路由跳转，不同点是NavLink的api更多。    </p><ul><li>Link：主要api是to，to可以接受string或者一个object，来控制url，表示路由要跳转的路径。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Link to=&quot;/home&quot; /&gt;</div><div class="line">&lt;Link to=&#123;&#123;</div><div class="line">    pathname: &apos;/home&apos;,</div><div class="line">    search: &apos;?page=1&apos;,</div><div class="line">    hash: &apos;#the-hash&apos;,</div><div class="line">    state: &#123; fromDashboard: true &#125;</div><div class="line">&#125;&#125; /&gt;</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;这时点击Link就会跳转到home页面。    </p><ul><li>NavLink：它可以为当前选中的路由设置类名、样式以及回调函数等。     <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;BrowserRouter&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;</div><div class="line">                &lt;NavLink exact activeClassName=&quot;selected&quot; to=&quot;/home/1&quot;&gt;首页&lt;/NavLink&gt;</div><div class="line">            &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;Route path=&quot;/home/:1&quot; componet=&#123;Home&#125;&gt;&lt;/Route&gt;</div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;exact用于严格匹配，匹配到/则不会继续向下匹配；to则是控制跳转的路径，activeClassName是选中状态的类名，可以为其添加样式。我们通过在/home后面添加1来向路由中传递信息，这结合了上面Route中的/second/:id，线面的1234内容显示需要用到match。    </p><h6 id="4-Switch"><a href="#4-Switch" class="headerlink" title="4. Switch"></a>4. Switch</h6><p>&emsp;&emsp;Switch常常会用来包裹Route，它里面不能放其他元素，表示一次只能显示一个路由。用于渲染与路径匹配的第一个子 <route> 或 <redirect>。但与<route>不同的是，<switch> 只会渲染一个路由。而定义一系列 <route> 时，所有被匹配到的 <route> 将都会在页面被渲染出来。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;Route exact path=&quot;/&quot; component=&#123;Service&#125; /&gt;</div><div class="line">&lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div></pre></td></tr></table></figure></route></route></switch></route></redirect></route></p><p>&emsp;&emsp;像这种情况，exact匹配到’/‘就不会再向下匹配，当url为”<a href="http://localhost:3000/&quot;时,两个页面都会被匹配到；（匹配不到页面）Switch有两个属性" target="_blank" rel="external">http://localhost:3000/&quot;时,两个页面都会被匹配到；（匹配不到页面）Switch有两个属性</a>    </p><ul><li>location: object。用于匹配子元素而不是当前历史位置（通常是当前的浏览器 URL）的 location 对象。</li><li>children: node。<switch> 的子元素应该是 <route> 或 <redirect>。只有第一个匹配当前路径的组件会被渲染。当<switch> 中包含 <redirect> 时，可以使用任何 <route> 拥有的路径匹配属性：path、exact 和 strict。from 只是 path 的别名。     </route></redirect></switch></redirect></route></switch></li></ul><h6 id="5-Redirect"><a href="#5-Redirect" class="headerlink" title="5. Redirect"></a>5. Redirect</h6><p>&emsp;&emsp;Redirect有四个属性    </p><ul><li><p>to:string。链接到的路径名或位置。</p></li><li><p>to:object。要链接的位置。</p></li><li><p>push:bool。当为true时，重定向会将新条目推入历史记录，而不是替换当前条目</p></li><li><p>from:string。要重定向的路径名。用于在<switch>内部渲染<redirect>时匹配位置。</redirect></switch></p></li></ul><h5 id="0x04-结合小例子的讲解"><a href="#0x04-结合小例子的讲解" class="headerlink" title="0x04 结合小例子的讲解"></a>0x04 结合小例子的讲解</h5><p>&emsp;&emsp;在这个小例子中，<browserrouter>被放在最外层；<browserrouter>的子节点是<switch>，表示当前只会渲染一个路由，如果不使用<switch>的话，两个组件将会以同时渲染在一个页面上；再接下来是<route>，exact表示精确匹配到’’，只要匹配到’/‘就不会再往下匹配了，这时候就会出现将homepage和device两个页面都匹配到，这种情况下，如果不加Switch，就会按照先后顺序将两个组件都显示到同一个页面上；在加上switch的情况下，也会因为匹配到两个路径中有’/‘的组件而显示空白，这个时候，就需要加上Redirect，只显示第一个被匹配到的路径对应组件的内容。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;Menu.Item key=&quot;1&quot;&gt;</div><div class="line">    &lt;Link to=&quot;/service&quot;&gt;设备&lt;/Link&gt;</div><div class="line">&lt;/Menu.Item&gt;</div><div class="line">&lt;Menu.Item key=&quot;2&quot;&gt;</div><div class="line">    &lt;Link to=&quot;/homepage&quot;&gt;取证&lt;/Link&gt;</div><div class="line">&lt;/Menu.Item&gt;</div><div class="line">&lt;BrowserRouter&gt;</div><div class="line">    </div><div class="line">    &lt;Switch&gt;</div><div class="line">     </div><div class="line">        &lt;Route exact path=&quot;/&quot; component=&#123;Device&#125;&gt;</div><div class="line">            </div><div class="line">        &lt;/Route&gt;</div><div class="line">        &lt;Route path=&quot;/homepage&quot; component=&#123;Homepage&#125; /&gt;</div><div class="line">        &lt;Redirect to=&quot;/&quot; /&gt;</div><div class="line">    &lt;/Switch&gt;</div><div class="line">           </div><div class="line">&lt;/BrowserRouter&gt;</div></pre></td></tr></table></figure></route></switch></switch></browserrouter></browserrouter></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/12/03/create-react-app中使用react-router-dom实现路由跳转/react.PNG&quot; alt=&quot;react&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;0x00-写在前面&quot;&gt;&lt;a href=&quot;#0x00-写在前面&quot; class=&quot;headerlink&quot; title=&quot;0x00 写在前面&quot;&gt;&lt;/a&gt;0x00 写在前面&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;说来很奇怪，之前用create-react-app写的web网页，结合ant desgin布局写的一个导航栏路由跳转。启动项目之后，首页有数据展示，点击导航栏可以跳转。但是！在整合了electron和react之后，启动项目之后首页空白，默认导航栏位置错误，要人为点击一下才有数据展示。这样用户体验真的真的很不友好。也是查了好久好久才解决了这个问题，于是决定写一篇博客，总结一下react-router-dom。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>用setTimeout实现for循环中的计时器</title>
    <link href="http://yoursite.com/2018/09/01/%E7%94%A8setTimeout%E5%AE%9E%E7%8E%B0for%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E8%AE%A1%E6%97%B6%E5%99%A8/"/>
    <id>http://yoursite.com/2018/09/01/用setTimeout实现for循环中的计时器/</id>
    <published>2018-09-01T01:56:17.000Z</published>
    <updated>2018-12-03T13:23:29.442Z</updated>
    
    <content type="html"><![CDATA[<h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><p>&emsp;&emsp;要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.</p><a id="more"></a><h5 id="00x1-基本思路"><a href="#00x1-基本思路" class="headerlink" title="00x1 基本思路"></a>00x1 基本思路</h5><p>&emsp;&emsp;要实现分别输出数组中的所有值，通过简单的for循环就能实现。要实现间隔一段时间输出，则使用setTimeout函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">// setTimeout(function()&#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">// &#125;,2000)</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;可以在控制台看到紧跟着分别输出了小于10的i的值。但是加上setTimeout函数后，控制台的内容却都变成了10。<br>&emsp;&emsp;解释造成这种差别的原因，我们要从JavaScript的执行机制开始说起。</p><h5 id="00x2-js执行机制与作用域链"><a href="#00x2-js执行机制与作用域链" class="headerlink" title="00x2 js执行机制与作用域链"></a>00x2 js执行机制与作用域链</h5><p>&emsp;&emsp;首先，JavaScript是单线程环境，代码从上到下依次执行。这种执行方这也被称作是“同步执行”。（同一时间JavaScript只能执行一段代码，如果这段代码要执行很长时间，那么之后的代码只能尽情地等待它执行完才能有机会执行）。<br>&emsp;&emsp;但JavaScript中引进了异步机制。于是，所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入”任务队列”（task queue）的任务，只有主线程上的任务执行完了，才通知”任务队列”，任务队列中的任务才会进入主线程执行。</p><p>&emsp;&emsp;在上面的代码中，for循环是同步代码，setTimeout是异步代码。遇到这种既包含同步又包含异步的情况，JavaScript依旧按照从上到下的顺序执行同步代码，并将异步代码插入任务队列。setTimeout的第二个参数则是把执行代码（console.log(i)）添加到任务队列需等待的毫秒数，但等待的时间是相对主程序完毕的时间计算的，也就是说，在执行到setTimeout函数时会等待一段时间，再将当前任务插入任务队列。<br>&emsp;&emsp;最后，当执行完同步代码，js引擎就会去执行任务队列中的异步代码。这时候任务队列中就会有十个console.log(i)。我们知道，在每次循环中将setTimeout里面的代码“console.log(i)”放入任务队列时，i的值都是不一样的。但JavaScript引擎开始执行任务队列中的代码时，会开始在当前的作用域中开始找变量i，但是当前作用域中并没有对变量i进行定义。这个时候就会在创造该函数的作用域中寻找i。创建该函数的作用域就是全局作用域，这个时候就找到了for循环中的变量i，这时的i是全局变量，并且值已经确定：10。十个console.log“共享”i的值。这就是作用域链的问题。<br>&emsp;&emsp;为了解决以上两个问题，可以使用let或者闭包或者箭头函数。</p><h5 id="00x3-解决方案一——闭包"><a href="#00x3-解决方案一——闭包" class="headerlink" title="00x3 解决方案一——闭包"></a>00x3 解决方案一——闭包</h5><p>&emsp;&emsp;终于来到了本文中最重要的一部分。什么是闭包？！<br>&emsp;&emsp;闭包是指有权访问另一个函数作用域中的变量的函数。或者说，将函数作为参数或者返回值。创建闭包的常见方式，就是在一个函数内部创建另一个函数。以下面的代码为例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">    for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">    (function(j)&#123;//闭包</div><div class="line">    setTimeout(function()&#123;</div><div class="line">    console.log(j);//分别输出i的值</div><div class="line">    &#125;,4000)</div><div class="line">    &#125;)(i);//闭包</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;代码中注释为“闭包”的两行代码就是一个典型的闭包。我们在函数内部创建了一个函数，并将变量i以函数参数形式传递给内层函数中变量j，j就是这个函数中的局部变量，每次i传入的值不同，局部变量j的值也不同。</p><h5 id="00x4-解决方案二——let"><a href="#00x4-解决方案二——let" class="headerlink" title="00x4 解决方案二——let"></a>00x4 解决方案二——let</h5><p>&emsp;&emsp;如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">setTimeout(function()&#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">&#125;,2000)</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><h5 id="00x5-解决方案三——箭头函数"><a href="#00x5-解决方案三——箭头函数" class="headerlink" title="00x5 解决方案三——箭头函数"></a>00x5 解决方案三——箭头函数</h5><p>&emsp;&emsp;如下面的代码所示，使用let替换var，也能输出0-9的值。这是因为，当for循环中的i是通过var定义的变量时，作用域是一整个封闭函数，是全局作用域；当i是通过let定义的变量时，作用域在代码块中，叫做块级作用域，在for循环这个子块中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (let i = 0; i &lt; 10; i++) &#123;</div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">console.log(i);//分别输出i的值</div><div class="line">&#125;,2000)</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><h5 id="00x5-间隔输出"><a href="#00x5-间隔输出" class="headerlink" title="00x5 间隔输出"></a>00x5 间隔输出</h5><p>&emsp;&emsp;在实际查看时，控制台并不是一开始就输出i的值，但是也并没有按照预期每隔一段时间输出i的值，问题就出现setTimeout等待的时间上，每次都是2000ms。在任务队列里，setTimeout按照异步的顺序执行，按照放入任务队列的顺序依次开始执行，所以几乎同时打印出值。也就是说，在异步的情况下，执行任务队列里的代码(console.log(i))按照先后顺序执行，没有明显的时间差。可以利用传入的i的值来设置这种时间差。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function test()&#123;</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">(function(j)&#123;//闭包</div><div class="line">setTimeout(function()&#123;</div><div class="line">console.log(j);//分别输出i的值</div><div class="line">&#125;,2000*j)</div><div class="line">&#125;)(i);//闭包</div><div class="line">&#125;;</div><div class="line">&#125;;</div><div class="line">test();</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;这样等待的时间就会分别变成2000<em>1,2000</em>2,2000*3……且传入i的值就立即执行，所以每次打印都会有2000ms的时间差。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;要实现的功能：在for循环中写一个计时器，先隔2000毫秒打印1，再隔2000毫秒打印2….依次每间隔2000毫秒打印出0到9.&lt;/p&gt;
    
    </summary>
    
    
      <category term="setTimeout" scheme="http://yoursite.com/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>electron与vue实践初体验</title>
    <link href="http://yoursite.com/2018/05/24/electron%E4%B8%8Evue%E5%AE%9E%E8%B7%B5%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2018/05/24/electron与vue实践初体验/</id>
    <published>2018-05-24T09:40:08.000Z</published>
    <updated>2018-12-04T13:19:08.972Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/05/24/electron与vue实践初体验/electron.png" alt="electron"></p><h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><p>&emsp;&emsp;最近接触了electronjs，官方文档上描述介绍Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，用于构建桌面应用。在开始构建electron或vue之前，默认已经安装了nodejs和git。npm镜像资源索取代理地址在国外，安装速度很慢，这里使用了淘宝提供的镜像cnpm来进行安装。     </p><a id="more"></a><p>&emsp;&emsp;使用下面的命令来安装cnpm。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org//安装cnpm</div></pre></td></tr></table></figure></p><h5 id="00x1-构建electron"><a href="#00x1-构建electron" class="headerlink" title="00x1 构建electron"></a>00x1 构建electron</h5><ul><li>首先，打开命令行，使用cnpm安装electron。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cnpm install -g electron//在全局安装</div><div class="line">cnpm install --save-dev electron//在当前目录安装</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;这里使用了全局安装方式：<br><img src="/2018/05/24/electron与vue实践初体验/cnpm-install-g-electron.PNG" alt="mockjs"></p><ul><li>打开git，在github上下载electron-quick-start。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/electron/electron-quick-start</div><div class="line">cd electron-quick-start</div><div class="line">cnpm install //安装各种依赖</div><div class="line">cnpm run start //打开桌面应用</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;可以看到一个桌面应用被打开。<br><img src="/2018/05/24/electron与vue实践初体验/helloword.PNG" alt="mockjs"></p><h5 id="00x2-在electron中引入vue"><a href="#00x2-在electron中引入vue" class="headerlink" title="00x2 在electron中引入vue"></a>00x2 在electron中引入vue</h5><ul><li><p>新建一个vue项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cnpm install -g vue-cli//全局安装vue-cli脚手架</div><div class="line">vue init webpack my-vue(项目名字)//初始化一个项目</div><div class="line">cd my-vue</div><div class="line">cnpm install //安装各种依赖</div><div class="line">npm run dev //打开这个项目</div></pre></td></tr></table></figure></li><li><p>vue打包<br>&emsp;&emsp;打开vue项目中config文件夹下的index.js文件，确认其中的assetsPublicPath修改为相对路径 ./。注意是build配置下的assetsPublicPath。</p></li></ul><p>&emsp;&emsp;运行npm run build对vue项目进行打包，在dist文件夹中生成打包文件。将dist文件夹中生成的static文件夹和index.html放入electron-quick-start下，替换掉electron-quick-start的index.html。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;再次在electron-quick-start目录中运行npm run start</p><h5 id="00x3-打包"><a href="#00x3-打包" class="headerlink" title="00x3 打包"></a>00x3 打包</h5><ul><li><p>在electron-quick-start下安装打包插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnpm install -g electron-packager//采用全局安装</div></pre></td></tr></table></figure></li><li><p>使用electron-packager来进行打包，可以直接使用打包命令</p></li></ul><p>electron-packager <location of="" project=""> <name of="" project=""> <platform> <architecture> <electronversion> <optional options=""></optional></electronversion></architecture></platform></name></location></p><p>&emsp;&emsp;这里的参数:</p><ul><li>location of project：项目所在路径 </li><li>name of project：打包的项目名字 </li><li>platform：确定了你要构建哪个平台的应用（Windows、Mac 还是 Linux） </li><li>architecture：决定了使用 x86 还是 x64 还是两个架构都用 </li><li>electron version：electron 的版本 </li><li>optional options：可选选项</li></ul><p>&emsp;&emsp;但是这个命令很长，每次都这样输入会比较麻烦；</p><ul><li><p>可以在package.json下的script下这样写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&quot;electron_build&quot;: &quot;electron-packager ./ --platform=win32 --arch=x64 --icon=./app/img/electron.ico --overwrite&quot;</div></pre></td></tr></table></figure></li><li><p>打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run electron_build</div></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;运行打包命令就会生成一个文件夹，在里面就能找到打包生成的.exe文件。双击就能运行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/05/24/electron与vue实践初体验/electron.png&quot; alt=&quot;electron&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近接触了electronjs，官方文档上描述介绍Electron 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建原生程序的框架，用于构建桌面应用。在开始构建electron或vue之前，默认已经安装了nodejs和git。npm镜像资源索取代理地址在国外，安装速度很慢，这里使用了淘宝提供的镜像cnpm来进行安装。     &lt;/p&gt;
    
    </summary>
    
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB-数据聚合的三种方式</title>
    <link href="http://yoursite.com/2018/03/03/mongoDB-%E6%95%B0%E6%8D%AE%E8%81%9A%E5%90%88%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/03/03/mongoDB-数据聚合的三种方式/</id>
    <published>2018-03-03T11:52:44.000Z</published>
    <updated>2018-03-03T12:19:59.192Z</updated>
    
    <content type="html"><![CDATA[<h5 id="00x1-group"><a href="#00x1-group" class="headerlink" title="00x1 group"></a>00x1 group</h5><p>&emsp;&emsp;使用group可以执行相对复杂的聚合，先选定分组所依据的键，而后mongoDB就会将集合依据选定键进行分组，然后对每一个分组内的文档进行聚合，以得到结果文档。<br>（1）group结构<br><a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">db.test.group(&#123;</div><div class="line">    key:&#123;field:true&#125;  //key为分组依据，相当于aggregate中的$group</div><div class="line">    initial:&#123;count:0&#125;   //在分组前对变量初始化，这里声明的变量在下面回调函数中作为result的属性使用。</div><div class="line">    condition://过滤条件，相当于aggregate中的$match。</div><div class="line">    reduce:function ( curr, result ) &#123;&#125;     //第一个参数为当前分组中此时迭代到的文档对象，第二个参数为当前分组</div><div class="line">    &quot;$keyf&quot;:function() &#123;return &#125;  //定义分组函数</div><div class="line">    finalize:function(result)&#123;&#125; //这里的result为reduce的result，代表当前分组。此函数对完成当前分组后回调。</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>&emsp;&emsp;Group有传入的命令中共有六个参数，其中三个是JavaScript函数，因此每次查询到匹配的数据，都会被转换为对象传入函数。从运行效率上来说，Group比Aggregate差一大截。</p><p>（2）使用场景<br>&emsp;&emsp;对返回数据最多只包含20000个元素，最多支持20000独立分组。</p><h5 id="00x2-aggregate"><a href="#00x2-aggregate" class="headerlink" title="00x2 aggregate"></a>00x2 aggregate</h5><p>&emsp;&emsp;aggregate是mongoDB中经常提起的“管道”。主要用于处理数据（如求和，统计平均值等），并返回计算后的数据结构。<br>&emsp;&emsp;aggreagte是一个数组，其中包含多个对象（命令），通过遍历Pipleline数组对collection中的数据进行操作。<br>&emsp;&emsp;下面介绍一下aggregate的聚合管道比较常用的几种操作：<br>（1）$project<br>&emsp;&emsp;修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $project:&#123;</div><div class="line">        &quot;_id&quot;:1,</div><div class="line">        &quot;name&quot;:1</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>（2）$match<br>&emsp;&emsp;用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $match:&#123;</div><div class="line">        &quot;count&quot;:&quot;3&quot;,</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（3）$limit<br>&emsp;&emsp;用来限制MongoDB聚合管道返回的文档数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $limit:5</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（4）$skip<br>&emsp;&emsp;在聚合管道中跳过指定数量的文档，并返回余下的文档。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $skip:8</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（5）$unwind<br>&emsp;&emsp;将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">$unwind:&quot;$identlist&quot;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（6）$group<br>&emsp;&emsp;将集合中的文档分组，可用于统计结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $group:&#123;&quot;_id&quot;:&quot;$count&quot;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（7）$sort<br>&emsp;&emsp;将输入文档排序后输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.testtest.aggregate(&#123;</div><div class="line">    $sort:&#123;&quot;count&quot;:1&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><p>（8）使用场景<br>&emsp;&emsp;应用于常用的聚合操作；对聚合响应性能有一定要求时（索引及组合优化）；管道操作在中完成，由于内存有大小限制，处理的数据集大小有限。    </p><h5 id="00x3-MapReduce"><a href="#00x3-MapReduce" class="headerlink" title="00x3 MapReduce"></a>00x3 MapReduce</h5><p>（1）MapReduce结构<br>&emsp;&emsp;mapreduce是mongoDB中提供的用于数据聚合的一种方式。通过对集合中的各个满足条件的文档进行预处理，整理出想要的数据然后统计得到最终的统计结果。<br>&emsp;&emsp;mapreduce的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;  </div><div class="line">    mapreduce:&lt;collection&gt;,  //需要进行处理的集合名</div><div class="line">    map:&lt;mapfunction&gt;,  //映射函数（分组）</div><div class="line">    reduce:&lt;reducefunction&gt;,  //统计函数</div><div class="line">    [,query:&lt;query filter object&gt;]  //，在发往map函数之前，对文档进行过滤 </div><div class="line">    [,sort:&lt;sorts the input objects using this key.Useful for optimization,like sorting by the emit key for fewer reduces&gt;]  //在发往map函数之前，对文档进行排序</div><div class="line">    [,limit:&lt;number of objects to return from collection&gt;]  //限制发往map函数的文档数量</div><div class="line">    [,out:&lt;see output options below&gt;]  //新建集合，用于存放统计结果</div><div class="line">    [,keeptemp:&lt;true|false&gt;]  //是否保存统计结果为临时集合</div><div class="line">    [,finalize:&lt;finalizefunction&gt;]  //最终处理函数，对reduce返回结果（存入out之前）进行最终处理</div><div class="line">    [,scope:&lt;object where fields go into javascript global scope&gt;] //向map、reduce、finalize导入外部变量</div><div class="line">    [,verbose:true]  //详细的统计信息，用于调试</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;使用MapReduce主要需要实现两个函数：Map函数和Reduce函数。接下来详细介绍这两个函数。<br>（2）Map函数<br>&emsp;&emsp;可以将Map函数理解为分组，调用emit（key，values），遍历collection中所有的记录。其中，emit中的key为分组依据；values为分组后需要保留的数据，为1时则统计该分组的值的个数。<br>&emsp;&emsp;key对应最后结果集中的_id。经过Map函数处理的集合，每条数据中只有”key”和”values”两个字段。</p><p>（3）Reduce函数<br>&emsp;&emsp;Reduce为统计函数，接受Map函数处理后返回的key和values作为参数，将key-values变成key-value，也就是把values数组变成一个个单一的value。当key-values中的values数组过大时，会被再切分成很多个小的key-values，再对这些小的key-values分别执行Reduce，再将多个块的结果组合成一个新的数组，作为Reduce函数的第二个参数，继续Reduce操作。这个类似于多阶的归并排序。<br>（4）out和keeptemp<br>&emsp;&emsp;out:<br>&emsp;&emsp;在文档输出时，output是可选的，一般结构为{ “out”: option }。<br>&emsp;&emsp;option可以有以下几个选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; replace : &quot;collection name&quot; &#125; – mapReduce的输出结果会替换掉原来的collection，collection不存在则创建。</div><div class="line">&#123; merge : &quot;collection name&quot; &#125; – 将新老数据进行合并，新的替换旧的，没有的添加进去。</div><div class="line">&#123; reduce : &quot;collection name&quot; &#125; – 存在老数据时，在原来基础上加新数据(即 new value = old value + mapReduce value)。</div><div class="line">&#123; inline : 1 &#125; – 不会创建collection，结果保存在内存里，只限于结果小于16MB的情况。</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;通常结构为{“out”:”collection name”}，如果collection不存在，就新建一个集合。</p><p>&emsp;&emsp;keeptemp<br>&emsp;&emsp;值只能为true或者false，表明输出到的collection是否是临时的，如果想在连接关闭后任然保留这个集合，则需要指定keeptemp的值为”true”。在使用output的情况下，不必指定keeptemp为true。</p><p>（5）使用场景<br>&emsp;&emsp;聚合要求复杂；大型数据集            </p><h5 id="00x4-三者比较"><a href="#00x4-三者比较" class="headerlink" title="00x4 三者比较"></a>00x4 三者比较</h5><table><thead><tr><th>&emsp;</th><th>group</th><th>aggregate</th><th>MapReduce</th></tr></thead><tbody><tr><td>是否使用JavaScript引擎</td><td>是，定制reduce函数</td><td>是，不能编写自定义函数</td><td>是，MapReduce函数是用JavaScript编写的</td></tr><tr><td>返回结果集保存位置</td><td>内联,结果必须符合BSON文档的限制(当前是16Mb)</td><td>内联，服务器支持的最大文档大小(16Mb)，超过时会报错</td><td>内联、新集合、合并、替换、减少</td></tr><tr><td>处理数据集大小</td><td>将不会分组到一个超过10,000个键的结果集</td><td>操作在内存中完成，有内存大小限制，处理数据集大小有限</td><td>大型数据集，超过20000的独立分组建议采用MapReduce</td></tr><tr><td>处理性能</td><td>低于aggregate</td><td>较高，管道可重复使用</td><td>低于aggregate</td></tr><tr><td>灵活度</td><td>低于MapReduce</td><td>低于MapRduce</td><td>较高，能使用JavaScript</td></tr></tbody></table><p>00x5  从一个小例子具体分析<br>&emsp; &emsp; 为公司的每个用户分配一张卡（有唯一的卡号”_id”）；持有该卡的用户可以使用这张卡在不同的超市消费，每个超市都有一个标识码，用”identlist”存放用户消费过的超市标识码；持有该卡的用户名字用”name”表示，默认在该公司中，每个人的姓名都是唯一的，与”_id”一一对应；”eventline”列举用户每次消费购买的物品；”timeline”记录每次消费的时间;”newtimeline”为用户最近一次消费的时间。<br>&emsp; &emsp;示例数据如下：<br><img src="/2018/03/03/mongoDB-数据聚合的三种方式/mongoDB数据.PNG" alt="mockjs"><br>&emsp; &emsp;知道最近有几家超市做促销（数组A），要求（1）获取在A中任意一家或多家超市消费过的卡的持有者；（2）这些卡的最新消费时间；（3）这些卡的累积消费次数；（4）根据最新消费时间/累积消费次数对获取到的这些卡的数据进行排序；对排序后的数据进行分页。<br>&emsp; &emsp;分析：要求中最难的是第一步：遍历数组A，将A中的每一条数据，作为分组依据（可能将原来的一条数据拆分成几条）；再对分组后的数据以”_id”进行聚合。<br>（1）使用MapReduce实现以上要求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">var map = function()&#123;</div><div class="line">    emit(this.name,this.timeline);</div><div class="line">    &#125;;</div><div class="line">var reduce = function(key,values)&#123;</div><div class="line">    return Array.sum(values);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">db.testtest.mapReduce(</div><div class="line">    map,</div><div class="line">    reduce,</div><div class="line">    &#123;</div><div class="line">        query:&#123;$where:function()&#123;</div><div class="line">        var arr = new Array(&quot;Jk3Nx5-YUxBJZ-Zklt&quot;,&quot;LMuHW7-JtnwQC-OBIh&quot;);</div><div class="line">            for(var index in arr)&#123;               </div><div class="line">                for(var current in this.identlist)&#123;</div><div class="line">                    if(this.identlist[current] == arr[index])&#123;</div><div class="line">                        return true;</div><div class="line">                    &#125;</div><div class="line">                    return false;</div><div class="line">                &#125;</div><div class="line">               </div><div class="line">              &#125;             </div><div class="line">        &#125;&#125;,</div><div class="line">        sort:&#123;&quot;count&quot;:1&#125;,</div><div class="line">        finalize:function(key,value)&#123;return &#123;count:value.length,time:value[0]&#125;;&#125;,</div><div class="line">        out:&quot;bbb_result&quot;        </div><div class="line">     &#125;</div><div class="line">)</div><div class="line">db.bbb_result.find().skip(1).limit(5)</div></pre></td></tr></table></figure><p>（2）使用aggregate<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var arr = new Array(&quot;wdeVyU-YVutsF-CEza&quot;,&quot;Jk3Nx5-YUxBJZ-Zklt&quot;);</div><div class="line">db.getCollection(&apos;testtest&apos;).aggregate([</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$identlist&quot;&#125;,</div><div class="line">    &#123;&quot;$match&quot;:&#123;&quot;identlist&quot;:&#123;&quot;$in&quot;:arr&#125;&#125;&#125;,</div><div class="line">    &#123;$group:&#123;_id:&quot;$name&quot;,timeline:&#123;$addToSet:&quot;$timeline&quot;&#125;&#125;&#125;,</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$timeline&quot;&#125;,</div><div class="line">    &#123;&apos;$unwind&apos;:&quot;$timeline&quot;&#125;,</div><div class="line">    &#123;$group:&#123;_id:&quot;$_id&quot;,time:&#123;$first:&quot;$timeline&quot;&#125;,count:&#123;&quot;$sum&quot;:1&#125;&#125;&#125;,</div><div class="line">    &#123;$sort:&#123;&quot;count&quot;:-1&#125;&#125;,</div><div class="line">    &#123;$skip:0&#125;,</div><div class="line">    &#123;$limit:5&#125;</div><div class="line">])</div></pre></td></tr></table></figure></p><p>&emsp; &emsp;以上两个小例子经测试后均能实现要求，这里不做详细解释，需要的请自取~</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;00x1-group&quot;&gt;&lt;a href=&quot;#00x1-group&quot; class=&quot;headerlink&quot; title=&quot;00x1 group&quot;&gt;&lt;/a&gt;00x1 group&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;使用group可以执行相对复杂的聚合，先选定分组所依据的键，而后mongoDB就会将集合依据选定键进行分组，然后对每一个分组内的文档进行聚合，以得到结果文档。&lt;br&gt;（1）group结构&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>在Vue项目中使用Mock.js构造模拟数据</title>
    <link href="http://yoursite.com/2018/03/03/%E5%9C%A8Vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8Mock-js%E6%9E%84%E9%80%A0%E6%A8%A1%E6%8B%9F%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/</id>
    <published>2018-03-03T10:25:51.000Z</published>
    <updated>2018-12-04T13:18:54.063Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/mockjs.PNG" alt="mockjs"></p><h5 id="00x1-mockjs简介"><a href="#00x1-mockjs简介" class="headerlink" title="00x1 mockjs简介"></a>00x1 mockjs简介</h5><p>&emsp;&emsp;mock.js是一款开发前端虚拟接口的插件，主要有两个功能<br><a id="more"></a></p><blockquote><ul><li>生成随机数据</li><li>拦截Ajax请求<h5 id="00x2-在vue-cli项目中安装配置mockjs"><a href="#00x2-在vue-cli项目中安装配置mockjs" class="headerlink" title="00x2 在vue-cli项目中安装配置mockjs"></a>00x2 在vue-cli项目中安装配置mockjs</h5></li></ul></blockquote><p>&emsp;&emsp;首先确保安装并成功引入axios；<br>&emsp;&emsp;然后安装mockjs  npm install mockjs –save-dev；<br>&emsp;&emsp;在main.js文件中引入mockjs并配置axios跨域信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">require(&apos;./mock.js&apos;)  </div><div class="line">//配置axios跨域请求头部</div><div class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;</div><div class="line">//配置axios请求拦截器</div><div class="line">axios.interceptors.request.use(function(config) &#123;</div><div class="line">    return config;</div><div class="line">  &#125;, function(error) &#123;</div><div class="line">    return Promise.reject(error);</div><div class="line">  &#125;)</div><div class="line">//配置axios响应拦截器</div><div class="line">axios.interceptors.response.use(function(response) &#123;</div><div class="line">  return response;</div><div class="line">&#125;, function(error) &#123;</div><div class="line">  return Promise.reject(error);</div><div class="line">&#125;)</div><div class="line">//封装axios的post请求</div><div class="line">export function fetch(url, params) &#123;</div><div class="line">  return new Promise((resolve, reject) =&gt; &#123;</div><div class="line">    axios.post(url, params).then(response =&gt; &#123;</div><div class="line">        resolve(response.data);</div><div class="line">      &#125;).catch((error) =&gt; &#123;</div><div class="line">        reject(error);</div><div class="line">      &#125;)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">//封装接口信息</div><div class="line">export default &#123;</div><div class="line">  http(url, params) &#123;</div><div class="line">    return fetch(url, params);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="00x3-Mock-js语法"><a href="#00x3-Mock-js语法" class="headerlink" title="00x3 Mock.js语法"></a>00x3 Mock.js语法</h5><p>&emsp;&emsp;mock.js语法分为两种，数据模板定义和数据占位符定义     </p><blockquote><ul><li>数据模板定义<br>基本结构：属性名|生成规则:属性值<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">（1）&apos;name|min-max&apos;: value</div><div class="line">（2）&apos;name|count&apos;: value</div><div class="line">（3）&apos;name|min-max.dmin-dmax&apos;: value</div><div class="line">（4）&apos;name|min-max.dcount&apos;: value</div><div class="line">（5）&apos;name|count.dmin-dmax&apos;: value</div><div class="line">（6）&apos;name|count.dcount&apos;: value</div><div class="line">（7）&apos;name|+step&apos;: value</div></pre></td></tr></table></figure></li></ul></blockquote><p>(1)属性值是字符串String<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|min-max: string</div><div class="line">通过重复string生成一个字符串，重复次数大于等于min，小于等于max。这里的重复是指对初始化string的重复次数。</div><div class="line"></div><div class="line">2. name|count: string</div><div class="line">通过重复string生成一个字符串，重复次数等于count。</div></pre></td></tr></table></figure></p><p>(2)属性值是数字Number<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1. name|+1 : number</div><div class="line">属性值自动加1， 初始值为number</div><div class="line"></div><div class="line">2. name|min-max: number</div><div class="line">生成一个大于等于min，小于等于max的整数。</div><div class="line"></div><div class="line">3. name|min-max.dmin-dmax: number</div><div class="line">生成一个浮点数，整数部分大于等于min，小于等于max，小数部分保留dmin到dmax位。</div></pre></td></tr></table></figure></p><p>（3）属性值是布尔类型Boolean<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|1: boolean</div><div class="line">随机生成一个布尔值，值为true的概率为1/2， 值为false的概率为1/2。</div><div class="line"></div><div class="line">2. name|min-max: value</div><div class="line">随机生成一个布尔值，值为 value 的概率是 min / (min + max)，值为 !value 的概率是 max / (min + max)。</div></pre></td></tr></table></figure></p><p>（4）属性值是对象Object<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. name|count: object</div><div class="line">从属性值object中随机选取count个属性</div><div class="line"></div><div class="line">2. name|min-max: object</div><div class="line">从属性值object中随机选取min到max个属性</div></pre></td></tr></table></figure></p><p>(5) 属性值是数组Array<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1. name|1: array</div><div class="line">从属性值array中随机选取一个元素，作为最终值</div><div class="line"></div><div class="line">2. name|+1: array</div><div class="line">从属性值array中顺序选取一个元素，作为最终值</div><div class="line"></div><div class="line">3. name|min-max: array</div><div class="line">通过重复属性值array生成一个新数组，重复次数大于等于min，小于等于max。</div><div class="line"></div><div class="line">4. name|count: array</div><div class="line">通过重复属性值array生成一个新数组，重复次数为count。</div></pre></td></tr></table></figure></p><p>(6) 属性值是函数Function<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&apos;name&apos;: function</div><div class="line"></div><div class="line">执行函数 function，取其返回值作为最终的属性值，函数的上下文为属性 &apos;name&apos; 所在的对象。</div></pre></td></tr></table></figure></p><p>(7) 属性值是正则表达式RegExp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1. name: regexp</div><div class="line">根据正则表达式regexp反向生成可以匹配他的字符串。用于生成自定义格式的字符串。</div></pre></td></tr></table></figure></p><blockquote><ul><li>数据占位符定义<br>基本结构：属性名：占位符<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;name|&apos;:&apos;@占位符()&apos;</div></pre></td></tr></table></figure></li></ul></blockquote><p>&emsp;&emsp;占位符也可以引用数据模板中的属性；占位符会有限引用数据模板中的属性；占位符支持相对路径和绝对路径。</p><h5 id="00x4-Mock-mock"><a href="#00x4-Mock-mock" class="headerlink" title="00x4 Mock.mock()"></a>00x4 Mock.mock()</h5><ul><li><p>Mock.mock(rurl?, rtype?, template|function(options))    </p><blockquote><p>根据数据模板生成模拟数据</p></blockquote></li><li><p>Mock.mock(template)</p><blockquote><p>根据数据模板生成模拟数据。</p></blockquote></li><li><p>Mock.mock(rurl, template)</p><blockquote><p>记录数据模板，当拦截到匹配rurl的ajax请求时，根据数据模板生成模拟数据，并作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, function(options))</p><blockquote><p>记录用于生成响应数据的函数。当拦截到匹配rurl的ajax请求时，函数function执行，并把执行结果作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, rtype, template)</p><blockquote><p>记录数据模板，当拦截到匹配rurl和rtype的ajax请求时，将根据数据模板生成模拟数据，并作为响应数据返回。</p></blockquote></li><li><p>Mock.mock(rurl, rtype, function(options))</p><blockquote><p>记录用于生成响应数据的函数。当拦截到匹配rurl和rtype的ajax请求时，函数function(options)将被执行，并把执行结果作为响应数据返回。</p></blockquote></li><li><p>rurl</p><blockquote><p>标识需要拦截的url，可以是url字符串或者url正则：</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/\/domain\/list\.json/、&apos;/domian/list.json&apos;。</div></pre></td></tr></table></figure><ul><li><p>rtype</p><blockquote><p>可选，标识需要拦截的ajax请求类型。例如GET, POST, PUT, DELETE等。</p></blockquote></li><li><p>template</p><blockquote><p>可选，标识数据模板，可以是对象或字符串。</p></blockquote></li><li><p>function(options)</p><blockquote><p>可选，表示用于生成响应数据的函数。</p></blockquote></li><li><p>options</p><blockquote><p>指向本次请求的ajax选项集，含有url， type和body三个属性。</p><h5 id="00x5-构造模拟数据"><a href="#00x5-构造模拟数据" class="headerlink" title="00x5 构造模拟数据"></a>00x5 构造模拟数据</h5></blockquote></li></ul><p>&emsp;&emsp;新建一个mock.js文件，在mock.js文件中引入mockjs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">const Mock = require(&apos;mockjs&apos;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;根据mock.js语法格式构造模拟数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">export default Mock.mock(&apos;http://test.com&apos;, &#123;</div><div class="line">    &apos;cur_ip&apos;:&#123;</div><div class="line">        &apos;data&apos;:&apos;@date&apos;,</div><div class="line">        &apos;ip&apos;:&apos;@ip&apos;,</div><div class="line">        &apos;number|1-100&apos;:10000, </div><div class="line">        &apos;rank|1-100&apos;:20,</div><div class="line">        &apos;info&apos;:&apos;@title(3)&apos;,</div><div class="line">    &#125;,</div><div class="line">    &apos;cur_whois&apos;:[&#123;</div><div class="line">        &apos;alexa|1-300&apos;:100,</div><div class="line">        &quot;cdate&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;edate&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;name_server&quot;:&apos;@domain&apos;,</div><div class="line">        &quot;registrant_address&quot;:&apos;@county(true)&apos;,</div><div class="line">        &quot;registrant_company&quot;:&apos;@ctitle(3, 5)&apos;,</div><div class="line">        &quot;registrant_email&quot;:&apos;@email&apos;,</div><div class="line">        &quot;registrant_name&quot;:&apos;@name(true)&apos;,</div><div class="line">        &quot;registrant_phone&quot;:/^1[0-9]&#123;10&#125;$/,</div><div class="line">        &quot;registrar_name&quot;:&apos;@name(true)&apos;,</div><div class="line">        &quot;udate&quot;:&apos;@datetime&apos;,</div><div class="line"></div><div class="line">     &#125;],</div><div class="line">    &apos;history_ip|20&apos;:[&#123;</div><div class="line">        &quot;date&quot;:&apos;@datetime&apos;,</div><div class="line">        &quot;ip&quot;:&apos;@ip&apos;,</div><div class="line">        &quot;info&quot;:&apos;@title(3)&apos;,</div><div class="line">    &#125;],</div><div class="line">&#125;）</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;mock.js也支持模拟ajax请求响应时间，自定义的响应时间可以是绝对值，也可以是区间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Mock.setup(&#123;</div><div class="line">    timeout: 40000//40秒后再响应</div><div class="line">&#125;)</div><div class="line">Mock.setup(&#123;</div><div class="line">    timeout: &apos;10000-40000&apos;//在10秒和40秒之间响应</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p><h5 id="00x6-请求获取数据"><a href="#00x6-请求获取数据" class="headerlink" title="00x6 请求获取数据"></a>00x6 请求获取数据</h5><p>&emsp;&emsp;在需要数据的页面中引入构造的mock的api<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">import mock from &apos;../main.js&apos;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;请求获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mock.http(&apos;http://test.com&apos;, &apos;type=top&amp;key=123456&apos;).then(res =&gt; &#123;</div><div class="line">  console.log(res);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;完成到这一步后，打开项目就可以看到已经生成的模拟数据，亲测可用。如果只是想了解mockjs语法，可以在打开官网，直接使用示例语法在浏览器控制台上进行测试。</p><blockquote><p>参考：<br><a href="http://mockjs.com/examples.html" target="_blank" rel="external">http://mockjs.com/examples.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/2018/03/03/在Vue项目中使用Mock-js构造模拟数据/mockjs.PNG&quot; alt=&quot;mockjs&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;00x1-mockjs简介&quot;&gt;&lt;a href=&quot;#00x1-mockjs简介&quot; class=&quot;headerlink&quot; title=&quot;00x1 mockjs简介&quot;&gt;&lt;/a&gt;00x1 mockjs简介&lt;/h5&gt;&lt;p&gt;&amp;emsp;&amp;emsp;mock.js是一款开发前端虚拟接口的插件，主要有两个功能&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
      <category term="Mockjs" scheme="http://yoursite.com/tags/Mockjs/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB安装与配置</title>
    <link href="http://yoursite.com/2017/07/26/mongoDB%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/07/26/mongoDB安装与配置/</id>
    <published>2017-07-26T06:49:12.000Z</published>
    <updated>2018-12-04T13:19:02.099Z</updated>
    
    <content type="html"><![CDATA[<h5 id="00x1-mongodb的安装与配置"><a href="#00x1-mongodb的安装与配置" class="headerlink" title="00x1 mongodb的安装与配置"></a>00x1 mongodb的安装与配置</h5><blockquote><p>(1)在mongodb的官网<a href="https://www.mongodb.com/download-center#community" target="_blank" rel="external">https://www.mongodb.com/download-center#community</a> 下载安装文件。</p></blockquote><a id="more"></a><pre><code>进入官网，直接点击donwnload即可。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/1.PNG" alt="Alt text"><br>(2)双击.msi文件安装<br><img src="http://oloaybpun.bkt.clouddn.com/2.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/3.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/4.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/5.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/6.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/7.png" alt="Alt text"></p><p><img src="http://oloaybpun.bkt.clouddn.com/8.png" alt="Alt text"></p><p>(3)创建数据目录</p></blockquote><pre><code>进入mongodb的安装包，创建数据目录D:\software\mongodb\mkdir dataD:\software\mongodb\cd  dataD:\software\mongodb\data\cd dbD:\software\mongodb\data\db\</code></pre><blockquote><p>(4)命令行下运行mongodb服务器</p></blockquote><pre><code>进入mongodb安装目录下的bin文件夹D:\software\mongodb\bin\mongod.exe --dbpath D:\software\mongodb\data\db出现下面的内容就表示正确运行了。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/9.png" alt="Alt text"></p></blockquote><pre><code>当然这一步也有可能出现问题，比如我就遇到了“mongod不是内部或外部命令,也不是可运行的程序”这个问题。最开始我在环境变量中加入了bin文件夹的路径，但是问题没有解决。解决方法：直接在bin文件夹中双击打开mongod.exe文件。同样会出现以上的内容。然后在浏览器中打开http://localhost:27017进行测试。出现下面的内容表示mongodb的服务器正确运行了。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/10.png" alt="Alt text"><br>(5)将mongodb安装为windows服务（命令行要有管理员权限）</p></blockquote><pre><code>D:\software\mongodb\bin\mongod --dbpath D:\software\mongodb\data --install但是出现了下面的提示，表明安装失败。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/11.png" alt="Alt text"></p><p>按照提示，需要指定log目录。因此重新切换到bin目录下，新建logs文件。并在logs文件夹下新建mongodb.log文件。</p></blockquote><pre><code>创建日志目录：    D:\software\mongodb\mkdir logs    D:\software\mongodb\cd logs    D:\software\mongodb\logs    然后重新进入bin文件夹，输入命令：    D:\software\mongodb\bin\mongod --dbpath D:\software\mongodb\data  --logpath=D:\software\mongodb\logs\mongodb.log --logappend.    没有出现错误提示。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/12.png" alt="Alt text"></p><p>也能够正常启动：<br><img src="http://oloaybpun.bkt.clouddn.com/13.png" alt="Alt text"><br>6.MongoDB后台管理shell（命令行要有管理员权限）</p></blockquote><pre><code>打开 MongoDB shell，失败。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/14.png" alt="Alt text"></p><p>   连接失败，net start  MongoDB服务，服务不能正常打开，mongo的服务没有被正确创建。</p></blockquote><pre><code>使用sc命令创建mongodb服务，需要注意的是，这一步的cmd必须要以管理员权限打开。D:\software\mongodb\bin\sc create MongDB binpath=&quot;D:\software\mongo\bin\mongod.exe --service --dbpath D:\software\mongodb\data --logpath=D:\software\mongodb\logs\mongodb.log --logappend 服务创建成功net start MongoDB 服务也可以正常启动</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/15.png" alt="Alt text"></p></blockquote><p> MongoDB Shell是MongoDB自带的交互式Javascript shell,用来对MongoDB进行操作和管理的交互式环境。可以运行一些简单的算术运算</p><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/16.png" alt="Alt text"></p></blockquote><p>(7)设置环境变量</p><pre><code>进入电脑上的环境变量，在系统变量下的path中加入mongodb目录下的bin文件的路径。这样命令行就可以在任何位置使用mongodb命令，不需要每次使用mongo和mongod命令的时候都进入bin文件夹下。</code></pre><blockquote><p><img src="http://oloaybpun.bkt.clouddn.com/18.PNG" alt="Alt text"></p></blockquote><h5 id="00x2-配置过程中一些命令的总结"><a href="#00x2-配置过程中一些命令的总结" class="headerlink" title="00x2 配置过程中一些命令的总结"></a>00x2 配置过程中一些命令的总结</h5><blockquote><p>在配置过程中，出现问题最多的是将mongodb安装为windows服务，和mongodb后台管理shell这两步骤。在解决这两步的问题时，尝试了不同的命令，在这里做一个总结。</p><p>(1)进入bin文件夹下</p></blockquote><pre><code>mongod.exe --bind_ip yourIPadress --logpath &quot;C:\data\dbConf\mongodb.log&quot; --logappend --dbpath &quot;C:\data\db&quot; --port yourPortNumber --serviceName &quot;YourServiceName&quot; --serviceDisplayName &quot;YourServiceName&quot; --install</code></pre><blockquote><p>(2)打开具有管理员身份的cmd</p></blockquote><pre><code>如果已经有某个服务名了，比如MongoDB，那么先把这个服务删了，sc delete MongoDB然后进入mongodb安装目录下的bin文件mongod --logpath d:\data\log\MongoDB.log --logappend --dbpath d:\data\db --serviceName MongoDB --install</code></pre><blockquote><p>(3)同样是进入mongodb安装目录下的bin文件下</p></blockquote><pre><code>mongod --logpath &quot;D:\software\mongodb\data\mongodb.log&quot; --logappend--dbpath &quot;D:\software\mongodb\data&quot; --serviceName &quot;MongoDB&quot; --serviceDisplayName &quot;MongoDB&quot; --install在解决这部分问题之后，觉得使用这些命令没有成功的原因可能是命令行没有获取管理员权限，还有就是mongdb的服务没有被正确创建。最正确的创建mongodb服务的方法是使用sc命令进行创建。D:\software\mongodb\bin\sc create MongDBbinpath=&quot;D:\software\mongo\bin\mongod.exe --service --dbpath D:\software\mongodb\data--logpath=D:\software\mongodb\logs\mongodb.log --logappend</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;00x1-mongodb的安装与配置&quot;&gt;&lt;a href=&quot;#00x1-mongodb的安装与配置&quot; class=&quot;headerlink&quot; title=&quot;00x1 mongodb的安装与配置&quot;&gt;&lt;/a&gt;00x1 mongodb的安装与配置&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;(1)在mongodb的官网&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;https://www.mongodb.com/download-center#community&lt;/a&gt; 下载安装文件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="mongoDB" scheme="http://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>表单提交类型与ajax</title>
    <link href="http://yoursite.com/2017/04/23/%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4%E7%B1%BB%E5%9E%8B%E4%B8%8Eajax/"/>
    <id>http://yoursite.com/2017/04/23/表单提交类型与ajax/</id>
    <published>2017-04-23T11:53:07.000Z</published>
    <updated>2018-12-04T13:30:25.362Z</updated>
    
    <content type="html"><![CDATA[<h5 id="00x1-问题描述"><a href="#00x1-问题描述" class="headerlink" title="00x1 问题描述"></a>00x1 问题描述</h5><blockquote><p>在写蜜罐时，遇到了form表单提交的一个问题。使用ajax方式异步提交表单，点击提交按钮后，<br>1.提交页面刷新。ajax使用的是POST方式提交，但是在地址栏出现了GET方式提交才会出现的地址类型。<br><img src="/2017/04/23/表单提交类型与ajax/地址.PNG" alt="地址"><br>2.数据库中数据成功入库，但是回调函数不显示。<br><a id="more"></a></p><h5 id="00x2-问题分析及解决"><a href="#00x2-问题分析及解决" class="headerlink" title="00x2 问题分析及解决"></a>00x2 问题分析及解决</h5><p>数据成功入库，说明ajax提交数据是成功的。而在地址栏中，又出现了GET方式提交才会出现的地址类型，说明表单中的数据应该是被提交了两次，第一次以POST方式（ajax中type设置成“POST”）提交，然后再以GET方式提交。</p><p>通过查找资料发现，代码中将button的type设置成了“submit”，将提交按钮的type属性修改成“button”，问题就会解决。<br><img src="/2017/04/23/表单提交类型与ajax/submit.PNG" alt="submit"><br>submit默认为以GET方式进行表单提交（form）。<br>button则响应用户自定义的事件，如果不指定onclick等事件处理函数，它不做任何事情。<br>以ajax方式提交时，jQuery给提交按钮绑定了click事件，ajax中设定了以POST方式提交。而在button中，type被设置成submit，默认以GET方式提交。就引出了关于click和submit执行先后顺序的问题。</p></blockquote><h5 id="00x3-click和submit执行的先后顺序"><a href="#00x3-click和submit执行的先后顺序" class="headerlink" title="00x3 click和submit执行的先后顺序"></a>00x3 click和submit执行的先后顺序</h5><blockquote><p>点击提交按钮时，是先触发click事件，然后再触发submit事件。<br>这里主要说的是click的处理后续和submit的处理后续：click-&gt;click响应事件-&gt;submit响应事件-&gt;submit。click的处理事件完成后，然后轮到submit事件的处理以及处理后的submit。<br>到这一步，感觉问题就快解决了。但是如果ajax提交表单成功之后，再submit以get方式提交的话。过程中就肯定能看到数据入库后返回的回调函数。就说明，ajax提交并没有完全执行，应该是在向后台提交数据之后和在success返回回调信息之间出现了阻塞。</p></blockquote><h5 id="00x4-同步和异步的区别"><a href="#00x4-同步和异步的区别" class="headerlink" title="00x4 同步和异步的区别"></a>00x4 同步和异步的区别</h5><blockquote><p>在JS中负责解释和执行JavaScript代码的线程只有一个。 这里我们叫做主线程。<br>实际上还存在其他的线程。例如：处理AJAX请求的线程、处理DOM事件的线程、定时器线程、读写文件的线程(例如在Node.js中)等等。这些线程可能存在于JS引擎之内，也可能存在于JS引擎之外。我们把它叫做工作线程。<br><img src="/2017/04/23/表单提交类型与ajax/clipboard.png" alt="clipboard"><br>主线程发起一个异步请求（提交form表单），相应的工作线程接收请求并告知主线程已收到(异步函数返回)；主线程可以继续执行后面的代码，同时工作线程执行异步任务（提交form表单到数据库）；工作线程完成工作后，通知主线程（数据成功入库，返回执行结果，并将其放入消息队列）；主线程收到通知后（主线程通过事件循环从消息队列里取消息），执行一定的动作(调用回调函数来处理返回结果) ；触发submit响应（返回值不为FALSE），执行表单的submit事件。又因为给了action的地址，所以会出现跳转。并且在跳转地址中出现GET方式的提交。</p><p>在同步情况下，主线程发起一个同步请求（提交form表单），相应的工作线程接收请求并立即开始执行同步任务（提交form表单到数据库）；主线程则一直等待，直到工作线程完工作通知主线程（数据成功入库，返回执行结果，回调函数处理返回结果）。因为返回结果不为FALSE，所以在出现提示之后，出现跳转。</p></blockquote><h5 id="00x5-submit阻止表单提交"><a href="#00x5-submit阻止表单提交" class="headerlink" title="00x5 submit阻止表单提交"></a>00x5 submit阻止表单提交</h5><blockquote><p><img src="/2017/04/23/表单提交类型与ajax/clipboard1.png" alt="clipboard1"></p><p>参考：<br>ajax同步和异步的区别：<a href="http://www.open-open.com/lib/view/open1453079994386.html" target="_blank" rel="external">http://www.open-open.com/lib/view/open1453079994386.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;00x1-问题描述&quot;&gt;&lt;a href=&quot;#00x1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;00x1 问题描述&quot;&gt;&lt;/a&gt;00x1 问题描述&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;在写蜜罐时，遇到了form表单提交的一个问题。使用ajax方式异步提交表单，点击提交按钮后，&lt;br&gt;1.提交页面刷新。ajax使用的是POST方式提交，但是在地址栏出现了GET方式提交才会出现的地址类型。&lt;br&gt;&lt;img src=&quot;/2017/04/23/表单提交类型与ajax/地址.PNG&quot; alt=&quot;地址&quot;&gt;&lt;br&gt;2.数据库中数据成功入库，但是回调函数不显示。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
  </entry>
  
</feed>
